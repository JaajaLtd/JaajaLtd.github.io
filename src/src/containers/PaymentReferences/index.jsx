import { isEmpty, orderBy } from 'lodash';
import React, { useEffect, useState } from 'react';
import { Accordion, Card } from 'react-bootstrap';
import { FaPaperclip } from 'react-icons/fa';
import { useDispatch, useSelector } from 'react-redux';
import {
  DataNotFound,
  DataSpinner,
  ReloadButton,
  TabMenu,
} from '../../components/common';
import AccordionHeader from '../../components/common/AccordionHeader';
import { paymentReferenceActions } from '../../config/actions';
import GeneratePaymentReference from './GeneratePaymentReference';
import ReferenceModal from './ReferenceModal';
import SinglePaymentReference from './SinglePaymentReference';

const PaymentReferences = () => {
  const dispatch = useDispatch();
  const { paymentReferences, gettingPaymentReferences } = useSelector(
    (state) => state.paymentReference
  );
  const [activeKey, setActiveKey] = useState(1);
  const [activeTab, setActiveTab] = useState('generate-reference');
  const [referenceTab, setReferenceTab] = useState('active');

  const reloadPaymentReferences = () => {
    dispatch(paymentReferenceActions.getPaymentReferences());
  };

  useEffect(() => {
    if (isEmpty(paymentReferences)) reloadPaymentReferences();
  }, []);

  return (
    <>
      <Card>
        <TabMenu
          currentMenu={activeTab}
          setCurrentMenu={setActiveTab}
          menus={[
            {
              title: 'Get Payment REF',
              action: 'generate-reference',
            },
            {
              title: 'My Payment REFs',
              action: 'references',
            },
          ]}
        />
        <Card.Body className="overflow-auto">
          {activeTab === 'references' && (
            <Card className="border-0">
              <TabMenu
                className="bg-white border"
                variant="pills"
                currentMenu={referenceTab}
                setCurrentMenu={setReferenceTab}
                menus={[
                  {
                    title: `Active References (${
                      paymentReferences?.active?.length || 0
                    })`,
                    action: 'active',
                  },
                  {
                    title: `Expired References (${
                      paymentReferences?.inactive?.length || 0
                    })`,
                    action: 'inactive',
                  },
                ]}
              >
                <div className="card-options">
                  <ReloadButton
                    loading={gettingPaymentReferences}
                    onClick={reloadPaymentReferences}
                  />
                </div>
              </TabMenu>

              {gettingPaymentReferences &&
              isEmpty(paymentReferences[referenceTab]) ? (
                <DataSpinner />
              ) : (
                <>
                  {isEmpty(paymentReferences[referenceTab]) ? (
                    <>
                      <DataNotFound
                        message={`You have No ${referenceTab} Payment References`}
                      />
                    </>
                  ) : (
                    <>
                      <Accordion defaultActiveKey="1" activeKey={activeKey}>
                        {orderBy(
                          paymentReferences[referenceTab],
                          ['ura_prn'],
                          'desc'
                        ).map((paymentReference) => (
                          <Accordion.Item
                            className="mb-0"
                            key={paymentReference.id}
                            eventKey={paymentReference?.id}
                          >
                            <AccordionHeader
                              activeKey={activeKey}
                              eventKey={paymentReference?.id}
                              setActiveKey={setActiveKey}
                            >
                              <FaPaperclip className="me-2" />
                              REFERENCE:
                              <span className="text-danger ms-1">
                                {paymentReference.ura_prn}
                              </span>
                              , AMOUNT TO PAY:
                              <strong className="text-danger mx-1">
                                {parseInt(
                                  paymentReference.amount,
                                  10
                                ).toLocaleString()}
                              </strong>
                              UGX, EXPIRY DATE:
                              <span className="mx-1 text-danger">
                                {`${paymentReference.expiry_date}`}
                              </span>
                              , GENERATED BY:
                              <span className="ms-1 text-danger">
                                {`${
                                  paymentReference.generated_by === 'STUDENT'
                                    ? 'SELF'
                                    : paymentReference.generated_by
                                }`}
                              </span>
                            </AccordionHeader>
                            <Accordion.Body>
                              <SinglePaymentReference
                                paymentReference={paymentReference}
                                key={paymentReference.id}
                              />
                            </Accordion.Body>
                          </Accordion.Item>
                        ))}
                      </Accordion>
                    </>
                  )}
                </>
              )}
            </Card>
          )}
          {activeTab === 'generate-reference' && <GeneratePaymentReference />}
        </Card.Body>
      </Card>
      <ReferenceModal switchTab={() => setActiveTab('references')} />
    </>
  );
};

export default PaymentReferences;
