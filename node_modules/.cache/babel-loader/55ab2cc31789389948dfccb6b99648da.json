{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis-front/src/containers/Results/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, DataNotFound, DataSpinner, ReloadButton } from '../../components/common';\nimport { resultActions } from '../../config/actions';\nimport usePrevious from '../Hooks/usePrevious';\nimport MyResult from './MyResult';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Result = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    results,\n    loading,\n    loadError\n  } = useSelector(state => state.result);\n  const {\n    currentStudentProgramme\n  } = useSelector(state => state.auth);\n  const [myResult, setMyResult] = useState({});\n  const [errorMessage, setErrorMessage] = useState(null);\n  const prevState = usePrevious({\n    loadError\n  });\n\n  const getMyResult = () => {\n    setErrorMessage(null);\n    dispatch(resultActions.getMyResult(currentStudentProgramme === null || currentStudentProgramme === void 0 ? void 0 : currentStudentProgramme.id));\n  };\n\n  useEffect(() => {\n    if (results) {\n      const findResult = results.find(result => result.programme_code === currentStudentProgramme.programme_code);\n      if (findResult) setMyResult(findResult);else getMyResult();\n    }\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(results)) {\n      const findResult = results.find(result => (result === null || result === void 0 ? void 0 : result.programme_code) === (currentStudentProgramme === null || currentStudentProgramme === void 0 ? void 0 : currentStudentProgramme.programme_code));\n      if (findResult) setMyResult(findResult);else {\n        setMyResult({});\n        setErrorMessage(null);\n      }\n    }\n  }, [results, loading]);\n  useEffect(() => {\n    if (!isEmpty(prevState) && !isEmpty(loadError) && loadError !== prevState.loadError) {\n      var _loadError$error, _loadError$server;\n\n      setErrorMessage((loadError === null || loadError === void 0 ? void 0 : (_loadError$error = loadError.error) === null || _loadError$error === void 0 ? void 0 : _loadError$error.message) || (loadError === null || loadError === void 0 ? void 0 : (_loadError$server = loadError.server) === null || _loadError$server === void 0 ? void 0 : _loadError$server.message));\n    }\n  }, [loadError]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        className: \"py-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"font600 text-uppercase text-sm\",\n          children: \"My Result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-options\",\n          children: /*#__PURE__*/_jsxDEV(ReloadButton, {\n            loading: loading,\n            onClick: getMyResult\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [errorMessage && /*#__PURE__*/_jsxDEV(AlertMessage, {\n          message: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 28\n        }, this), loading && isEmpty(myResult) ? /*#__PURE__*/_jsxDEV(DataSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: isEmpty(myResult) ? /*#__PURE__*/_jsxDEV(DataNotFound, {\n            message: \"You have No Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(MyResult, {\n              result: myResult\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this)\n          }, void 0, false)\n        }, void 0, false)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Result, \"pEhqTdi06tU1TLJ0Yr0wrG0qtIw=\", false, function () {\n  return [useDispatch, useSelector, useSelector, usePrevious];\n});\n\n_c = Result;\nexport default Result;\n\nvar _c;\n\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis-front/src/containers/Results/index.jsx"],"names":["isEmpty","React","useEffect","useState","Card","useDispatch","useSelector","AlertMessage","DataNotFound","DataSpinner","ReloadButton","resultActions","usePrevious","MyResult","Result","dispatch","results","loading","loadError","state","result","currentStudentProgramme","auth","myResult","setMyResult","errorMessage","setErrorMessage","prevState","getMyResult","id","findResult","find","programme_code","error","message","server"],"mappings":"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","sourcesContent":["import { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  AlertMessage,\n  DataNotFound,\n  DataSpinner,\n  ReloadButton,\n} from '../../components/common';\nimport { resultActions } from '../../config/actions';\nimport usePrevious from '../Hooks/usePrevious';\nimport MyResult from './MyResult';\n\nconst Result = () => {\n  const dispatch = useDispatch();\n  const { results, loading, loadError } = useSelector((state) => state.result);\n  const { currentStudentProgramme } = useSelector((state) => state.auth);\n  const [myResult, setMyResult] = useState({});\n  const [errorMessage, setErrorMessage] = useState(null);\n  const prevState = usePrevious({ loadError });\n\n  const getMyResult = () => {\n    setErrorMessage(null);\n    dispatch(resultActions.getMyResult(currentStudentProgramme?.id));\n  };\n\n  useEffect(() => {\n    if (results) {\n      const findResult = results.find(\n        (result) =>\n          result.programme_code === currentStudentProgramme.programme_code\n      );\n      if (findResult) setMyResult(findResult);\n      else getMyResult();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(results)) {\n      const findResult = results.find(\n        (result) =>\n          result?.programme_code === currentStudentProgramme?.programme_code\n      );\n      if (findResult) setMyResult(findResult);\n      else {\n        setMyResult({});\n        setErrorMessage(null);\n      }\n    }\n  }, [results, loading]);\n\n  useEffect(() => {\n    if (\n      !isEmpty(prevState) &&\n      !isEmpty(loadError) &&\n      loadError !== prevState.loadError\n    ) {\n      setErrorMessage(loadError?.error?.message || loadError?.server?.message);\n    }\n  }, [loadError]);\n\n  return (\n    <div>\n      <Card>\n        <Card.Header className=\"py-2\">\n          <div className=\"font600 text-uppercase text-sm\">My Result</div>\n          <div className=\"card-options\">\n            <ReloadButton loading={loading} onClick={getMyResult} />\n          </div>\n        </Card.Header>\n        <Card.Body>\n          {errorMessage && <AlertMessage message={errorMessage} />}\n          {loading && isEmpty(myResult) ? (\n            <DataSpinner />\n          ) : (\n            <>\n              {isEmpty(myResult) ? (\n                <DataNotFound message=\"You have No Results\" />\n              ) : (\n                <>\n                  <MyResult result={myResult} />\n                </>\n              )}\n            </>\n          )}\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default Result;\n"]},"metadata":{},"sourceType":"module"}