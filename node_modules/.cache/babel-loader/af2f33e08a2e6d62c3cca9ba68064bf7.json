{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis-front/src/containers/Events/CurrentEvents.jsx\",\n    _s = $RefreshSig$();\n\nimport { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { FaUserEdit, FaUserGraduate } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DataNotFound, DataSpinner, ReloadButton, TabMenu } from '../../components/common';\nimport { enrollmentActions, registrationActions } from '../../config/actions';\nimport EnrolledStudent from '../EnrollmentHistory/EnrolledStudent';\nimport EnrollForm from '../EnrollmentHistory/EnrollForm';\nimport Registration from '../RegistrationHistory/Registration';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CurrentEvents = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    currentEvents,\n    gettingCurrentEvents\n  } = useSelector(state => state.enrollment);\n  const {\n    currentStudentProgramme\n  } = useSelector(state => state.auth);\n  const [selectedKey, setSelectedKey] = useState('enrollment');\n  const [semesterEvent, setSemesterEvent] = useState({});\n\n  const reloadEnrollmentEvent = () => {\n    if (currentStudentProgramme === null || currentStudentProgramme === void 0 ? void 0 : currentStudentProgramme.id) {\n      dispatch(enrollmentActions.getCurrentEvents(currentStudentProgramme.id));\n    }\n\n    if (isEmpty(currentEvents.studentRegistration) && !isEmpty(currentEvents.registrationEvent)) {\n      dispatch(registrationActions.getCourseUnits(currentStudentProgramme.id));\n    }\n  };\n\n  useEffect(() => {\n    if (isEmpty(semesterEvent)) reloadEnrollmentEvent();\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(currentEvents)) {\n      const findEvent = currentEvents.find(event => parseInt(event.programme_id, 10) === parseInt(currentStudentProgramme.id, 10));\n      setSemesterEvent(findEvent ? findEvent.event : {});\n    }\n  }, [currentEvents, currentStudentProgramme]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(TabMenu, {\n      menus: [{\n        title: 'Enrollemnt',\n        icon: /*#__PURE__*/_jsxDEV(FaUserGraduate, {\n          className: \"me-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 19\n        }, this),\n        action: 'enrollment'\n      }, {\n        title: 'Registration',\n        icon: /*#__PURE__*/_jsxDEV(FaUserEdit, {\n          className: \"me-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 19\n        }, this),\n        action: 'registration',\n        hidden: isEmpty(semesterEvent.studentEnrollment) || isEmpty(semesterEvent.registrationEvent)\n      }],\n      currentMenu: selectedKey,\n      setCurrentMenu: setSelectedKey,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-options\",\n        children: /*#__PURE__*/_jsxDEV(ReloadButton, {\n          loading: gettingCurrentEvents,\n          onClick: reloadEnrollmentEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [selectedKey === 'enrollment' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: gettingCurrentEvents && isEmpty(semesterEvent) ? /*#__PURE__*/_jsxDEV(DataSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: isEmpty(semesterEvent.enrollmentEvent) || isEmpty(currentStudentProgramme) ? /*#__PURE__*/_jsxDEV(DataNotFound, {\n            message: \"There is no Enrollment event available\",\n            className: \"text-xl text-uppercase\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: !isEmpty(semesterEvent.studentEnrollment) ? /*#__PURE__*/_jsxDEV(EnrolledStudent, {\n              studentEnrollment: semesterEvent.studentEnrollment || {},\n              event: semesterEvent.enrollmentEvent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(EnrollForm, {\n              enrollmentEvent: semesterEvent.enrollmentEvent,\n              currentStudentProgramme: currentStudentProgramme,\n              reloadEnrollmentEvent: reloadEnrollmentEvent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 23\n            }, this)\n          }, void 0, false)\n        }, void 0, false)\n      }, void 0, false), selectedKey === 'registration' && /*#__PURE__*/_jsxDEV(Registration, {\n        registrationEvent: semesterEvent.registrationEvent,\n        registrationHistory: semesterEvent.studentRegistration,\n        enrollmentEvent: semesterEvent.enrollmentEvent,\n        enrollmentHistory: semesterEvent.studentEnrollment,\n        reloadEnrollmentEvent: reloadEnrollmentEvent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, semesterEvent === null || semesterEvent === void 0 ? void 0 : semesterEvent.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CurrentEvents, \"j3ZMz3zExKSAddsYHgWOYS2bBz0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = CurrentEvents;\nexport default CurrentEvents;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrentEvents\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis-front/src/containers/Events/CurrentEvents.jsx"],"names":["isEmpty","React","useEffect","useState","Card","FaUserEdit","FaUserGraduate","useDispatch","useSelector","DataNotFound","DataSpinner","ReloadButton","TabMenu","enrollmentActions","registrationActions","EnrolledStudent","EnrollForm","Registration","CurrentEvents","dispatch","currentEvents","gettingCurrentEvents","state","enrollment","currentStudentProgramme","auth","selectedKey","setSelectedKey","semesterEvent","setSemesterEvent","reloadEnrollmentEvent","id","getCurrentEvents","studentRegistration","registrationEvent","getCourseUnits","findEvent","find","event","parseInt","programme_id","title","icon","action","hidden","studentEnrollment","enrollmentEvent"],"mappings":"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","sourcesContent":["import { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { FaUserEdit, FaUserGraduate } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  DataNotFound,\n  DataSpinner,\n  ReloadButton,\n  TabMenu,\n} from '../../components/common';\nimport { enrollmentActions, registrationActions } from '../../config/actions';\nimport EnrolledStudent from '../EnrollmentHistory/EnrolledStudent';\nimport EnrollForm from '../EnrollmentHistory/EnrollForm';\nimport Registration from '../RegistrationHistory/Registration';\n\nconst CurrentEvents = () => {\n  const dispatch = useDispatch();\n  const { currentEvents, gettingCurrentEvents } = useSelector(\n    (state) => state.enrollment\n  );\n  const { currentStudentProgramme } = useSelector((state) => state.auth);\n  const [selectedKey, setSelectedKey] = useState('enrollment');\n  const [semesterEvent, setSemesterEvent] = useState({});\n\n  const reloadEnrollmentEvent = () => {\n    if (currentStudentProgramme?.id) {\n      dispatch(enrollmentActions.getCurrentEvents(currentStudentProgramme.id));\n    }\n    if (\n      isEmpty(currentEvents.studentRegistration) &&\n      !isEmpty(currentEvents.registrationEvent)\n    ) {\n      dispatch(registrationActions.getCourseUnits(currentStudentProgramme.id));\n    }\n  };\n\n  useEffect(() => {\n    if (isEmpty(semesterEvent)) reloadEnrollmentEvent();\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(currentEvents)) {\n      const findEvent = currentEvents.find(\n        (event) =>\n          parseInt(event.programme_id, 10) ===\n          parseInt(currentStudentProgramme.id, 10)\n      );\n      setSemesterEvent(findEvent ? findEvent.event : {});\n    }\n  }, [currentEvents, currentStudentProgramme]);\n\n  return (\n    <Card key={semesterEvent?.id}>\n      <TabMenu\n        menus={[\n          {\n            title: 'Enrollemnt',\n            icon: <FaUserGraduate className=\"me-1\" />,\n            action: 'enrollment',\n          },\n          {\n            title: 'Registration',\n            icon: <FaUserEdit className=\"me-1\" />,\n            action: 'registration',\n            hidden:\n              isEmpty(semesterEvent.studentEnrollment) ||\n              isEmpty(semesterEvent.registrationEvent),\n          },\n        ]}\n        currentMenu={selectedKey}\n        setCurrentMenu={setSelectedKey}\n      >\n        <div className=\"card-options\">\n          <ReloadButton\n            loading={gettingCurrentEvents}\n            onClick={reloadEnrollmentEvent}\n          />\n        </div>\n      </TabMenu>\n\n      <Card.Body>\n        {selectedKey === 'enrollment' && (\n          <>\n            {gettingCurrentEvents && isEmpty(semesterEvent) ? (\n              <DataSpinner />\n            ) : (\n              <>\n                {isEmpty(semesterEvent.enrollmentEvent) ||\n                isEmpty(currentStudentProgramme) ? (\n                  <DataNotFound\n                    message=\"There is no Enrollment event available\"\n                    className=\"text-xl text-uppercase\"\n                  />\n                ) : (\n                  <>\n                    {!isEmpty(semesterEvent.studentEnrollment) ? (\n                      <EnrolledStudent\n                        studentEnrollment={\n                          semesterEvent.studentEnrollment || {}\n                        }\n                        event={semesterEvent.enrollmentEvent}\n                      />\n                    ) : (\n                      <EnrollForm\n                        enrollmentEvent={semesterEvent.enrollmentEvent}\n                        currentStudentProgramme={currentStudentProgramme}\n                        reloadEnrollmentEvent={reloadEnrollmentEvent}\n                      />\n                    )}\n                  </>\n                )}\n              </>\n            )}\n          </>\n        )}\n        {selectedKey === 'registration' && (\n          <Registration\n            registrationEvent={semesterEvent.registrationEvent}\n            registrationHistory={semesterEvent.studentRegistration}\n            enrollmentEvent={semesterEvent.enrollmentEvent}\n            enrollmentHistory={semesterEvent.studentEnrollment}\n            reloadEnrollmentEvent={reloadEnrollmentEvent}\n          />\n        )}\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default CurrentEvents;\n"]},"metadata":{},"sourceType":"module"}