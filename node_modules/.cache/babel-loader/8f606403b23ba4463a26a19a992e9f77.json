{"ast":null,"code":"import { takeLatest, fork, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { enrollmentActions } from '../../actions';\n\nfunction* getCurrentEvents(actions) {\n  try {\n    const response = yield axios({\n      url: `/student-portal/enrollment/current-events/${actions.currentStudentProgrammeId}`,\n      method: 'GET'\n    });\n    yield put({\n      type: enrollmentActions.GET_CURRENT_EVENTS_SUCCESS,\n      data: response.data,\n      programmeId: actions.currentStudentProgrammeId\n    });\n  } catch (error) {\n    yield put({\n      type: enrollmentActions.GET_CURRENT_EVENTS_ERROR,\n      error: error.data\n    });\n  }\n}\n\nfunction* getEnrollmentHistory(actions) {\n  try {\n    const response = yield axios({\n      url: `/student-portal/enrollment/history/${actions.currentStudentProgrammeId}`,\n      method: 'GET'\n    });\n    yield put({\n      type: enrollmentActions.GET_ENROLLMENT_HISTORY_SUCCESS,\n      data: response.data,\n      programmeId: actions.currentStudentProgrammeId\n    });\n  } catch (error) {\n    yield put({\n      type: enrollmentActions.GET_ENROLLMENT_HISTORY_SUCCESS,\n      error: error.data\n    });\n  }\n}\n\nfunction* enrollStudent(actions) {\n  try {\n    var _actions$data;\n\n    const response = yield axios({\n      url: '/student-portal/enrollment/event/enroll',\n      method: 'POST',\n      data: actions.data\n    });\n    yield put({\n      type: enrollmentActions.ENROLL_STUDENT_SUCCESS,\n      data: response.data\n    });\n    yield put({\n      type: enrollmentActions.GET_CURRENT_EVENTS_REQUEST,\n      currentStudentProgrammeId: (_actions$data = actions.data) === null || _actions$data === void 0 ? void 0 : _actions$data.student_programme_id\n    });\n  } catch (error) {\n    yield put({\n      type: enrollmentActions.ENROLL_STUDENT_ERROR,\n      error: error.data\n    });\n  }\n}\n\nfunction* watchGetCurrentEvents() {\n  yield takeLatest(enrollmentActions.GET_CURRENT_EVENTS_REQUEST, getCurrentEvents);\n}\n\nfunction* watchGetEnrollmentHistory() {\n  yield takeLatest(enrollmentActions.GET_ENROLLMENT_HISTORY_REQUEST, getEnrollmentHistory);\n}\n\nfunction* watchEnrollStudent() {\n  yield takeLatest(enrollmentActions.ENROLL_STUDENT_REQUEST, enrollStudent);\n}\n\nconst forkFunctions = [fork(watchGetCurrentEvents), fork(watchGetEnrollmentHistory), fork(watchEnrollStudent)];\nexport default forkFunctions;","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/enrollment/index.js"],"names":["takeLatest","fork","put","axios","enrollmentActions","getCurrentEvents","actions","response","url","currentStudentProgrammeId","method","type","GET_CURRENT_EVENTS_SUCCESS","data","programmeId","error","GET_CURRENT_EVENTS_ERROR","getEnrollmentHistory","GET_ENROLLMENT_HISTORY_SUCCESS","enrollStudent","ENROLL_STUDENT_SUCCESS","GET_CURRENT_EVENTS_REQUEST","student_programme_id","ENROLL_STUDENT_ERROR","watchGetCurrentEvents","watchGetEnrollmentHistory","GET_ENROLLMENT_HISTORY_REQUEST","watchEnrollStudent","ENROLL_STUDENT_REQUEST","forkFunctions"],"mappings":"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","sourcesContent":["import { takeLatest, fork, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { enrollmentActions } from '../../actions';\n\nfunction* getCurrentEvents(actions) {\n  try {\n    const response = yield axios({\n      url: `/student-portal/enrollment/current-events/${actions.currentStudentProgrammeId}`,\n      method: 'GET',\n    });\n    yield put({\n      type: enrollmentActions.GET_CURRENT_EVENTS_SUCCESS,\n      data: response.data,\n      programmeId: actions.currentStudentProgrammeId,\n    });\n  } catch (error) {\n    yield put({\n      type: enrollmentActions.GET_CURRENT_EVENTS_ERROR,\n      error: error.data,\n    });\n  }\n}\n\nfunction* getEnrollmentHistory(actions) {\n  try {\n    const response = yield axios({\n      url: `/student-portal/enrollment/history/${actions.currentStudentProgrammeId}`,\n      method: 'GET',\n    });\n    yield put({\n      type: enrollmentActions.GET_ENROLLMENT_HISTORY_SUCCESS,\n      data: response.data,\n      programmeId: actions.currentStudentProgrammeId,\n    });\n  } catch (error) {\n    yield put({\n      type: enrollmentActions.GET_ENROLLMENT_HISTORY_SUCCESS,\n      error: error.data,\n    });\n  }\n}\n\nfunction* enrollStudent(actions) {\n  try {\n    const response = yield axios({\n      url: '/student-portal/enrollment/event/enroll',\n      method: 'POST',\n      data: actions.data,\n    });\n    yield put({\n      type: enrollmentActions.ENROLL_STUDENT_SUCCESS,\n      data: response.data,\n    });\n    yield put({\n      type: enrollmentActions.GET_CURRENT_EVENTS_REQUEST,\n      currentStudentProgrammeId: actions.data?.student_programme_id,\n    });\n  } catch (error) {\n    yield put({\n      type: enrollmentActions.ENROLL_STUDENT_ERROR,\n      error: error.data,\n    });\n  }\n}\n\nfunction* watchGetCurrentEvents() {\n  yield takeLatest(\n    enrollmentActions.GET_CURRENT_EVENTS_REQUEST,\n    getCurrentEvents\n  );\n}\n\nfunction* watchGetEnrollmentHistory() {\n  yield takeLatest(\n    enrollmentActions.GET_ENROLLMENT_HISTORY_REQUEST,\n    getEnrollmentHistory\n  );\n}\n\nfunction* watchEnrollStudent() {\n  yield takeLatest(enrollmentActions.ENROLL_STUDENT_REQUEST, enrollStudent);\n}\n\nconst forkFunctions = [\n  fork(watchGetCurrentEvents),\n  fork(watchGetEnrollmentHistory),\n  fork(watchEnrollStudent),\n];\n\nexport default forkFunctions;\n"]},"metadata":{},"sourceType":"module"}