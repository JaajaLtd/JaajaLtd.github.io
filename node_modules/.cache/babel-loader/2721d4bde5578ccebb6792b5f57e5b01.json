{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Dashboard/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { isEmpty } from 'lodash';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AuthLayout } from '../../components/shared';\nimport MainLayout from '../../components/shared/MainLayout';\nimport { authActions } from '../../config/actions';\nimport { getAccessToken } from '../../config/services/storageService';\nimport ErrorBoundary from '../Errors/ErrorBoundary';\nimport AuthUserLoader from './AuthUserLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    authUser,\n    isAuthenticated\n  } = useSelector(state => state.auth);\n  const {\n    selectedMenu\n  } = useSelector(state => state.setting);\n  const accessToken = getAccessToken();\n  useEffect(() => {\n    if (!isEmpty(accessToken)) dispatch(authActions.setIsAuthenticated(true));\n  }, [accessToken, selectedMenu]);\n  return /*#__PURE__*/_jsxDEV(ErrorBoundary, {\n    children: isAuthenticated === true ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isEmpty(authUser) ? /*#__PURE__*/_jsxDEV(AuthUserLoader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 32\n      }, this) : /*#__PURE__*/_jsxDEV(MainLayout, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 53\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(AuthLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"e43C3zNc6EsUaha9M94GNNJ28CQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Dashboard/index.jsx"],"names":["isEmpty","React","useEffect","useDispatch","useSelector","AuthLayout","MainLayout","authActions","getAccessToken","ErrorBoundary","AuthUserLoader","Dashboard","dispatch","authUser","isAuthenticated","state","auth","selectedMenu","setting","accessToken","setIsAuthenticated"],"mappings":";;;AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,yBAA3B;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,cAAT,QAA+B,sCAA/B;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM;AAAEU,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAgCV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAjD;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAmBb,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACG,OAAlB,CAApC;AAEA,QAAMC,WAAW,GAAGX,cAAc,EAAlC;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACF,OAAO,CAACmB,WAAD,CAAZ,EAA2BP,QAAQ,CAACL,WAAW,CAACa,kBAAZ,CAA+B,IAA/B,CAAD,CAAR;AAC5B,GAFQ,EAEN,CAACD,WAAD,EAAcF,YAAd,CAFM,CAAT;AAIA,sBACE,QAAC,aAAD;AAAA,cACGH,eAAe,KAAK,IAApB,gBACC;AAAA,gBAAGd,OAAO,CAACa,QAAD,CAAP,gBAAoB,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,cAApB,gBAAyC,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAA5C,qBADD,gBAGC,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CApBD;;GAAMF,S;UACaR,W,EACqBC,W,EACbA,W;;;KAHrBO,S;AAsBN,eAAeA,SAAf","sourcesContent":["import { isEmpty } from 'lodash';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AuthLayout } from '../../components/shared';\nimport MainLayout from '../../components/shared/MainLayout';\nimport { authActions } from '../../config/actions';\nimport { getAccessToken } from '../../config/services/storageService';\nimport ErrorBoundary from '../Errors/ErrorBoundary';\nimport AuthUserLoader from './AuthUserLoader';\n\nconst Dashboard = () => {\n  const dispatch = useDispatch();\n  const { authUser, isAuthenticated } = useSelector((state) => state.auth);\n  const { selectedMenu } = useSelector((state) => state.setting);\n\n  const accessToken = getAccessToken();\n\n  useEffect(() => {\n    if (!isEmpty(accessToken)) dispatch(authActions.setIsAuthenticated(true));\n  }, [accessToken, selectedMenu]);\n\n  return (\n    <ErrorBoundary>\n      {isAuthenticated === true ? (\n        <>{isEmpty(authUser) ? <AuthUserLoader /> : <MainLayout />}</>\n      ) : (\n        <AuthLayout />\n      )}\n    </ErrorBoundary>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}