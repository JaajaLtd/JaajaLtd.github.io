{"ast":null,"code":"import { flatten, isEmpty, orderBy, pick, toUpper } from 'lodash';\nexport const formatUserSelectOption = (users = []) => {\n  const usersList = [];\n\n  if (typeof users === 'object') {\n    users.forEach(user => {\n      usersList.push({\n        label: `${user.salutation ? user.salutation : ''} ${user.firstname} ${user.lastname}`,\n        value: user.id\n      });\n    });\n  }\n\n  return usersList;\n};\nexport const formatColleges = colleges => {\n  const collegesList = [];\n  colleges.forEach(college => {\n    collegesList.push({\n      label: `${college.college_title}`,\n      value: college.id\n    });\n  });\n  return collegesList;\n};\nexport const formatDepartments = departments => {\n  const departmentOptions = [];\n  departments === null || departments === void 0 ? void 0 : departments.forEach(department => {\n    departmentOptions.push({\n      label: `(${department === null || department === void 0 ? void 0 : department.department_code}) - ${department === null || department === void 0 ? void 0 : department.department_title}`,\n      value: department.id\n    });\n  });\n  return departmentOptions;\n};\nexport const formatFaculties = faculties => {\n  const facultiesList = [];\n  faculties.forEach(faculty => {\n    facultiesList.push({\n      label: `${faculty.faculty_title}`,\n      value: faculty.id\n    });\n  });\n  return facultiesList;\n};\nexport const formatSubjects = subjects => {\n  const subjectOptions = [];\n  subjects.forEach(subject => {\n    subjectOptions.push({\n      label: `(${subject.subject_code}) - ${subject.subject_name}`,\n      value: subject.id\n    });\n  });\n  return subjectOptions;\n};\nexport const formatMetadata = (metadata, fieldName, valueKey = null) => {\n  const formattedMetadataValues = [];\n  metadata.forEach(data => {\n    if (toUpper(data.metadata_name) === toUpper(fieldName)) {\n      data.metadataValues.forEach(value => {\n        formattedMetadataValues.push({\n          label: value.metadata_value,\n          value: valueKey ? value[valueKey] : value.id\n        });\n      });\n    }\n  });\n  return orderBy(formattedMetadataValues, ['label'], 'asc');\n};\nexport const formatSpecialization = specializations => {\n  const specializationOptions = [];\n  specializations.forEach(specialization => {\n    specializationOptions.push({\n      label: `(${specialization.specialization_code}) - ${specialization.specialization_title}`,\n      value: specialization.id\n    });\n  });\n  return specializationOptions;\n};\nexport const formatProgrammes = (programmes, valueField = null) => {\n  const formattedOptions = [];\n  programmes.forEach(programme => {\n    formattedOptions.push({\n      label: `(${toUpper(programme.programme_code)}) - ${toUpper(programme.programme_title)}`,\n      value: valueField ? programme[valueField] : programme.id\n    });\n  });\n  return formattedOptions;\n};\nexport const formatProgrammeWithCategories = programmes => {\n  const formattedOptions = [];\n  programmes.forEach(programme => {\n    formattedOptions.push({\n      label: `(${toUpper(programme.programme_code)}) - ${toUpper(programme.programme_title)}`,\n      value: programme.programme_id\n    });\n  });\n  return formattedOptions;\n};\nexport const formatProgrammeVersions = programmeVersions => {\n  const formattedOptions = [];\n  programmeVersions.forEach(version => {\n    formattedOptions.push({\n      label: toUpper(version.version_title),\n      value: version.id\n    });\n  });\n  return formattedOptions;\n};\nexport const formatProgrammeVersionModules = versionModules => {\n  const formattedOptions = [];\n  versionModules.forEach(versionModule => {\n    var _versionModule$module;\n\n    formattedOptions.push({\n      label: versionModule === null || versionModule === void 0 ? void 0 : (_versionModule$module = versionModule.module) === null || _versionModule$module === void 0 ? void 0 : _versionModule$module.metadata_value,\n      value: versionModule === null || versionModule === void 0 ? void 0 : versionModule.module_id\n    });\n  });\n  return orderBy(formattedOptions, ['label']);\n};\nexport const formatProgrammeVersionModuleOptions = moduleOptions => {\n  const formattedOptions = [];\n  moduleOptions.forEach(moduleOption => {\n    var _moduleOption$option;\n\n    formattedOptions.push({\n      label: moduleOption === null || moduleOption === void 0 ? void 0 : (_moduleOption$option = moduleOption.option) === null || _moduleOption$option === void 0 ? void 0 : _moduleOption$option.metadata_value,\n      value: moduleOption === null || moduleOption === void 0 ? void 0 : moduleOption.option_id\n    });\n  });\n  return orderBy(formattedOptions, ['label']);\n};\nexport const formatProgrammeVersionPlans = plans => {\n  const formattedOptions = [];\n  plans.forEach(plan => {\n    var _plan$ProgrammeVersio;\n\n    formattedOptions.push({\n      label: plan.metadata_value,\n      value: plan === null || plan === void 0 ? void 0 : (_plan$ProgrammeVersio = plan.ProgrammeVersionPlan) === null || _plan$ProgrammeVersio === void 0 ? void 0 : _plan$ProgrammeVersio.id\n    });\n  });\n  return formattedOptions;\n};\nexport const formatProgrammeVersionSubjectCombinationCategories = (combinationCategories, value = null, label = null) => {\n  const formattedOptions = [];\n  const categories = combinationCategories || [];\n  categories.forEach(combinationCategory => {\n    formattedOptions.push({\n      label: label ? combinationCategory[label] : combinationCategory.category.metadata_value,\n      value: value ? combinationCategory[value] : combinationCategory === null || combinationCategory === void 0 ? void 0 : combinationCategory.id\n    });\n  });\n  return formattedOptions;\n};\nexport const formatGrading = grading => {\n  const formattedGrading = [];\n  grading.forEach(grade => {\n    formattedGrading.push({\n      label: grade.grading_code,\n      value: grade.id\n    });\n  });\n  return formattedGrading;\n};\nexport const removeEmptyOrNullObject = obj => {\n  Object.keys(obj).forEach(k => obj[k] && typeof obj[k] === 'object' && removeEmptyOrNullObject(obj[k]) || !obj[k] && obj[k] !== undefined && delete obj[k]);\n  return obj;\n};\nexport const formatSubjectCombinationCategories = categories => {\n  const formattedCategories = [];\n  categories.forEach(category => {\n    formattedCategories.push({\n      label: category.subject_combination_category,\n      value: category.subject_combination_category_id\n    });\n  });\n  return formattedCategories;\n};\nexport const formatAdmissionSchemes = schemes => {\n  const formattedSchemes = [];\n  schemes.forEach(scheme => {\n    formattedSchemes.push({\n      label: scheme.scheme_name,\n      value: scheme.id\n    });\n  });\n  return formattedSchemes;\n};\nexport const formatAdmissionForms = forms => {\n  const formattedForms = [];\n  forms.forEach(form => {\n    formattedForms.push({\n      label: form.form_name,\n      value: form.id\n    });\n  });\n  return formattedForms;\n};\nexport const getObjectValues = objectValues => {\n  Object.keys(objectValues).forEach(objectKey => {\n    if (!isEmpty(objectValues[objectKey]) && typeof objectValues[objectKey] === 'object') {\n      if (Array.isArray(objectValues[objectKey])) {\n        objectValues[objectKey] = objectValues[objectKey].map(object => {\n          if (typeof object === 'object') {\n            if (Array.isArray(object)) {\n              return getObjectValues(object);\n            }\n\n            return object.value;\n          }\n\n          return object;\n        });\n      } else if (typeof objectValues[objectKey] === 'object') {\n        objectValues[objectKey] = objectValues[objectKey].value;\n      }\n    }\n  });\n  return objectValues;\n};\nexport const formatRoleGroups = roleGroups => {\n  const formattedGroups = [];\n  roleGroups.forEach(group => {\n    formattedGroups.push({\n      label: group.role_group_title,\n      value: group.id\n    });\n  });\n  return formattedGroups;\n};\nexport const formatUserRoles = userRoles => {\n  const formattedRoles = [];\n  userRoles.forEach(role => {\n    formattedRoles.push({\n      label: role.role_title,\n      value: role.id\n    });\n  });\n  return formattedRoles;\n};\nexport const formatSecurityProfile = securityProfiles => {\n  const formattedProfiles = [];\n  securityProfiles.forEach(profile => {\n    formattedProfiles.push({\n      label: profile.security_profile_name,\n      value: profile.id\n    });\n  });\n  return formattedProfiles;\n};\nexport const formatSystemApps = applications => {\n  const formattedApps = [];\n  applications.forEach(app => {\n    formattedApps.push({\n      label: app.app_name,\n      value: app.id\n    });\n  });\n  return formattedApps;\n};\nexport const formatAppFunctions = (allApps, appId) => {\n  const findApp = allApps.filter(app => app.id === appId);\n  const formattedFunctions = [];\n\n  if (findApp) {\n    findApp[0].app_functions.forEach(appFunction => {\n      formattedFunctions.push({\n        label: appFunction.function_name,\n        value: appFunction.id\n      });\n    });\n  }\n\n  return formattedFunctions;\n};\nexport const searchStringInArrayObject = (data, fields, valueToSearch) => {\n  const searchedValue = [];\n\n  if (typeof fields === 'string') {\n    data.forEach(datum => {\n      const search = toUpper(datum[fields]).includes(toUpper(valueToSearch));\n      if (search === true) searchedValue.push(datum);\n    });\n  } else {\n    fields.forEach(field => {\n      data.forEach(datum => {\n        const search = toUpper(datum[field]).includes(toUpper(valueToSearch));\n        if (search === true) searchedValue.push(datum);\n      });\n    });\n  }\n\n  return searchedValue;\n};\nexport const generateFullHeadedBy = (arrayData, concatenatedHeadedBy = 'headed_by') => {\n  const generatedArray = arrayData.filter(singleObject => {\n    // format singleObject head field by joining first and last name\n    singleObject[concatenatedHeadedBy] = singleObject.headedBy ? `${singleObject.headedBy.firstname} ${singleObject.headedBy.lastname}` : '-';\n    return singleObject;\n  });\n  return generatedArray;\n};\nexport const moveKeysFromSubObjects = (arrayOfObjects, desiredKeysObject) => {\n  const formattedArray = arrayOfObjects.map(singleObject => {\n    Object.entries(desiredKeysObject).forEach(entry => {\n      const [key, arrayOfFields] = entry;\n      const pickedObj = pick(singleObject[key], arrayOfFields); // rename keys\n\n      Object.keys(pickedObj).forEach(keyName => {\n        pickedObj[`${key}_${keyName}`] = pickedObj[keyName];\n        delete pickedObj[keyName];\n      }); // spread renamed keys to parent object\n\n      return { ...singleObject,\n        ...pickedObj\n      };\n    });\n    return singleObject;\n  });\n  return formattedArray;\n};\nexport const getDefaultSelectedValue = (selectOptions, value) => {\n  // For case of isMulti Select Fields\n  if (typeof value === 'object' && !isEmpty(value)) {\n    const formattedSelectOptions = [];\n    value.forEach(val => {\n      const findOption = selectOptions.find(option => toString(option.value) === toString(val));\n      if (findOption) formattedSelectOptions.push(findOption);\n    });\n    return formattedSelectOptions;\n  } // For Single Selects\n\n\n  const findOption = selectOptions.find(option => option.value === value);\n  return findOption || '';\n};\nexport const getUnAssignedApps = (allApps, roleGroups) => {\n  const apps = [];\n  roleGroups.forEach(group => apps.push(group.apps.map(app => app.id)));\n  const unassignedApps = allApps.filter(app => flatten(apps).includes(app.id) === false);\n  return unassignedApps;\n};\nexport const formatAcademicYears = academicYears => {\n  const formattedAcademicYears = [];\n  academicYears.forEach(academicYear => {\n    formattedAcademicYears.push({\n      label: academicYear.academicYear.metadata_value,\n      value: academicYear.id\n    });\n  });\n  return orderBy(formattedAcademicYears, ['label'], 'desc');\n};\nexport const formatStudyYears = studyYears => {\n  const formattedStudyYears = [];\n  studyYears.forEach(studyYear => {\n    formattedStudyYears.push({\n      label: studyYear.study_year,\n      value: studyYear.id\n    });\n  });\n  return formattedStudyYears;\n};\nexport const formatFeesWaivers = feesWaivers => {\n  const formattedWaivers = [];\n  feesWaivers.forEach(feesWaiver => {\n    formattedWaivers.push({\n      label: feesWaiver.fees_waiver_name,\n      value: feesWaiver.id\n    });\n  });\n  return formattedWaivers;\n};\nexport const formatProgrammeTypes = programmeTypes => {\n  const formattedType = [];\n\n  if (!isEmpty(programmeTypes)) {\n    programmeTypes.forEach(programmeType => {\n      formattedType.push({\n        label: programmeType.programme_type,\n        value: programmeType.programme_type_id\n      });\n    });\n  }\n\n  return formattedType;\n};\nexport const formatOtherFeesContext = otherFeesContext => {\n  const queryData = {};\n  Object.keys(otherFeesContext).forEach(context => {\n    queryData[context] = otherFeesContext[context].value;\n  });\n  return queryData;\n};\nexport const generalFormatter = (objectsArray, label, value) => {\n  const formattedData = [];\n\n  if (!isEmpty(objectsArray)) {\n    objectsArray.forEach(programmeType => {\n      formattedData.push({\n        label: programmeType[label],\n        value: programmeType[value]\n      });\n    });\n    return formattedData;\n  }\n\n  return [];\n};\nexport const getAcademicYearMetaData = (academicYearObject, metadataName) => {\n  let campusList = [];\n\n  if (!isEmpty(academicYearObject)) {\n    academicYearObject.semesters.forEach(semester => {\n      campusList = [...campusList, ...semester[metadataName]];\n    });\n    return campusList;\n  }\n\n  return [];\n};\nexport const formatNestedPlan = plans => {\n  const formattedPlans = [];\n\n  if (!isEmpty(plans)) {\n    plans.forEach(plan => {\n      formattedPlans.push({\n        label: plan.metadata_value,\n        value: plan.ProgrammeVersionPlan.id\n      });\n    });\n  }\n\n  return formattedPlans;\n};\nexport const hasAcademicUnit = (institutionStructure, unit) => {\n  if (!isEmpty(institutionStructure)) {\n    const academicUnits = institutionStructure === null || institutionStructure === void 0 ? void 0 : institutionStructure.academic_units;\n\n    if (typeof academicUnits === 'object') {\n      const formattedUnits = academicUnits.map(academicUnit => toUpper(academicUnit));\n      return formattedUnits.includes(toUpper(unit));\n    }\n  }\n\n  return false;\n};\nexport const getOptionsValues = input => {\n  const output = [];\n\n  if (!isEmpty(input)) {\n    input.forEach(elem => {\n      output.push(elem.value);\n    });\n  }\n\n  return output;\n};\nexport const toMoney = new Intl.NumberFormat().format;","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/helpers/dataFormatter.js"],"names":["flatten","isEmpty","orderBy","pick","toUpper","formatUserSelectOption","users","usersList","forEach","user","push","label","salutation","firstname","lastname","value","id","formatColleges","colleges","collegesList","college","college_title","formatDepartments","departments","departmentOptions","department","department_code","department_title","formatFaculties","faculties","facultiesList","faculty","faculty_title","formatSubjects","subjects","subjectOptions","subject","subject_code","subject_name","formatMetadata","metadata","fieldName","valueKey","formattedMetadataValues","data","metadata_name","metadataValues","metadata_value","formatSpecialization","specializations","specializationOptions","specialization","specialization_code","specialization_title","formatProgrammes","programmes","valueField","formattedOptions","programme","programme_code","programme_title","formatProgrammeWithCategories","programme_id","formatProgrammeVersions","programmeVersions","version","version_title","formatProgrammeVersionModules","versionModules","versionModule","module","module_id","formatProgrammeVersionModuleOptions","moduleOptions","moduleOption","option","option_id","formatProgrammeVersionPlans","plans","plan","ProgrammeVersionPlan","formatProgrammeVersionSubjectCombinationCategories","combinationCategories","categories","combinationCategory","category","formatGrading","grading","formattedGrading","grade","grading_code","removeEmptyOrNullObject","obj","Object","keys","k","undefined","formatSubjectCombinationCategories","formattedCategories","subject_combination_category","subject_combination_category_id","formatAdmissionSchemes","schemes","formattedSchemes","scheme","scheme_name","formatAdmissionForms","forms","formattedForms","form","form_name","getObjectValues","objectValues","objectKey","Array","isArray","map","object","formatRoleGroups","roleGroups","formattedGroups","group","role_group_title","formatUserRoles","userRoles","formattedRoles","role","role_title","formatSecurityProfile","securityProfiles","formattedProfiles","profile","security_profile_name","formatSystemApps","applications","formattedApps","app","app_name","formatAppFunctions","allApps","appId","findApp","filter","formattedFunctions","app_functions","appFunction","function_name","searchStringInArrayObject","fields","valueToSearch","searchedValue","datum","search","includes","field","generateFullHeadedBy","arrayData","concatenatedHeadedBy","generatedArray","singleObject","headedBy","moveKeysFromSubObjects","arrayOfObjects","desiredKeysObject","formattedArray","entries","entry","key","arrayOfFields","pickedObj","keyName","getDefaultSelectedValue","selectOptions","formattedSelectOptions","val","findOption","find","toString","getUnAssignedApps","apps","unassignedApps","formatAcademicYears","academicYears","formattedAcademicYears","academicYear","formatStudyYears","studyYears","formattedStudyYears","studyYear","study_year","formatFeesWaivers","feesWaivers","formattedWaivers","feesWaiver","fees_waiver_name","formatProgrammeTypes","programmeTypes","formattedType","programmeType","programme_type","programme_type_id","formatOtherFeesContext","otherFeesContext","queryData","context","generalFormatter","objectsArray","formattedData","getAcademicYearMetaData","academicYearObject","metadataName","campusList","semesters","semester","formatNestedPlan","formattedPlans","hasAcademicUnit","institutionStructure","unit","academicUnits","academic_units","formattedUnits","academicUnit","getOptionsValues","input","output","elem","toMoney","Intl","NumberFormat","format"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,EAA2BC,OAA3B,EAAoCC,IAApC,EAA0CC,OAA1C,QAAyD,QAAzD;AAEA,OAAO,MAAMC,sBAAsB,GAAG,CAACC,KAAK,GAAG,EAAT,KAAgB;AACpD,QAAMC,SAAS,GAAG,EAAlB;;AACA,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,IAAAA,KAAK,CAACE,OAAN,CAAeC,IAAD,IAAU;AACtBF,MAAAA,SAAS,CAACG,IAAV,CAAe;AACbC,QAAAA,KAAK,EAAG,GAAEF,IAAI,CAACG,UAAL,GAAkBH,IAAI,CAACG,UAAvB,GAAoC,EAAG,IAAGH,IAAI,CAACI,SAAU,IACjEJ,IAAI,CAACK,QACN,EAHY;AAIbC,QAAAA,KAAK,EAAEN,IAAI,CAACO;AAJC,OAAf;AAMD,KAPD;AAQD;;AACD,SAAOT,SAAP;AACD,CAbM;AAeP,OAAO,MAAMU,cAAc,GAAIC,QAAD,IAAc;AAC1C,QAAMC,YAAY,GAAG,EAArB;AACAD,EAAAA,QAAQ,CAACV,OAAT,CAAkBY,OAAD,IAAa;AAC5BD,IAAAA,YAAY,CAACT,IAAb,CAAkB;AAChBC,MAAAA,KAAK,EAAG,GAAES,OAAO,CAACC,aAAc,EADhB;AAEhBN,MAAAA,KAAK,EAAEK,OAAO,CAACJ;AAFC,KAAlB;AAID,GALD;AAMA,SAAOG,YAAP;AACD,CATM;AAWP,OAAO,MAAMG,iBAAiB,GAAIC,WAAD,IAAiB;AAChD,QAAMC,iBAAiB,GAAG,EAA1B;AACAD,EAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEf,OAAb,CAAsBiB,UAAD,IAAgB;AACnCD,IAAAA,iBAAiB,CAACd,IAAlB,CAAuB;AACrBC,MAAAA,KAAK,EAAG,IAAGc,UAAJ,aAAIA,UAAJ,uBAAIA,UAAU,CAAEC,eAAgB,OAAMD,UAAtC,aAAsCA,UAAtC,uBAAsCA,UAAU,CAAEE,gBAAiB,EADrD;AAErBZ,MAAAA,KAAK,EAAEU,UAAU,CAACT;AAFG,KAAvB;AAID,GALD;AAMA,SAAOQ,iBAAP;AACD,CATM;AAWP,OAAO,MAAMI,eAAe,GAAIC,SAAD,IAAe;AAC5C,QAAMC,aAAa,GAAG,EAAtB;AACAD,EAAAA,SAAS,CAACrB,OAAV,CAAmBuB,OAAD,IAAa;AAC7BD,IAAAA,aAAa,CAACpB,IAAd,CAAmB;AACjBC,MAAAA,KAAK,EAAG,GAAEoB,OAAO,CAACC,aAAc,EADf;AAEjBjB,MAAAA,KAAK,EAAEgB,OAAO,CAACf;AAFE,KAAnB;AAID,GALD;AAMA,SAAOc,aAAP;AACD,CATM;AAWP,OAAO,MAAMG,cAAc,GAAIC,QAAD,IAAc;AAC1C,QAAMC,cAAc,GAAG,EAAvB;AACAD,EAAAA,QAAQ,CAAC1B,OAAT,CAAkB4B,OAAD,IAAa;AAC5BD,IAAAA,cAAc,CAACzB,IAAf,CAAoB;AAClBC,MAAAA,KAAK,EAAG,IAAGyB,OAAO,CAACC,YAAa,OAAMD,OAAO,CAACE,YAAa,EADzC;AAElBvB,MAAAA,KAAK,EAAEqB,OAAO,CAACpB;AAFG,KAApB;AAID,GALD;AAMA,SAAOmB,cAAP;AACD,CATM;AAWP,OAAO,MAAMI,cAAc,GAAG,CAACC,QAAD,EAAWC,SAAX,EAAsBC,QAAQ,GAAG,IAAjC,KAA0C;AACtE,QAAMC,uBAAuB,GAAG,EAAhC;AACAH,EAAAA,QAAQ,CAAChC,OAAT,CAAkBoC,IAAD,IAAU;AACzB,QAAIxC,OAAO,CAACwC,IAAI,CAACC,aAAN,CAAP,KAAgCzC,OAAO,CAACqC,SAAD,CAA3C,EAAwD;AACtDG,MAAAA,IAAI,CAACE,cAAL,CAAoBtC,OAApB,CAA6BO,KAAD,IAAW;AACrC4B,QAAAA,uBAAuB,CAACjC,IAAxB,CAA6B;AAC3BC,UAAAA,KAAK,EAAEI,KAAK,CAACgC,cADc;AAE3BhC,UAAAA,KAAK,EAAE2B,QAAQ,GAAG3B,KAAK,CAAC2B,QAAD,CAAR,GAAqB3B,KAAK,CAACC;AAFf,SAA7B;AAID,OALD;AAMD;AACF,GATD;AAUA,SAAOd,OAAO,CAACyC,uBAAD,EAA0B,CAAC,OAAD,CAA1B,EAAqC,KAArC,CAAd;AACD,CAbM;AAeP,OAAO,MAAMK,oBAAoB,GAAIC,eAAD,IAAqB;AACvD,QAAMC,qBAAqB,GAAG,EAA9B;AACAD,EAAAA,eAAe,CAACzC,OAAhB,CAAyB2C,cAAD,IAAoB;AAC1CD,IAAAA,qBAAqB,CAACxC,IAAtB,CAA2B;AACzBC,MAAAA,KAAK,EAAG,IAAGwC,cAAc,CAACC,mBAAoB,OAAMD,cAAc,CAACE,oBAAqB,EAD/D;AAEzBtC,MAAAA,KAAK,EAAEoC,cAAc,CAACnC;AAFG,KAA3B;AAID,GALD;AAMA,SAAOkC,qBAAP;AACD,CATM;AAWP,OAAO,MAAMI,gBAAgB,GAAG,CAACC,UAAD,EAAaC,UAAU,GAAG,IAA1B,KAAmC;AACjE,QAAMC,gBAAgB,GAAG,EAAzB;AACAF,EAAAA,UAAU,CAAC/C,OAAX,CAAoBkD,SAAD,IAAe;AAChCD,IAAAA,gBAAgB,CAAC/C,IAAjB,CAAsB;AACpBC,MAAAA,KAAK,EAAG,IAAGP,OAAO,CAACsD,SAAS,CAACC,cAAX,CAA2B,OAAMvD,OAAO,CACxDsD,SAAS,CAACE,eAD8C,CAExD,EAHkB;AAIpB7C,MAAAA,KAAK,EAAEyC,UAAU,GAAGE,SAAS,CAACF,UAAD,CAAZ,GAA2BE,SAAS,CAAC1C;AAJlC,KAAtB;AAMD,GAPD;AAQA,SAAOyC,gBAAP;AACD,CAXM;AAaP,OAAO,MAAMI,6BAA6B,GAAIN,UAAD,IAAgB;AAC3D,QAAME,gBAAgB,GAAG,EAAzB;AACAF,EAAAA,UAAU,CAAC/C,OAAX,CAAoBkD,SAAD,IAAe;AAChCD,IAAAA,gBAAgB,CAAC/C,IAAjB,CAAsB;AACpBC,MAAAA,KAAK,EAAG,IAAGP,OAAO,CAACsD,SAAS,CAACC,cAAX,CAA2B,OAAMvD,OAAO,CACxDsD,SAAS,CAACE,eAD8C,CAExD,EAHkB;AAIpB7C,MAAAA,KAAK,EAAE2C,SAAS,CAACI;AAJG,KAAtB;AAMD,GAPD;AAQA,SAAOL,gBAAP;AACD,CAXM;AAaP,OAAO,MAAMM,uBAAuB,GAAIC,iBAAD,IAAuB;AAC5D,QAAMP,gBAAgB,GAAG,EAAzB;AACAO,EAAAA,iBAAiB,CAACxD,OAAlB,CAA2ByD,OAAD,IAAa;AACrCR,IAAAA,gBAAgB,CAAC/C,IAAjB,CAAsB;AACpBC,MAAAA,KAAK,EAAEP,OAAO,CAAC6D,OAAO,CAACC,aAAT,CADM;AAEpBnD,MAAAA,KAAK,EAAEkD,OAAO,CAACjD;AAFK,KAAtB;AAID,GALD;AAMA,SAAOyC,gBAAP;AACD,CATM;AAWP,OAAO,MAAMU,6BAA6B,GAAIC,cAAD,IAAoB;AAC/D,QAAMX,gBAAgB,GAAG,EAAzB;AACAW,EAAAA,cAAc,CAAC5D,OAAf,CAAwB6D,aAAD,IAAmB;AAAA;;AACxCZ,IAAAA,gBAAgB,CAAC/C,IAAjB,CAAsB;AACpBC,MAAAA,KAAK,EAAE0D,aAAF,aAAEA,aAAF,gDAAEA,aAAa,CAAEC,MAAjB,0DAAE,sBAAuBvB,cADV;AAEpBhC,MAAAA,KAAK,EAAEsD,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAEE;AAFF,KAAtB;AAID,GALD;AAMA,SAAOrE,OAAO,CAACuD,gBAAD,EAAmB,CAAC,OAAD,CAAnB,CAAd;AACD,CATM;AAWP,OAAO,MAAMe,mCAAmC,GAAIC,aAAD,IAAmB;AACpE,QAAMhB,gBAAgB,GAAG,EAAzB;AACAgB,EAAAA,aAAa,CAACjE,OAAd,CAAuBkE,YAAD,IAAkB;AAAA;;AACtCjB,IAAAA,gBAAgB,CAAC/C,IAAjB,CAAsB;AACpBC,MAAAA,KAAK,EAAE+D,YAAF,aAAEA,YAAF,+CAAEA,YAAY,CAAEC,MAAhB,yDAAE,qBAAsB5B,cADT;AAEpBhC,MAAAA,KAAK,EAAE2D,YAAF,aAAEA,YAAF,uBAAEA,YAAY,CAAEE;AAFD,KAAtB;AAID,GALD;AAMA,SAAO1E,OAAO,CAACuD,gBAAD,EAAmB,CAAC,OAAD,CAAnB,CAAd;AACD,CATM;AAWP,OAAO,MAAMoB,2BAA2B,GAAIC,KAAD,IAAW;AACpD,QAAMrB,gBAAgB,GAAG,EAAzB;AACAqB,EAAAA,KAAK,CAACtE,OAAN,CAAeuE,IAAD,IAAU;AAAA;;AACtBtB,IAAAA,gBAAgB,CAAC/C,IAAjB,CAAsB;AACpBC,MAAAA,KAAK,EAAEoE,IAAI,CAAChC,cADQ;AAEpBhC,MAAAA,KAAK,EAAEgE,IAAF,aAAEA,IAAF,gDAAEA,IAAI,CAAEC,oBAAR,0DAAE,sBAA4BhE;AAFf,KAAtB;AAID,GALD;AAMA,SAAOyC,gBAAP;AACD,CATM;AAWP,OAAO,MAAMwB,kDAAkD,GAAG,CAChEC,qBADgE,EAEhEnE,KAAK,GAAG,IAFwD,EAGhEJ,KAAK,GAAG,IAHwD,KAI7D;AACH,QAAM8C,gBAAgB,GAAG,EAAzB;AACA,QAAM0B,UAAU,GAAGD,qBAAqB,IAAI,EAA5C;AACAC,EAAAA,UAAU,CAAC3E,OAAX,CAAoB4E,mBAAD,IAAyB;AAC1C3B,IAAAA,gBAAgB,CAAC/C,IAAjB,CAAsB;AACpBC,MAAAA,KAAK,EAAEA,KAAK,GACRyE,mBAAmB,CAACzE,KAAD,CADX,GAERyE,mBAAmB,CAACC,QAApB,CAA6BtC,cAHb;AAIpBhC,MAAAA,KAAK,EAAEA,KAAK,GAAGqE,mBAAmB,CAACrE,KAAD,CAAtB,GAAgCqE,mBAAhC,aAAgCA,mBAAhC,uBAAgCA,mBAAmB,CAAEpE;AAJ7C,KAAtB;AAMD,GAPD;AAQA,SAAOyC,gBAAP;AACD,CAhBM;AAkBP,OAAO,MAAM6B,aAAa,GAAIC,OAAD,IAAa;AACxC,QAAMC,gBAAgB,GAAG,EAAzB;AACAD,EAAAA,OAAO,CAAC/E,OAAR,CAAiBiF,KAAD,IAAW;AACzBD,IAAAA,gBAAgB,CAAC9E,IAAjB,CAAsB;AACpBC,MAAAA,KAAK,EAAE8E,KAAK,CAACC,YADO;AAEpB3E,MAAAA,KAAK,EAAE0E,KAAK,CAACzE;AAFO,KAAtB;AAID,GALD;AAMA,SAAOwE,gBAAP;AACD,CATM;AAWP,OAAO,MAAMG,uBAAuB,GAAIC,GAAD,IAAS;AAC9CC,EAAAA,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBpF,OAAjB,CACGuF,CAAD,IACGH,GAAG,CAACG,CAAD,CAAH,IACC,OAAOH,GAAG,CAACG,CAAD,CAAV,KAAkB,QADnB,IAECJ,uBAAuB,CAACC,GAAG,CAACG,CAAD,CAAJ,CAFzB,IAGC,CAACH,GAAG,CAACG,CAAD,CAAJ,IAAWH,GAAG,CAACG,CAAD,CAAH,KAAWC,SAAtB,IAAmC,OAAOJ,GAAG,CAACG,CAAD,CALlD;AAOA,SAAOH,GAAP;AACD,CATM;AAWP,OAAO,MAAMK,kCAAkC,GAAId,UAAD,IAAgB;AAChE,QAAMe,mBAAmB,GAAG,EAA5B;AACAf,EAAAA,UAAU,CAAC3E,OAAX,CAAoB6E,QAAD,IAAc;AAC/Ba,IAAAA,mBAAmB,CAACxF,IAApB,CAAyB;AACvBC,MAAAA,KAAK,EAAE0E,QAAQ,CAACc,4BADO;AAEvBpF,MAAAA,KAAK,EAAEsE,QAAQ,CAACe;AAFO,KAAzB;AAID,GALD;AAMA,SAAOF,mBAAP;AACD,CATM;AAWP,OAAO,MAAMG,sBAAsB,GAAIC,OAAD,IAAa;AACjD,QAAMC,gBAAgB,GAAG,EAAzB;AACAD,EAAAA,OAAO,CAAC9F,OAAR,CAAiBgG,MAAD,IAAY;AAC1BD,IAAAA,gBAAgB,CAAC7F,IAAjB,CAAsB;AACpBC,MAAAA,KAAK,EAAE6F,MAAM,CAACC,WADM;AAEpB1F,MAAAA,KAAK,EAAEyF,MAAM,CAACxF;AAFM,KAAtB;AAID,GALD;AAMA,SAAOuF,gBAAP;AACD,CATM;AAWP,OAAO,MAAMG,oBAAoB,GAAIC,KAAD,IAAW;AAC7C,QAAMC,cAAc,GAAG,EAAvB;AACAD,EAAAA,KAAK,CAACnG,OAAN,CAAeqG,IAAD,IAAU;AACtBD,IAAAA,cAAc,CAAClG,IAAf,CAAoB;AAClBC,MAAAA,KAAK,EAAEkG,IAAI,CAACC,SADM;AAElB/F,MAAAA,KAAK,EAAE8F,IAAI,CAAC7F;AAFM,KAApB;AAID,GALD;AAMA,SAAO4F,cAAP;AACD,CATM;AAWP,OAAO,MAAMG,eAAe,GAAIC,YAAD,IAAkB;AAC/CnB,EAAAA,MAAM,CAACC,IAAP,CAAYkB,YAAZ,EAA0BxG,OAA1B,CAAmCyG,SAAD,IAAe;AAC/C,QACE,CAAChH,OAAO,CAAC+G,YAAY,CAACC,SAAD,CAAb,CAAR,IACA,OAAOD,YAAY,CAACC,SAAD,CAAnB,KAAmC,QAFrC,EAGE;AACA,UAAIC,KAAK,CAACC,OAAN,CAAcH,YAAY,CAACC,SAAD,CAA1B,CAAJ,EAA4C;AAC1CD,QAAAA,YAAY,CAACC,SAAD,CAAZ,GAA0BD,YAAY,CAACC,SAAD,CAAZ,CAAwBG,GAAxB,CAA6BC,MAAD,IAAY;AAChE,cAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,gBAAIH,KAAK,CAACC,OAAN,CAAcE,MAAd,CAAJ,EAA2B;AACzB,qBAAON,eAAe,CAACM,MAAD,CAAtB;AACD;;AACD,mBAAOA,MAAM,CAACtG,KAAd;AACD;;AACD,iBAAOsG,MAAP;AACD,SARyB,CAA1B;AASD,OAVD,MAUO,IAAI,OAAOL,YAAY,CAACC,SAAD,CAAnB,KAAmC,QAAvC,EAAiD;AACtDD,QAAAA,YAAY,CAACC,SAAD,CAAZ,GAA0BD,YAAY,CAACC,SAAD,CAAZ,CAAwBlG,KAAlD;AACD;AACF;AACF,GAnBD;AAoBA,SAAOiG,YAAP;AACD,CAtBM;AAwBP,OAAO,MAAMM,gBAAgB,GAAIC,UAAD,IAAgB;AAC9C,QAAMC,eAAe,GAAG,EAAxB;AACAD,EAAAA,UAAU,CAAC/G,OAAX,CAAoBiH,KAAD,IAAW;AAC5BD,IAAAA,eAAe,CAAC9G,IAAhB,CAAqB;AACnBC,MAAAA,KAAK,EAAE8G,KAAK,CAACC,gBADM;AAEnB3G,MAAAA,KAAK,EAAE0G,KAAK,CAACzG;AAFM,KAArB;AAID,GALD;AAMA,SAAOwG,eAAP;AACD,CATM;AAWP,OAAO,MAAMG,eAAe,GAAIC,SAAD,IAAe;AAC5C,QAAMC,cAAc,GAAG,EAAvB;AACAD,EAAAA,SAAS,CAACpH,OAAV,CAAmBsH,IAAD,IAAU;AAC1BD,IAAAA,cAAc,CAACnH,IAAf,CAAoB;AAClBC,MAAAA,KAAK,EAAEmH,IAAI,CAACC,UADM;AAElBhH,MAAAA,KAAK,EAAE+G,IAAI,CAAC9G;AAFM,KAApB;AAID,GALD;AAMA,SAAO6G,cAAP;AACD,CATM;AAWP,OAAO,MAAMG,qBAAqB,GAAIC,gBAAD,IAAsB;AACzD,QAAMC,iBAAiB,GAAG,EAA1B;AACAD,EAAAA,gBAAgB,CAACzH,OAAjB,CAA0B2H,OAAD,IAAa;AACpCD,IAAAA,iBAAiB,CAACxH,IAAlB,CAAuB;AACrBC,MAAAA,KAAK,EAAEwH,OAAO,CAACC,qBADM;AAErBrH,MAAAA,KAAK,EAAEoH,OAAO,CAACnH;AAFM,KAAvB;AAID,GALD;AAMA,SAAOkH,iBAAP;AACD,CATM;AAWP,OAAO,MAAMG,gBAAgB,GAAIC,YAAD,IAAkB;AAChD,QAAMC,aAAa,GAAG,EAAtB;AACAD,EAAAA,YAAY,CAAC9H,OAAb,CAAsBgI,GAAD,IAAS;AAC5BD,IAAAA,aAAa,CAAC7H,IAAd,CAAmB;AACjBC,MAAAA,KAAK,EAAE6H,GAAG,CAACC,QADM;AAEjB1H,MAAAA,KAAK,EAAEyH,GAAG,CAACxH;AAFM,KAAnB;AAID,GALD;AAMA,SAAOuH,aAAP;AACD,CATM;AAWP,OAAO,MAAMG,kBAAkB,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AACpD,QAAMC,OAAO,GAAGF,OAAO,CAACG,MAAR,CAAgBN,GAAD,IAASA,GAAG,CAACxH,EAAJ,KAAW4H,KAAnC,CAAhB;AACA,QAAMG,kBAAkB,GAAG,EAA3B;;AACA,MAAIF,OAAJ,EAAa;AACXA,IAAAA,OAAO,CAAC,CAAD,CAAP,CAAWG,aAAX,CAAyBxI,OAAzB,CAAkCyI,WAAD,IAAiB;AAChDF,MAAAA,kBAAkB,CAACrI,IAAnB,CAAwB;AACtBC,QAAAA,KAAK,EAAEsI,WAAW,CAACC,aADG;AAEtBnI,QAAAA,KAAK,EAAEkI,WAAW,CAACjI;AAFG,OAAxB;AAID,KALD;AAMD;;AACD,SAAO+H,kBAAP;AACD,CAZM;AAcP,OAAO,MAAMI,yBAAyB,GAAG,CAACvG,IAAD,EAAOwG,MAAP,EAAeC,aAAf,KAAiC;AACxE,QAAMC,aAAa,GAAG,EAAtB;;AACA,MAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;AAC9BxG,IAAAA,IAAI,CAACpC,OAAL,CAAc+I,KAAD,IAAW;AACtB,YAAMC,MAAM,GAAGpJ,OAAO,CAACmJ,KAAK,CAACH,MAAD,CAAN,CAAP,CAAuBK,QAAvB,CAAgCrJ,OAAO,CAACiJ,aAAD,CAAvC,CAAf;AACA,UAAIG,MAAM,KAAK,IAAf,EAAqBF,aAAa,CAAC5I,IAAd,CAAmB6I,KAAnB;AACtB,KAHD;AAID,GALD,MAKO;AACLH,IAAAA,MAAM,CAAC5I,OAAP,CAAgBkJ,KAAD,IAAW;AACxB9G,MAAAA,IAAI,CAACpC,OAAL,CAAc+I,KAAD,IAAW;AACtB,cAAMC,MAAM,GAAGpJ,OAAO,CAACmJ,KAAK,CAACG,KAAD,CAAN,CAAP,CAAsBD,QAAtB,CAA+BrJ,OAAO,CAACiJ,aAAD,CAAtC,CAAf;AACA,YAAIG,MAAM,KAAK,IAAf,EAAqBF,aAAa,CAAC5I,IAAd,CAAmB6I,KAAnB;AACtB,OAHD;AAID,KALD;AAMD;;AACD,SAAOD,aAAP;AACD,CAhBM;AAkBP,OAAO,MAAMK,oBAAoB,GAAG,CAClCC,SADkC,EAElCC,oBAAoB,GAAG,WAFW,KAG/B;AACH,QAAMC,cAAc,GAAGF,SAAS,CAACd,MAAV,CAAkBiB,YAAD,IAAkB;AACxD;AACAA,IAAAA,YAAY,CAACF,oBAAD,CAAZ,GAAqCE,YAAY,CAACC,QAAb,GAChC,GAAED,YAAY,CAACC,QAAb,CAAsBnJ,SAAU,IAAGkJ,YAAY,CAACC,QAAb,CAAsBlJ,QAAS,EADpC,GAEjC,GAFJ;AAGA,WAAOiJ,YAAP;AACD,GANsB,CAAvB;AAOA,SAAOD,cAAP;AACD,CAZM;AAcP,OAAO,MAAMG,sBAAsB,GAAG,CAACC,cAAD,EAAiBC,iBAAjB,KAAuC;AAC3E,QAAMC,cAAc,GAAGF,cAAc,CAAC9C,GAAf,CAAoB2C,YAAD,IAAkB;AAC1DlE,IAAAA,MAAM,CAACwE,OAAP,CAAeF,iBAAf,EAAkC3J,OAAlC,CAA2C8J,KAAD,IAAW;AACnD,YAAM,CAACC,GAAD,EAAMC,aAAN,IAAuBF,KAA7B;AACA,YAAMG,SAAS,GAAGtK,IAAI,CAAC4J,YAAY,CAACQ,GAAD,CAAb,EAAoBC,aAApB,CAAtB,CAFmD,CAGnD;;AACA3E,MAAAA,MAAM,CAACC,IAAP,CAAY2E,SAAZ,EAAuBjK,OAAvB,CAAgCkK,OAAD,IAAa;AAC1CD,QAAAA,SAAS,CAAE,GAAEF,GAAI,IAAGG,OAAQ,EAAnB,CAAT,GAAiCD,SAAS,CAACC,OAAD,CAA1C;AACA,eAAOD,SAAS,CAACC,OAAD,CAAhB;AACD,OAHD,EAJmD,CAQnD;;AACA,aAAO,EACL,GAAGX,YADE;AAEL,WAAGU;AAFE,OAAP;AAID,KAbD;AAcA,WAAOV,YAAP;AACD,GAhBsB,CAAvB;AAiBA,SAAOK,cAAP;AACD,CAnBM;AAqBP,OAAO,MAAMO,uBAAuB,GAAG,CAACC,aAAD,EAAgB7J,KAAhB,KAA0B;AAC/D;AACA,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACd,OAAO,CAACc,KAAD,CAAzC,EAAkD;AAChD,UAAM8J,sBAAsB,GAAG,EAA/B;AACA9J,IAAAA,KAAK,CAACP,OAAN,CAAesK,GAAD,IAAS;AACrB,YAAMC,UAAU,GAAGH,aAAa,CAACI,IAAd,CAChBrG,MAAD,IAAYsG,QAAQ,CAACtG,MAAM,CAAC5D,KAAR,CAAR,KAA2BkK,QAAQ,CAACH,GAAD,CAD9B,CAAnB;AAGA,UAAIC,UAAJ,EAAgBF,sBAAsB,CAACnK,IAAvB,CAA4BqK,UAA5B;AACjB,KALD;AAMA,WAAOF,sBAAP;AACD,GAX8D,CAa/D;;;AACA,QAAME,UAAU,GAAGH,aAAa,CAACI,IAAd,CAAoBrG,MAAD,IAAYA,MAAM,CAAC5D,KAAP,KAAiBA,KAAhD,CAAnB;AACA,SAAOgK,UAAU,IAAI,EAArB;AACD,CAhBM;AAkBP,OAAO,MAAMG,iBAAiB,GAAG,CAACvC,OAAD,EAAUpB,UAAV,KAAyB;AACxD,QAAM4D,IAAI,GAAG,EAAb;AACA5D,EAAAA,UAAU,CAAC/G,OAAX,CAAoBiH,KAAD,IAAW0D,IAAI,CAACzK,IAAL,CAAU+G,KAAK,CAAC0D,IAAN,CAAW/D,GAAX,CAAgBoB,GAAD,IAASA,GAAG,CAACxH,EAA5B,CAAV,CAA9B;AACA,QAAMoK,cAAc,GAAGzC,OAAO,CAACG,MAAR,CACpBN,GAAD,IAASxI,OAAO,CAACmL,IAAD,CAAP,CAAc1B,QAAd,CAAuBjB,GAAG,CAACxH,EAA3B,MAAmC,KADvB,CAAvB;AAGA,SAAOoK,cAAP;AACD,CAPM;AASP,OAAO,MAAMC,mBAAmB,GAAIC,aAAD,IAAmB;AACpD,QAAMC,sBAAsB,GAAG,EAA/B;AACAD,EAAAA,aAAa,CAAC9K,OAAd,CAAuBgL,YAAD,IAAkB;AACtCD,IAAAA,sBAAsB,CAAC7K,IAAvB,CAA4B;AAC1BC,MAAAA,KAAK,EAAE6K,YAAY,CAACA,YAAb,CAA0BzI,cADP;AAE1BhC,MAAAA,KAAK,EAAEyK,YAAY,CAACxK;AAFM,KAA5B;AAID,GALD;AAMA,SAAOd,OAAO,CAACqL,sBAAD,EAAyB,CAAC,OAAD,CAAzB,EAAoC,MAApC,CAAd;AACD,CATM;AAWP,OAAO,MAAME,gBAAgB,GAAIC,UAAD,IAAgB;AAC9C,QAAMC,mBAAmB,GAAG,EAA5B;AACAD,EAAAA,UAAU,CAAClL,OAAX,CAAoBoL,SAAD,IAAe;AAChCD,IAAAA,mBAAmB,CAACjL,IAApB,CAAyB;AACvBC,MAAAA,KAAK,EAAEiL,SAAS,CAACC,UADM;AAEvB9K,MAAAA,KAAK,EAAE6K,SAAS,CAAC5K;AAFM,KAAzB;AAID,GALD;AAMA,SAAO2K,mBAAP;AACD,CATM;AAWP,OAAO,MAAMG,iBAAiB,GAAIC,WAAD,IAAiB;AAChD,QAAMC,gBAAgB,GAAG,EAAzB;AACAD,EAAAA,WAAW,CAACvL,OAAZ,CAAqByL,UAAD,IAAgB;AAClCD,IAAAA,gBAAgB,CAACtL,IAAjB,CAAsB;AACpBC,MAAAA,KAAK,EAAEsL,UAAU,CAACC,gBADE;AAEpBnL,MAAAA,KAAK,EAAEkL,UAAU,CAACjL;AAFE,KAAtB;AAID,GALD;AAMA,SAAOgL,gBAAP;AACD,CATM;AAWP,OAAO,MAAMG,oBAAoB,GAAIC,cAAD,IAAoB;AACtD,QAAMC,aAAa,GAAG,EAAtB;;AAEA,MAAI,CAACpM,OAAO,CAACmM,cAAD,CAAZ,EAA8B;AAC5BA,IAAAA,cAAc,CAAC5L,OAAf,CAAwB8L,aAAD,IAAmB;AACxCD,MAAAA,aAAa,CAAC3L,IAAd,CAAmB;AACjBC,QAAAA,KAAK,EAAE2L,aAAa,CAACC,cADJ;AAEjBxL,QAAAA,KAAK,EAAEuL,aAAa,CAACE;AAFJ,OAAnB;AAID,KALD;AAMD;;AACD,SAAOH,aAAP;AACD,CAZM;AAcP,OAAO,MAAMI,sBAAsB,GAAIC,gBAAD,IAAsB;AAC1D,QAAMC,SAAS,GAAG,EAAlB;AACA9G,EAAAA,MAAM,CAACC,IAAP,CAAY4G,gBAAZ,EAA8BlM,OAA9B,CAAuCoM,OAAD,IAAa;AACjDD,IAAAA,SAAS,CAACC,OAAD,CAAT,GAAqBF,gBAAgB,CAACE,OAAD,CAAhB,CAA0B7L,KAA/C;AACD,GAFD;AAGA,SAAO4L,SAAP;AACD,CANM;AAQP,OAAO,MAAME,gBAAgB,GAAG,CAACC,YAAD,EAAenM,KAAf,EAAsBI,KAAtB,KAAgC;AAC9D,QAAMgM,aAAa,GAAG,EAAtB;;AACA,MAAI,CAAC9M,OAAO,CAAC6M,YAAD,CAAZ,EAA4B;AAC1BA,IAAAA,YAAY,CAACtM,OAAb,CAAsB8L,aAAD,IAAmB;AACtCS,MAAAA,aAAa,CAACrM,IAAd,CAAmB;AACjBC,QAAAA,KAAK,EAAE2L,aAAa,CAAC3L,KAAD,CADH;AAEjBI,QAAAA,KAAK,EAAEuL,aAAa,CAACvL,KAAD;AAFH,OAAnB;AAID,KALD;AAMA,WAAOgM,aAAP;AACD;;AACD,SAAO,EAAP;AACD,CAZM;AAcP,OAAO,MAAMC,uBAAuB,GAAG,CAACC,kBAAD,EAAqBC,YAArB,KAAsC;AAC3E,MAAIC,UAAU,GAAG,EAAjB;;AACA,MAAI,CAAClN,OAAO,CAACgN,kBAAD,CAAZ,EAAkC;AAChCA,IAAAA,kBAAkB,CAACG,SAAnB,CAA6B5M,OAA7B,CAAsC6M,QAAD,IAAc;AACjDF,MAAAA,UAAU,GAAG,CAAC,GAAGA,UAAJ,EAAgB,GAAGE,QAAQ,CAACH,YAAD,CAA3B,CAAb;AACD,KAFD;AAGA,WAAOC,UAAP;AACD;;AACD,SAAO,EAAP;AACD,CATM;AAWP,OAAO,MAAMG,gBAAgB,GAAIxI,KAAD,IAAW;AACzC,QAAMyI,cAAc,GAAG,EAAvB;;AACA,MAAI,CAACtN,OAAO,CAAC6E,KAAD,CAAZ,EAAqB;AACnBA,IAAAA,KAAK,CAACtE,OAAN,CAAeuE,IAAD,IAAU;AACtBwI,MAAAA,cAAc,CAAC7M,IAAf,CAAoB;AAClBC,QAAAA,KAAK,EAAEoE,IAAI,CAAChC,cADM;AAElBhC,QAAAA,KAAK,EAAEgE,IAAI,CAACC,oBAAL,CAA0BhE;AAFf,OAApB;AAID,KALD;AAMD;;AACD,SAAOuM,cAAP;AACD,CAXM;AAaP,OAAO,MAAMC,eAAe,GAAG,CAACC,oBAAD,EAAuBC,IAAvB,KAAgC;AAC7D,MAAI,CAACzN,OAAO,CAACwN,oBAAD,CAAZ,EAAoC;AAClC,UAAME,aAAa,GAAGF,oBAAH,aAAGA,oBAAH,uBAAGA,oBAAoB,CAAEG,cAA5C;;AACA,QAAI,OAAOD,aAAP,KAAyB,QAA7B,EAAuC;AACrC,YAAME,cAAc,GAAGF,aAAa,CAACvG,GAAd,CAAmB0G,YAAD,IACvC1N,OAAO,CAAC0N,YAAD,CADc,CAAvB;AAGA,aAAOD,cAAc,CAACpE,QAAf,CAAwBrJ,OAAO,CAACsN,IAAD,CAA/B,CAAP;AACD;AACF;;AACD,SAAO,KAAP;AACD,CAXM;AAaP,OAAO,MAAMK,gBAAgB,GAAIC,KAAD,IAAW;AACzC,QAAMC,MAAM,GAAG,EAAf;;AACA,MAAI,CAAChO,OAAO,CAAC+N,KAAD,CAAZ,EAAqB;AACnBA,IAAAA,KAAK,CAACxN,OAAN,CAAe0N,IAAD,IAAU;AACtBD,MAAAA,MAAM,CAACvN,IAAP,CAAYwN,IAAI,CAACnN,KAAjB;AACD,KAFD;AAGD;;AACD,SAAOkN,MAAP;AACD,CARM;AAUP,OAAO,MAAME,OAAO,GAAG,IAAIC,IAAI,CAACC,YAAT,GAAwBC,MAAxC","sourcesContent":["import { flatten, isEmpty, orderBy, pick, toUpper } from 'lodash';\n\nexport const formatUserSelectOption = (users = []) => {\n  const usersList = [];\n  if (typeof users === 'object') {\n    users.forEach((user) => {\n      usersList.push({\n        label: `${user.salutation ? user.salutation : ''} ${user.firstname} ${\n          user.lastname\n        }`,\n        value: user.id,\n      });\n    });\n  }\n  return usersList;\n};\n\nexport const formatColleges = (colleges) => {\n  const collegesList = [];\n  colleges.forEach((college) => {\n    collegesList.push({\n      label: `${college.college_title}`,\n      value: college.id,\n    });\n  });\n  return collegesList;\n};\n\nexport const formatDepartments = (departments) => {\n  const departmentOptions = [];\n  departments?.forEach((department) => {\n    departmentOptions.push({\n      label: `(${department?.department_code}) - ${department?.department_title}`,\n      value: department.id,\n    });\n  });\n  return departmentOptions;\n};\n\nexport const formatFaculties = (faculties) => {\n  const facultiesList = [];\n  faculties.forEach((faculty) => {\n    facultiesList.push({\n      label: `${faculty.faculty_title}`,\n      value: faculty.id,\n    });\n  });\n  return facultiesList;\n};\n\nexport const formatSubjects = (subjects) => {\n  const subjectOptions = [];\n  subjects.forEach((subject) => {\n    subjectOptions.push({\n      label: `(${subject.subject_code}) - ${subject.subject_name}`,\n      value: subject.id,\n    });\n  });\n  return subjectOptions;\n};\n\nexport const formatMetadata = (metadata, fieldName, valueKey = null) => {\n  const formattedMetadataValues = [];\n  metadata.forEach((data) => {\n    if (toUpper(data.metadata_name) === toUpper(fieldName)) {\n      data.metadataValues.forEach((value) => {\n        formattedMetadataValues.push({\n          label: value.metadata_value,\n          value: valueKey ? value[valueKey] : value.id,\n        });\n      });\n    }\n  });\n  return orderBy(formattedMetadataValues, ['label'], 'asc');\n};\n\nexport const formatSpecialization = (specializations) => {\n  const specializationOptions = [];\n  specializations.forEach((specialization) => {\n    specializationOptions.push({\n      label: `(${specialization.specialization_code}) - ${specialization.specialization_title}`,\n      value: specialization.id,\n    });\n  });\n  return specializationOptions;\n};\n\nexport const formatProgrammes = (programmes, valueField = null) => {\n  const formattedOptions = [];\n  programmes.forEach((programme) => {\n    formattedOptions.push({\n      label: `(${toUpper(programme.programme_code)}) - ${toUpper(\n        programme.programme_title\n      )}`,\n      value: valueField ? programme[valueField] : programme.id,\n    });\n  });\n  return formattedOptions;\n};\n\nexport const formatProgrammeWithCategories = (programmes) => {\n  const formattedOptions = [];\n  programmes.forEach((programme) => {\n    formattedOptions.push({\n      label: `(${toUpper(programme.programme_code)}) - ${toUpper(\n        programme.programme_title\n      )}`,\n      value: programme.programme_id,\n    });\n  });\n  return formattedOptions;\n};\n\nexport const formatProgrammeVersions = (programmeVersions) => {\n  const formattedOptions = [];\n  programmeVersions.forEach((version) => {\n    formattedOptions.push({\n      label: toUpper(version.version_title),\n      value: version.id,\n    });\n  });\n  return formattedOptions;\n};\n\nexport const formatProgrammeVersionModules = (versionModules) => {\n  const formattedOptions = [];\n  versionModules.forEach((versionModule) => {\n    formattedOptions.push({\n      label: versionModule?.module?.metadata_value,\n      value: versionModule?.module_id,\n    });\n  });\n  return orderBy(formattedOptions, ['label']);\n};\n\nexport const formatProgrammeVersionModuleOptions = (moduleOptions) => {\n  const formattedOptions = [];\n  moduleOptions.forEach((moduleOption) => {\n    formattedOptions.push({\n      label: moduleOption?.option?.metadata_value,\n      value: moduleOption?.option_id,\n    });\n  });\n  return orderBy(formattedOptions, ['label']);\n};\n\nexport const formatProgrammeVersionPlans = (plans) => {\n  const formattedOptions = [];\n  plans.forEach((plan) => {\n    formattedOptions.push({\n      label: plan.metadata_value,\n      value: plan?.ProgrammeVersionPlan?.id,\n    });\n  });\n  return formattedOptions;\n};\n\nexport const formatProgrammeVersionSubjectCombinationCategories = (\n  combinationCategories,\n  value = null,\n  label = null\n) => {\n  const formattedOptions = [];\n  const categories = combinationCategories || [];\n  categories.forEach((combinationCategory) => {\n    formattedOptions.push({\n      label: label\n        ? combinationCategory[label]\n        : combinationCategory.category.metadata_value,\n      value: value ? combinationCategory[value] : combinationCategory?.id,\n    });\n  });\n  return formattedOptions;\n};\n\nexport const formatGrading = (grading) => {\n  const formattedGrading = [];\n  grading.forEach((grade) => {\n    formattedGrading.push({\n      label: grade.grading_code,\n      value: grade.id,\n    });\n  });\n  return formattedGrading;\n};\n\nexport const removeEmptyOrNullObject = (obj) => {\n  Object.keys(obj).forEach(\n    (k) =>\n      (obj[k] &&\n        typeof obj[k] === 'object' &&\n        removeEmptyOrNullObject(obj[k])) ||\n      (!obj[k] && obj[k] !== undefined && delete obj[k])\n  );\n  return obj;\n};\n\nexport const formatSubjectCombinationCategories = (categories) => {\n  const formattedCategories = [];\n  categories.forEach((category) => {\n    formattedCategories.push({\n      label: category.subject_combination_category,\n      value: category.subject_combination_category_id,\n    });\n  });\n  return formattedCategories;\n};\n\nexport const formatAdmissionSchemes = (schemes) => {\n  const formattedSchemes = [];\n  schemes.forEach((scheme) => {\n    formattedSchemes.push({\n      label: scheme.scheme_name,\n      value: scheme.id,\n    });\n  });\n  return formattedSchemes;\n};\n\nexport const formatAdmissionForms = (forms) => {\n  const formattedForms = [];\n  forms.forEach((form) => {\n    formattedForms.push({\n      label: form.form_name,\n      value: form.id,\n    });\n  });\n  return formattedForms;\n};\n\nexport const getObjectValues = (objectValues) => {\n  Object.keys(objectValues).forEach((objectKey) => {\n    if (\n      !isEmpty(objectValues[objectKey]) &&\n      typeof objectValues[objectKey] === 'object'\n    ) {\n      if (Array.isArray(objectValues[objectKey])) {\n        objectValues[objectKey] = objectValues[objectKey].map((object) => {\n          if (typeof object === 'object') {\n            if (Array.isArray(object)) {\n              return getObjectValues(object);\n            }\n            return object.value;\n          }\n          return object;\n        });\n      } else if (typeof objectValues[objectKey] === 'object') {\n        objectValues[objectKey] = objectValues[objectKey].value;\n      }\n    }\n  });\n  return objectValues;\n};\n\nexport const formatRoleGroups = (roleGroups) => {\n  const formattedGroups = [];\n  roleGroups.forEach((group) => {\n    formattedGroups.push({\n      label: group.role_group_title,\n      value: group.id,\n    });\n  });\n  return formattedGroups;\n};\n\nexport const formatUserRoles = (userRoles) => {\n  const formattedRoles = [];\n  userRoles.forEach((role) => {\n    formattedRoles.push({\n      label: role.role_title,\n      value: role.id,\n    });\n  });\n  return formattedRoles;\n};\n\nexport const formatSecurityProfile = (securityProfiles) => {\n  const formattedProfiles = [];\n  securityProfiles.forEach((profile) => {\n    formattedProfiles.push({\n      label: profile.security_profile_name,\n      value: profile.id,\n    });\n  });\n  return formattedProfiles;\n};\n\nexport const formatSystemApps = (applications) => {\n  const formattedApps = [];\n  applications.forEach((app) => {\n    formattedApps.push({\n      label: app.app_name,\n      value: app.id,\n    });\n  });\n  return formattedApps;\n};\n\nexport const formatAppFunctions = (allApps, appId) => {\n  const findApp = allApps.filter((app) => app.id === appId);\n  const formattedFunctions = [];\n  if (findApp) {\n    findApp[0].app_functions.forEach((appFunction) => {\n      formattedFunctions.push({\n        label: appFunction.function_name,\n        value: appFunction.id,\n      });\n    });\n  }\n  return formattedFunctions;\n};\n\nexport const searchStringInArrayObject = (data, fields, valueToSearch) => {\n  const searchedValue = [];\n  if (typeof fields === 'string') {\n    data.forEach((datum) => {\n      const search = toUpper(datum[fields]).includes(toUpper(valueToSearch));\n      if (search === true) searchedValue.push(datum);\n    });\n  } else {\n    fields.forEach((field) => {\n      data.forEach((datum) => {\n        const search = toUpper(datum[field]).includes(toUpper(valueToSearch));\n        if (search === true) searchedValue.push(datum);\n      });\n    });\n  }\n  return searchedValue;\n};\n\nexport const generateFullHeadedBy = (\n  arrayData,\n  concatenatedHeadedBy = 'headed_by'\n) => {\n  const generatedArray = arrayData.filter((singleObject) => {\n    // format singleObject head field by joining first and last name\n    singleObject[concatenatedHeadedBy] = singleObject.headedBy\n      ? `${singleObject.headedBy.firstname} ${singleObject.headedBy.lastname}`\n      : '-';\n    return singleObject;\n  });\n  return generatedArray;\n};\n\nexport const moveKeysFromSubObjects = (arrayOfObjects, desiredKeysObject) => {\n  const formattedArray = arrayOfObjects.map((singleObject) => {\n    Object.entries(desiredKeysObject).forEach((entry) => {\n      const [key, arrayOfFields] = entry;\n      const pickedObj = pick(singleObject[key], arrayOfFields);\n      // rename keys\n      Object.keys(pickedObj).forEach((keyName) => {\n        pickedObj[`${key}_${keyName}`] = pickedObj[keyName];\n        delete pickedObj[keyName];\n      });\n      // spread renamed keys to parent object\n      return {\n        ...singleObject,\n        ...pickedObj,\n      };\n    });\n    return singleObject;\n  });\n  return formattedArray;\n};\n\nexport const getDefaultSelectedValue = (selectOptions, value) => {\n  // For case of isMulti Select Fields\n  if (typeof value === 'object' && !isEmpty(value)) {\n    const formattedSelectOptions = [];\n    value.forEach((val) => {\n      const findOption = selectOptions.find(\n        (option) => toString(option.value) === toString(val)\n      );\n      if (findOption) formattedSelectOptions.push(findOption);\n    });\n    return formattedSelectOptions;\n  }\n\n  // For Single Selects\n  const findOption = selectOptions.find((option) => option.value === value);\n  return findOption || '';\n};\n\nexport const getUnAssignedApps = (allApps, roleGroups) => {\n  const apps = [];\n  roleGroups.forEach((group) => apps.push(group.apps.map((app) => app.id)));\n  const unassignedApps = allApps.filter(\n    (app) => flatten(apps).includes(app.id) === false\n  );\n  return unassignedApps;\n};\n\nexport const formatAcademicYears = (academicYears) => {\n  const formattedAcademicYears = [];\n  academicYears.forEach((academicYear) => {\n    formattedAcademicYears.push({\n      label: academicYear.academicYear.metadata_value,\n      value: academicYear.id,\n    });\n  });\n  return orderBy(formattedAcademicYears, ['label'], 'desc');\n};\n\nexport const formatStudyYears = (studyYears) => {\n  const formattedStudyYears = [];\n  studyYears.forEach((studyYear) => {\n    formattedStudyYears.push({\n      label: studyYear.study_year,\n      value: studyYear.id,\n    });\n  });\n  return formattedStudyYears;\n};\n\nexport const formatFeesWaivers = (feesWaivers) => {\n  const formattedWaivers = [];\n  feesWaivers.forEach((feesWaiver) => {\n    formattedWaivers.push({\n      label: feesWaiver.fees_waiver_name,\n      value: feesWaiver.id,\n    });\n  });\n  return formattedWaivers;\n};\n\nexport const formatProgrammeTypes = (programmeTypes) => {\n  const formattedType = [];\n\n  if (!isEmpty(programmeTypes)) {\n    programmeTypes.forEach((programmeType) => {\n      formattedType.push({\n        label: programmeType.programme_type,\n        value: programmeType.programme_type_id,\n      });\n    });\n  }\n  return formattedType;\n};\n\nexport const formatOtherFeesContext = (otherFeesContext) => {\n  const queryData = {};\n  Object.keys(otherFeesContext).forEach((context) => {\n    queryData[context] = otherFeesContext[context].value;\n  });\n  return queryData;\n};\n\nexport const generalFormatter = (objectsArray, label, value) => {\n  const formattedData = [];\n  if (!isEmpty(objectsArray)) {\n    objectsArray.forEach((programmeType) => {\n      formattedData.push({\n        label: programmeType[label],\n        value: programmeType[value],\n      });\n    });\n    return formattedData;\n  }\n  return [];\n};\n\nexport const getAcademicYearMetaData = (academicYearObject, metadataName) => {\n  let campusList = [];\n  if (!isEmpty(academicYearObject)) {\n    academicYearObject.semesters.forEach((semester) => {\n      campusList = [...campusList, ...semester[metadataName]];\n    });\n    return campusList;\n  }\n  return [];\n};\n\nexport const formatNestedPlan = (plans) => {\n  const formattedPlans = [];\n  if (!isEmpty(plans)) {\n    plans.forEach((plan) => {\n      formattedPlans.push({\n        label: plan.metadata_value,\n        value: plan.ProgrammeVersionPlan.id,\n      });\n    });\n  }\n  return formattedPlans;\n};\n\nexport const hasAcademicUnit = (institutionStructure, unit) => {\n  if (!isEmpty(institutionStructure)) {\n    const academicUnits = institutionStructure?.academic_units;\n    if (typeof academicUnits === 'object') {\n      const formattedUnits = academicUnits.map((academicUnit) =>\n        toUpper(academicUnit)\n      );\n      return formattedUnits.includes(toUpper(unit));\n    }\n  }\n  return false;\n};\n\nexport const getOptionsValues = (input) => {\n  const output = [];\n  if (!isEmpty(input)) {\n    input.forEach((elem) => {\n      output.push(elem.value);\n    });\n  }\n  return output;\n};\n\nexport const toMoney = new Intl.NumberFormat().format;\n"]},"metadata":{},"sourceType":"module"}