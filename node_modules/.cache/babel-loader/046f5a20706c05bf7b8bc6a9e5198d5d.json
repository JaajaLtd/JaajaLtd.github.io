{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis-front/src/containers/EnrollmentHistory/GeneratePaymentReference.jsx\",\n    _s = $RefreshSig$();\n\nimport { isEmpty, sum, sumBy } from 'lodash';\nimport PropTypes, { object } from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { Accordion, Card, Col, Form, Row } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SubmitButton } from '../../components/common';\nimport { paymentReferenceActions } from '../../config/actions';\nimport ReferenceModal from '../PaymentReferences/ReferenceModal';\nimport InvoiceCard from './InvoiceCard'; // import { paymentBanks, paymentModes } from '../PaymentReferences/helper';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GeneratePaymentReference = ({\n  enrollment\n}) => {\n  _s();\n\n  var _enrollment$functiona, _enrollment$functiona2, _enrollment$functiona3, _enrollment$tuitionIn;\n\n  const dispatch = useDispatch();\n  const {\n    register,\n    errors,\n    handleSubmit,\n    watch\n  } = useForm({\n    defaultValues: {\n      tuition_amount: parseInt(enrollment === null || enrollment === void 0 ? void 0 : (_enrollment$functiona = enrollment.functionalInvoice) === null || _enrollment$functiona === void 0 ? void 0 : _enrollment$functiona.invoice_amount, 10),\n      functional_amount: parseInt(enrollment === null || enrollment === void 0 ? void 0 : (_enrollment$functiona2 = enrollment.functionalInvoice) === null || _enrollment$functiona2 === void 0 ? void 0 : _enrollment$functiona2.invoice_amount, 10),\n      other_fees_amount: sumBy(enrollment === null || enrollment === void 0 ? void 0 : enrollment.otherFeesInvoice, 'invoice_amount')\n    }\n  });\n  const [activeKey, setActiveKey] = useState(1);\n  const {\n    generatingPaymentReference\n  } = useSelector(state => state.paymentReference);\n  const watchValues = watch(); // const paymentMode = watch('payment_mode', null);\n\n  const totalAmount = parseInt(enrollment === null || enrollment === void 0 ? void 0 : (_enrollment$functiona3 = enrollment.functionalInvoice) === null || _enrollment$functiona3 === void 0 ? void 0 : _enrollment$functiona3.invoice_amount, 10) + parseInt(enrollment === null || enrollment === void 0 ? void 0 : (_enrollment$tuitionIn = enrollment.tuitionInvoice) === null || _enrollment$tuitionIn === void 0 ? void 0 : _enrollment$tuitionIn.invoice_amount, 10) + sumBy(enrollment === null || enrollment === void 0 ? void 0 : enrollment.otherFeesInvoice, 'invoice_amount');\n  const [newTotalAmount, setNewTotalAmount] = useState(totalAmount);\n  useEffect(() => {\n    if (!isEmpty(watchValues)) {\n      let newTotal = 0;\n\n      if (watchValues.tuition_fees_amount) {\n        newTotal += parseInt(watchValues.tuition_fees_amount, 10);\n      }\n\n      if (watchValues.functional_fees_amount) {\n        newTotal += parseInt(watchValues.functional_fees_amount, 10);\n      }\n\n      if (watchValues.other_fees_amount) {\n        newTotal += parseInt(sum(watchValues.other_fees_amount), 10);\n      }\n\n      if (newTotal !== newTotalAmount) setNewTotalAmount(newTotal);\n    }\n  }, [watchValues]);\n\n  const handleFormSubmit = data => {\n    if (!isEmpty(data)) {\n      let payload = data;\n\n      if (data.tuition_fees_amount) {\n        payload = { ...payload,\n          tuition_invoices: [{\n            tuition_invoice_id: enrollment.tuitionInvoice.id,\n            amount: parseInt(data.tuition_fees_amount, 10)\n          }]\n        };\n        delete payload.tuition_fees_amount;\n      }\n\n      if (data.functional_fees_amount) {\n        payload = { ...payload,\n          functional_fees_invoices: [{\n            functional_fees_invoice_id: enrollment.functionalInvoice.id,\n            amount: parseInt(data.functional_fees_amount, 10)\n          }]\n        };\n        delete payload.functional_fees_amount;\n      }\n\n      if (data.other_fees_amount) {\n        payload = { ...payload,\n          other_fees_invoices: [{\n            functional_fees_invoice_id: enrollment.otherFeesInvoice.id,\n            amount: parseInt(data.other_fees_amount, 10)\n          }]\n        };\n        delete payload.other_fees_amount;\n      }\n\n      dispatch(paymentReferenceActions.generatePaymentReference(payload, 'bulk'));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit(handleFormSubmit),\n      children: [/*#__PURE__*/_jsxDEV(Accordion, {\n        defaultActiveKey: \"1\",\n        activeKey: activeKey,\n        children: [!isEmpty(enrollment.tuitionInvoice) && /*#__PURE__*/_jsxDEV(InvoiceCard, {\n          invoiceTitle: \"Tuition Fees Invoice\",\n          invoiceCardId: 1,\n          invoiceType: \"tuition_fees_amount\",\n          activeKey: activeKey,\n          register: register,\n          errors: errors,\n          setActiveKey: setActiveKey,\n          invoice: enrollment.tuitionInvoice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), !isEmpty(enrollment.tuitionInvoice) && /*#__PURE__*/_jsxDEV(InvoiceCard, {\n          invoiceTitle: \"Functional Fees Invoice\",\n          invoiceCardId: 2,\n          invoiceType: \"functional_fees_amount\",\n          register: register,\n          errors: errors,\n          activeKey: activeKey,\n          setActiveKey: setActiveKey,\n          invoice: enrollment.functionalInvoice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this), !isEmpty(enrollment.otherFeesInvoice) && /*#__PURE__*/_jsxDEV(InvoiceCard, {\n          invoiceTitle: \"Other Fees Invoice\",\n          invoiceCardId: 3,\n          invoiceType: \"other_fees_amount\",\n          register: register,\n          errors: errors,\n          activeKey: activeKey,\n          setActiveKey: setActiveKey,\n          invoice: enrollment.otherFeesInvoice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), parseInt(newTotalAmount, 10) > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n          className: \"rounded-0 border-0 text-sm py-1 mb-2 bg-dark text-white\",\n          children: [\"TOTAL AMOUNT TO PAY\", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-options text-white\",\n            children: `${newTotalAmount.toLocaleString()} UGX`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            md: 12,\n            className: \"text-right\",\n            children: /*#__PURE__*/_jsxDEV(SubmitButton, {\n              text: \"GENERATE REFERENCE NO.\",\n              size: \"sm\",\n              loading: generatingPaymentReference,\n              loadingText: \"Generating...\",\n              variant: \"info\",\n              className: \"text-sm mt-2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReferenceModal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GeneratePaymentReference, \"VE/PGn+kUjT5QEaaqBRTJqNN7gc=\", false, function () {\n  return [useDispatch, useForm, useSelector];\n});\n\n_c = GeneratePaymentReference;\nGeneratePaymentReference.defaultProps = {\n  enrollment: {}\n};\nGeneratePaymentReference.propTypes = {\n  enrollment: PropTypes.oneOfType([object])\n};\nexport default GeneratePaymentReference;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeneratePaymentReference\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis-front/src/containers/EnrollmentHistory/GeneratePaymentReference.jsx"],"names":["isEmpty","sum","sumBy","PropTypes","object","React","useEffect","useState","Accordion","Card","Col","Form","Row","useForm","useDispatch","useSelector","SubmitButton","paymentReferenceActions","ReferenceModal","InvoiceCard","GeneratePaymentReference","enrollment","dispatch","register","errors","handleSubmit","watch","defaultValues","tuition_amount","parseInt","functionalInvoice","invoice_amount","functional_amount","other_fees_amount","otherFeesInvoice","activeKey","setActiveKey","generatingPaymentReference","state","paymentReference","watchValues","totalAmount","tuitionInvoice","newTotalAmount","setNewTotalAmount","newTotal","tuition_fees_amount","functional_fees_amount","handleFormSubmit","data","payload","tuition_invoices","tuition_invoice_id","id","amount","functional_fees_invoices","functional_fees_invoice_id","other_fees_invoices","generatePaymentReference","toLocaleString","defaultProps","propTypes","oneOfType"],"mappings":"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","sourcesContent":["import { isEmpty, sum, sumBy } from 'lodash';\nimport PropTypes, { object } from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { Accordion, Card, Col, Form, Row } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SubmitButton } from '../../components/common';\nimport { paymentReferenceActions } from '../../config/actions';\nimport ReferenceModal from '../PaymentReferences/ReferenceModal';\nimport InvoiceCard from './InvoiceCard';\n// import { paymentBanks, paymentModes } from '../PaymentReferences/helper';\n\nconst GeneratePaymentReference = ({ enrollment }) => {\n  const dispatch = useDispatch();\n  const { register, errors, handleSubmit, watch } = useForm({\n    defaultValues: {\n      tuition_amount: parseInt(\n        enrollment?.functionalInvoice?.invoice_amount,\n        10\n      ),\n      functional_amount: parseInt(\n        enrollment?.functionalInvoice?.invoice_amount,\n        10\n      ),\n      other_fees_amount: sumBy(enrollment?.otherFeesInvoice, 'invoice_amount'),\n    },\n  });\n  const [activeKey, setActiveKey] = useState(1);\n  const { generatingPaymentReference } = useSelector(\n    (state) => state.paymentReference\n  );\n\n  const watchValues = watch();\n  // const paymentMode = watch('payment_mode', null);\n\n  const totalAmount =\n    parseInt(enrollment?.functionalInvoice?.invoice_amount, 10) +\n    parseInt(enrollment?.tuitionInvoice?.invoice_amount, 10) +\n    sumBy(enrollment?.otherFeesInvoice, 'invoice_amount');\n\n  const [newTotalAmount, setNewTotalAmount] = useState(totalAmount);\n\n  useEffect(() => {\n    if (!isEmpty(watchValues)) {\n      let newTotal = 0;\n      if (watchValues.tuition_fees_amount) {\n        newTotal += parseInt(watchValues.tuition_fees_amount, 10);\n      }\n\n      if (watchValues.functional_fees_amount) {\n        newTotal += parseInt(watchValues.functional_fees_amount, 10);\n      }\n\n      if (watchValues.other_fees_amount) {\n        newTotal += parseInt(sum(watchValues.other_fees_amount), 10);\n      }\n      if (newTotal !== newTotalAmount) setNewTotalAmount(newTotal);\n    }\n  }, [watchValues]);\n\n  const handleFormSubmit = (data) => {\n    if (!isEmpty(data)) {\n      let payload = data;\n      if (data.tuition_fees_amount) {\n        payload = {\n          ...payload,\n          tuition_invoices: [\n            {\n              tuition_invoice_id: enrollment.tuitionInvoice.id,\n              amount: parseInt(data.tuition_fees_amount, 10),\n            },\n          ],\n        };\n        delete payload.tuition_fees_amount;\n      }\n      if (data.functional_fees_amount) {\n        payload = {\n          ...payload,\n          functional_fees_invoices: [\n            {\n              functional_fees_invoice_id: enrollment.functionalInvoice.id,\n              amount: parseInt(data.functional_fees_amount, 10),\n            },\n          ],\n        };\n        delete payload.functional_fees_amount;\n      }\n      if (data.other_fees_amount) {\n        payload = {\n          ...payload,\n          other_fees_invoices: [\n            {\n              functional_fees_invoice_id: enrollment.otherFeesInvoice.id,\n              amount: parseInt(data.other_fees_amount, 10),\n            },\n          ],\n        };\n        delete payload.other_fees_amount;\n      }\n      dispatch(\n        paymentReferenceActions.generatePaymentReference(payload, 'bulk')\n      );\n    }\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit(handleFormSubmit)}>\n        <Accordion defaultActiveKey=\"1\" activeKey={activeKey}>\n          {!isEmpty(enrollment.tuitionInvoice) && (\n            <InvoiceCard\n              invoiceTitle=\"Tuition Fees Invoice\"\n              invoiceCardId={1}\n              invoiceType=\"tuition_fees_amount\"\n              activeKey={activeKey}\n              register={register}\n              errors={errors}\n              setActiveKey={setActiveKey}\n              invoice={enrollment.tuitionInvoice}\n            />\n          )}\n          {!isEmpty(enrollment.tuitionInvoice) && (\n            <InvoiceCard\n              invoiceTitle=\"Functional Fees Invoice\"\n              invoiceCardId={2}\n              invoiceType=\"functional_fees_amount\"\n              register={register}\n              errors={errors}\n              activeKey={activeKey}\n              setActiveKey={setActiveKey}\n              invoice={enrollment.functionalInvoice}\n            />\n          )}\n          {!isEmpty(enrollment.otherFeesInvoice) && (\n            <InvoiceCard\n              invoiceTitle=\"Other Fees Invoice\"\n              invoiceCardId={3}\n              invoiceType=\"other_fees_amount\"\n              register={register}\n              errors={errors}\n              activeKey={activeKey}\n              setActiveKey={setActiveKey}\n              invoice={enrollment.otherFeesInvoice}\n            />\n          )}\n        </Accordion>\n        {parseInt(newTotalAmount, 10) > 0 && (\n          <>\n            <Card.Header className=\"rounded-0 border-0 text-sm py-1 mb-2 bg-dark text-white\">\n              TOTAL AMOUNT TO PAY\n              <div className=\"card-options text-white\">{`${newTotalAmount.toLocaleString()} UGX`}</div>\n            </Card.Header>\n\n            {/* TODO: To be activated  when Different Payments Modes are allowed\n            <SelectInput\n              selectOptions={paymentModes}\n              name=\"payment_mode\"\n              label=\"PAYMENT MODE\"\n              register={register({\n                required: 'Payment Mode is Required',\n              })}\n              inline\n              error={get(errors, 'payment_mode.message')}\n              requiredField\n            />\n            {!includes(['MOBPMT', 'ONLINE'], paymentMode) && (\n              <SelectInput\n                selectOptions={paymentBanks}\n                name=\"payment_bank_code\"\n                label=\"PAYMENT BANK\"\n                inline\n                register={register({\n                  required: 'Payment Bank is Required',\n                })}\n                error={get(errors, 'payment_bank_code.message')}\n              />\n            )} */}\n\n            <Row>\n              <Col md={12} className=\"text-right\">\n                <SubmitButton\n                  text=\"GENERATE REFERENCE NO.\"\n                  size=\"sm\"\n                  loading={generatingPaymentReference}\n                  loadingText=\"Generating...\"\n                  variant=\"info\"\n                  className=\"text-sm mt-2\"\n                />\n              </Col>\n            </Row>\n          </>\n        )}\n      </Form>\n\n      <ReferenceModal />\n    </>\n  );\n};\n\nGeneratePaymentReference.defaultProps = {\n  enrollment: {},\n};\n\nGeneratePaymentReference.propTypes = {\n  enrollment: PropTypes.oneOfType([object]),\n};\n\nexport default GeneratePaymentReference;\n"]},"metadata":{},"sourceType":"module"}