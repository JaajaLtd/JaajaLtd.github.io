{"ast":null,"code":"import _slicedToArray from\"/Users/admin/Documents/react-projects/hesmis/hesmis-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{get,isEmpty}from'lodash';import React,{useEffect,useState}from'react';import{Card,Form}from'react-bootstrap';import{useForm}from'react-hook-form';import{useDispatch,useSelector}from'react-redux';import{AlertMessage,InputText,SubmitButton}from'../../components/common';import{authActions}from'../../config/actions';import RoutePaths from'../../config/routes/RoutePaths';import usePrevious from'../Hooks/usePrevious';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ResetForm=function ResetForm(_ref){var setCurrentPage=_ref.setCurrentPage;var dispatch=useDispatch();var _useForm=useForm(),register=_useForm.register,handleSubmit=_useForm.handleSubmit,errors=_useForm.errors;var _useSelector=useSelector(function(state){return state.auth;}),requestingToken=_useSelector.requestingToken,resettingPassword=_useSelector.resettingPassword;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),resetSuccess=_useState2[0],setResetSuccess=_useState2[1];var _useSelector2=useSelector(function(state){return state.auth;}),resetPasswordError=_useSelector2.resetPasswordError,requestTokenError=_useSelector2.requestTokenError,resetPasswordSuccess=_useSelector2.resetPasswordSuccess,requestTokenSuccess=_useSelector2.requestTokenSuccess;var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),errorMessage=_useState4[0],setErrorMessage=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),successMessage=_useState6[0],setSuccessMessage=_useState6[1];var previousState=usePrevious({requestTokenError:requestTokenError,requestTokenSuccess:requestTokenSuccess,resetPasswordError:resetPasswordError,resetPasswordSuccess:resetPasswordSuccess});useEffect(function(){setErrorMessage(null);setSuccessMessage(null);if(!isEmpty(previousState)){if(!isEmpty(requestTokenError)&&previousState.requestTokenError!==requestTokenError){var _requestTokenError$se;setErrorMessage((requestTokenError===null||requestTokenError===void 0?void 0:requestTokenError.error)||(requestTokenError===null||requestTokenError===void 0?void 0:(_requestTokenError$se=requestTokenError.server)===null||_requestTokenError$se===void 0?void 0:_requestTokenError$se.message));}if(previousState.requestTokenSuccess!==requestTokenSuccess&&(requestTokenSuccess===null||requestTokenSuccess===void 0?void 0:requestTokenSuccess.server)){var _requestTokenSuccess$;setSuccessMessage(requestTokenSuccess===null||requestTokenSuccess===void 0?void 0:(_requestTokenSuccess$=requestTokenSuccess.server)===null||_requestTokenSuccess$===void 0?void 0:_requestTokenSuccess$.message);setResetSuccess(true);}}},[requestTokenError,requestTokenSuccess]);useEffect(function(){if(!isEmpty(previousState)){if(!isEmpty(resetPasswordError)&&previousState.resetPasswordError!==resetPasswordError){setErrorMessage((resetPasswordError===null||resetPasswordError===void 0?void 0:resetPasswordError.error)||resetPasswordError.server.message);}if(previousState.resetPasswordSuccess!==resetPasswordSuccess&&(resetPasswordSuccess===null||resetPasswordSuccess===void 0?void 0:resetPasswordSuccess.server)){setCurrentPage(RoutePaths.login.path);}}},[resetPasswordError,resetPasswordSuccess]);var onSubmit=function onSubmit(data){setErrorMessage(null);if(!isEmpty(data)&&resetSuccess){dispatch(authActions.resetPassword(data));}else{dispatch(authActions.requestToken(data));}};return/*#__PURE__*/_jsxs(Card,{className:\"bg-white rounded \",children:[/*#__PURE__*/_jsx(Card.Header,{className:\"py-3 border-0 rounded-top\",children:/*#__PURE__*/_jsx(\"div\",{className:\"w-100 text-center text-info font600\",children:\"RESET PASSWORD\"})}),/*#__PURE__*/_jsxs(Card.Body,{className:\"pt-2\",children:[(errorMessage||successMessage)&&/*#__PURE__*/_jsx(AlertMessage,{type:errorMessage?'danger':'success',message:errorMessage||successMessage}),/*#__PURE__*/_jsxs(Form,{onSubmit:handleSubmit(onSubmit),children:[/*#__PURE__*/_jsx(InputText,{name:\"username\",label:\"STUDENT NO.\",readOnly:resetSuccess,register:register({required:'STUDENT NO. required'}),error:get(errors,'username.message')}),resetSuccess&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(InputText,{name:\"otp_code\",label:\"Reset Token\",register:register({required:'Reset Token required'}),error:get(errors,'otp_code.message')}),/*#__PURE__*/_jsx(InputText,{name:\"new_password\",label:\"New Password\",type:\"password\",register:register({required:'Reset Token required',minLength:{value:6,message:'Minimum password length should 6 characters'},maxLength:{value:16,message:'Maximum password length should 16 characters'}}),error:get(errors,'reset_token.message')}),/*#__PURE__*/_jsx(InputText,{name:\"confirm_password\",label:\"Confirm New Password\",type:\"password\",register:register({required:'Reset Token required',minLength:{value:6,message:'Minimum password length should 6 characters'},maxLength:{value:16,message:'Maximum password length should 16 characters'}}),error:get(errors,'confirm_password.message')})]}),/*#__PURE__*/_jsx(SubmitButton,{className:\"text-uppercase text-white text-sm mt-3 w-100 mb-2 font600\",loading:requestingToken||resettingPassword,loadingText:resetSuccess?'Resetting Password...':'Requesting...',text:resetSuccess?'Reset Password':'Request Token'})]})]})]});};export default ResetForm;","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Auth/ResetForm.jsx"],"names":["get","isEmpty","React","useEffect","useState","Card","Form","useForm","useDispatch","useSelector","AlertMessage","InputText","SubmitButton","authActions","RoutePaths","usePrevious","ResetForm","setCurrentPage","dispatch","register","handleSubmit","errors","state","auth","requestingToken","resettingPassword","resetSuccess","setResetSuccess","resetPasswordError","requestTokenError","resetPasswordSuccess","requestTokenSuccess","errorMessage","setErrorMessage","successMessage","setSuccessMessage","previousState","error","server","message","login","path","onSubmit","data","resetPassword","requestToken","required","minLength","value","maxLength"],"mappings":"gLAAA,OAASA,GAAT,CAAcC,OAAd,KAA6B,QAA7B,CAEA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,IAAT,CAAeC,IAAf,KAA2B,iBAA3B,CACA,OAASC,OAAT,KAAwB,iBAAxB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,YAAT,CAAuBC,SAAvB,CAAkCC,YAAlC,KAAsD,yBAAtD,CACA,OAASC,WAAT,KAA4B,sBAA5B,CACA,MAAOC,CAAAA,UAAP,KAAuB,gCAAvB,CACA,MAAOC,CAAAA,WAAP,KAAwB,sBAAxB,C,6IAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAAwB,IAArBC,CAAAA,cAAqB,MAArBA,cAAqB,CACxC,GAAMC,CAAAA,QAAQ,CAAGV,WAAW,EAA5B,CACA,aAA2CD,OAAO,EAAlD,CAAQY,QAAR,UAAQA,QAAR,CAAkBC,YAAlB,UAAkBA,YAAlB,CAAgCC,MAAhC,UAAgCA,MAAhC,CACA,iBAA+CZ,WAAW,CACxD,SAACa,KAAD,QAAWA,CAAAA,KAAK,CAACC,IAAjB,EADwD,CAA1D,CAAQC,eAAR,cAAQA,eAAR,CAAyBC,iBAAzB,cAAyBA,iBAAzB,CAGA,cAAwCrB,QAAQ,CAAC,KAAD,CAAhD,wCAAOsB,YAAP,eAAqBC,eAArB,eACA,kBAKIlB,WAAW,CAAC,SAACa,KAAD,QAAWA,CAAAA,KAAK,CAACC,IAAjB,EAAD,CALf,CACEK,kBADF,eACEA,kBADF,CAEEC,iBAFF,eAEEA,iBAFF,CAGEC,oBAHF,eAGEA,oBAHF,CAIEC,mBAJF,eAIEA,mBAJF,CAMA,eAAwC3B,QAAQ,CAAC,IAAD,CAAhD,yCAAO4B,YAAP,eAAqBC,eAArB,eACA,eAA4C7B,QAAQ,CAAC,IAAD,CAApD,yCAAO8B,cAAP,eAAuBC,iBAAvB,eACA,GAAMC,CAAAA,aAAa,CAAGrB,WAAW,CAAC,CAChCc,iBAAiB,CAAjBA,iBADgC,CAEhCE,mBAAmB,CAAnBA,mBAFgC,CAGhCH,kBAAkB,CAAlBA,kBAHgC,CAIhCE,oBAAoB,CAApBA,oBAJgC,CAAD,CAAjC,CAOA3B,SAAS,CAAC,UAAM,CACd8B,eAAe,CAAC,IAAD,CAAf,CACAE,iBAAiB,CAAC,IAAD,CAAjB,CACA,GAAI,CAAClC,OAAO,CAACmC,aAAD,CAAZ,CAA6B,CAC3B,GACE,CAACnC,OAAO,CAAC4B,iBAAD,CAAR,EACAO,aAAa,CAACP,iBAAd,GAAoCA,iBAFtC,CAGE,2BACAI,eAAe,CACb,CAAAJ,iBAAiB,OAAjB,EAAAA,iBAAiB,SAAjB,QAAAA,iBAAiB,CAAEQ,KAAnB,IAA4BR,iBAA5B,SAA4BA,iBAA5B,wCAA4BA,iBAAiB,CAAES,MAA/C,gDAA4B,sBAA2BC,OAAvD,CADa,CAAf,CAGD,CACD,GACEH,aAAa,CAACL,mBAAd,GAAsCA,mBAAtC,GACAA,mBADA,SACAA,mBADA,iBACAA,mBAAmB,CAAEO,MADrB,CADF,CAGE,2BACAH,iBAAiB,CAACJ,mBAAD,SAACA,mBAAD,wCAACA,mBAAmB,CAAEO,MAAtB,gDAAC,sBAA6BC,OAA9B,CAAjB,CACAZ,eAAe,CAAC,IAAD,CAAf,CACD,CACF,CACF,CApBQ,CAoBN,CAACE,iBAAD,CAAoBE,mBAApB,CApBM,CAAT,CAsBA5B,SAAS,CAAC,UAAM,CACd,GAAI,CAACF,OAAO,CAACmC,aAAD,CAAZ,CAA6B,CAC3B,GACE,CAACnC,OAAO,CAAC2B,kBAAD,CAAR,EACAQ,aAAa,CAACR,kBAAd,GAAqCA,kBAFvC,CAGE,CACAK,eAAe,CACb,CAAAL,kBAAkB,OAAlB,EAAAA,kBAAkB,SAAlB,QAAAA,kBAAkB,CAAES,KAApB,GAA6BT,kBAAkB,CAACU,MAAnB,CAA0BC,OAD1C,CAAf,CAGD,CACD,GACEH,aAAa,CAACN,oBAAd,GAAuCA,oBAAvC,GACAA,oBADA,SACAA,oBADA,iBACAA,oBAAoB,CAAEQ,MADtB,CADF,CAGE,CACArB,cAAc,CAACH,UAAU,CAAC0B,KAAX,CAAiBC,IAAlB,CAAd,CACD,CACF,CACF,CAjBQ,CAiBN,CAACb,kBAAD,CAAqBE,oBAArB,CAjBM,CAAT,CAmBA,GAAMY,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,IAAD,CAAU,CACzBV,eAAe,CAAC,IAAD,CAAf,CACA,GAAI,CAAChC,OAAO,CAAC0C,IAAD,CAAR,EAAkBjB,YAAtB,CAAoC,CAClCR,QAAQ,CAACL,WAAW,CAAC+B,aAAZ,CAA0BD,IAA1B,CAAD,CAAR,CACD,CAFD,IAEO,CACLzB,QAAQ,CAACL,WAAW,CAACgC,YAAZ,CAAyBF,IAAzB,CAAD,CAAR,CACD,CACF,CAPD,CASA,mBACE,MAAC,IAAD,EAAM,SAAS,CAAC,mBAAhB,wBACE,KAAC,IAAD,CAAM,MAAN,EAAa,SAAS,CAAC,2BAAvB,uBACE,YAAK,SAAS,CAAC,qCAAf,4BADF,EADF,cAME,MAAC,IAAD,CAAM,IAAN,EAAW,SAAS,CAAC,MAArB,WACG,CAACX,YAAY,EAAIE,cAAjB,gBACC,KAAC,YAAD,EACE,IAAI,CAAEF,YAAY,CAAG,QAAH,CAAc,SADlC,CAEE,OAAO,CAAEA,YAAY,EAAIE,cAF3B,EAFJ,cAOE,MAAC,IAAD,EAAM,QAAQ,CAAEd,YAAY,CAACsB,QAAD,CAA5B,wBACE,KAAC,SAAD,EACE,IAAI,CAAC,UADP,CAEE,KAAK,CAAC,aAFR,CAGE,QAAQ,CAAEhB,YAHZ,CAIE,QAAQ,CAAEP,QAAQ,CAAC,CACjB2B,QAAQ,CAAE,sBADO,CAAD,CAJpB,CAOE,KAAK,CAAE9C,GAAG,CAACqB,MAAD,CAAS,kBAAT,CAPZ,EADF,CAWGK,YAAY,eACX,wCACE,KAAC,SAAD,EACE,IAAI,CAAC,UADP,CAEE,KAAK,CAAC,aAFR,CAGE,QAAQ,CAAEP,QAAQ,CAAC,CACjB2B,QAAQ,CAAE,sBADO,CAAD,CAHpB,CAME,KAAK,CAAE9C,GAAG,CAACqB,MAAD,CAAS,kBAAT,CANZ,EADF,cAUE,KAAC,SAAD,EACE,IAAI,CAAC,cADP,CAEE,KAAK,CAAC,cAFR,CAGE,IAAI,CAAC,UAHP,CAIE,QAAQ,CAAEF,QAAQ,CAAC,CACjB2B,QAAQ,CAAE,sBADO,CAEjBC,SAAS,CAAE,CACTC,KAAK,CAAE,CADE,CAETT,OAAO,CAAE,6CAFA,CAFM,CAMjBU,SAAS,CAAE,CACTD,KAAK,CAAE,EADE,CAETT,OAAO,CAAE,8CAFA,CANM,CAAD,CAJpB,CAeE,KAAK,CAAEvC,GAAG,CAACqB,MAAD,CAAS,qBAAT,CAfZ,EAVF,cA4BE,KAAC,SAAD,EACE,IAAI,CAAC,kBADP,CAEE,KAAK,CAAC,sBAFR,CAGE,IAAI,CAAC,UAHP,CAIE,QAAQ,CAAEF,QAAQ,CAAC,CACjB2B,QAAQ,CAAE,sBADO,CAEjBC,SAAS,CAAE,CACTC,KAAK,CAAE,CADE,CAETT,OAAO,CAAE,6CAFA,CAFM,CAMjBU,SAAS,CAAE,CACTD,KAAK,CAAE,EADE,CAETT,OAAO,CAAE,8CAFA,CANM,CAAD,CAJpB,CAeE,KAAK,CAAEvC,GAAG,CAACqB,MAAD,CAAS,0BAAT,CAfZ,EA5BF,GAZJ,cA4DE,KAAC,YAAD,EACE,SAAS,CAAC,2DADZ,CAEE,OAAO,CAAEG,eAAe,EAAIC,iBAF9B,CAGE,WAAW,CACTC,YAAY,CAAG,uBAAH,CAA6B,eAJ7C,CAME,IAAI,CAAEA,YAAY,CAAG,gBAAH,CAAsB,eAN1C,EA5DF,GAPF,GANF,GADF,CAsFD,CA9JD,CAoKA,cAAeV,CAAAA,SAAf","sourcesContent":["import { get, isEmpty } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { Card, Form } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, InputText, SubmitButton } from '../../components/common';\nimport { authActions } from '../../config/actions';\nimport RoutePaths from '../../config/routes/RoutePaths';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst ResetForm = ({ setCurrentPage }) => {\n  const dispatch = useDispatch();\n  const { register, handleSubmit, errors } = useForm();\n  const { requestingToken, resettingPassword } = useSelector(\n    (state) => state.auth\n  );\n  const [resetSuccess, setResetSuccess] = useState(false);\n  const {\n    resetPasswordError,\n    requestTokenError,\n    resetPasswordSuccess,\n    requestTokenSuccess,\n  } = useSelector((state) => state.auth);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const previousState = usePrevious({\n    requestTokenError,\n    requestTokenSuccess,\n    resetPasswordError,\n    resetPasswordSuccess,\n  });\n\n  useEffect(() => {\n    setErrorMessage(null);\n    setSuccessMessage(null);\n    if (!isEmpty(previousState)) {\n      if (\n        !isEmpty(requestTokenError) &&\n        previousState.requestTokenError !== requestTokenError\n      ) {\n        setErrorMessage(\n          requestTokenError?.error || requestTokenError?.server?.message\n        );\n      }\n      if (\n        previousState.requestTokenSuccess !== requestTokenSuccess &&\n        requestTokenSuccess?.server\n      ) {\n        setSuccessMessage(requestTokenSuccess?.server?.message);\n        setResetSuccess(true);\n      }\n    }\n  }, [requestTokenError, requestTokenSuccess]);\n\n  useEffect(() => {\n    if (!isEmpty(previousState)) {\n      if (\n        !isEmpty(resetPasswordError) &&\n        previousState.resetPasswordError !== resetPasswordError\n      ) {\n        setErrorMessage(\n          resetPasswordError?.error || resetPasswordError.server.message\n        );\n      }\n      if (\n        previousState.resetPasswordSuccess !== resetPasswordSuccess &&\n        resetPasswordSuccess?.server\n      ) {\n        setCurrentPage(RoutePaths.login.path);\n      }\n    }\n  }, [resetPasswordError, resetPasswordSuccess]);\n\n  const onSubmit = (data) => {\n    setErrorMessage(null);\n    if (!isEmpty(data) && resetSuccess) {\n      dispatch(authActions.resetPassword(data));\n    } else {\n      dispatch(authActions.requestToken(data));\n    }\n  };\n\n  return (\n    <Card className=\"bg-white rounded \">\n      <Card.Header className=\"py-3 border-0 rounded-top\">\n        <div className=\"w-100 text-center text-info font600\">\n          RESET PASSWORD\n        </div>\n      </Card.Header>\n      <Card.Body className=\"pt-2\">\n        {(errorMessage || successMessage) && (\n          <AlertMessage\n            type={errorMessage ? 'danger' : 'success'}\n            message={errorMessage || successMessage}\n          />\n        )}\n        <Form onSubmit={handleSubmit(onSubmit)}>\n          <InputText\n            name=\"username\"\n            label=\"STUDENT NO.\"\n            readOnly={resetSuccess}\n            register={register({\n              required: 'STUDENT NO. required',\n            })}\n            error={get(errors, 'username.message')}\n          />\n\n          {resetSuccess && (\n            <>\n              <InputText\n                name=\"otp_code\"\n                label=\"Reset Token\"\n                register={register({\n                  required: 'Reset Token required',\n                })}\n                error={get(errors, 'otp_code.message')}\n              />\n\n              <InputText\n                name=\"new_password\"\n                label=\"New Password\"\n                type=\"password\"\n                register={register({\n                  required: 'Reset Token required',\n                  minLength: {\n                    value: 6,\n                    message: 'Minimum password length should 6 characters',\n                  },\n                  maxLength: {\n                    value: 16,\n                    message: 'Maximum password length should 16 characters',\n                  },\n                })}\n                error={get(errors, 'reset_token.message')}\n              />\n\n              <InputText\n                name=\"confirm_password\"\n                label=\"Confirm New Password\"\n                type=\"password\"\n                register={register({\n                  required: 'Reset Token required',\n                  minLength: {\n                    value: 6,\n                    message: 'Minimum password length should 6 characters',\n                  },\n                  maxLength: {\n                    value: 16,\n                    message: 'Maximum password length should 16 characters',\n                  },\n                })}\n                error={get(errors, 'confirm_password.message')}\n              />\n            </>\n          )}\n\n          <SubmitButton\n            className=\"text-uppercase text-white text-sm mt-3 w-100 mb-2 font600\"\n            loading={requestingToken || resettingPassword}\n            loadingText={\n              resetSuccess ? 'Resetting Password...' : 'Requesting...'\n            }\n            text={resetSuccess ? 'Reset Password' : 'Request Token'}\n          />\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n\nResetForm.propTypes = {\n  setCurrentPage: PropTypes.func.isRequired,\n};\n\nexport default ResetForm;\n"]},"metadata":{},"sourceType":"module"}