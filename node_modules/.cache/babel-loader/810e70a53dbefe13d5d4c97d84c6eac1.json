{"ast":null,"code":"import { takeLatest, fork, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { authActions, paymentActions, paymentReferenceActions } from '../../actions';\n\nfunction* getPaymentReferences(actions) {\n  try {\n    const response = yield axios({\n      url: '/student-portal/payment-references/history',\n      method: 'GET',\n      params: actions.data\n    });\n    yield put({\n      type: paymentReferenceActions.GETTING_PAYMENT_REFERENCES_SUCCESS,\n      data: response.paymentReferences\n    });\n    yield put({\n      type: authActions.GET_AUTH_USER_ACCOUNT_BALANCE_REQUEST\n    });\n    yield put({\n      type: paymentActions.GET_MY_TRANSACTIONS_REQUEST\n    });\n  } catch (error) {\n    yield put({\n      type: paymentReferenceActions.GETTING_PAYMENT_REFERENCES_ERROR,\n      error: error.data\n    });\n  }\n}\n\nfunction* generatePaymentReference(actions) {\n  let url = '/student-portal/payment-references';\n  if (actions.referenceType === 'bulk') url = '/student-portal/payment-references/select-unpaid-invoices';else if (actions.referenceType === 'future') url = '/student-portal/payment-references/future-payments';else if (actions.referenceType === 'all') url = '/student-portal/payment-references/all-unpaid-invoices';\n\n  try {\n    const response = yield axios({\n      url,\n      method: 'POST',\n      data: actions.data\n    });\n    yield put({\n      type: paymentReferenceActions.GENERATE_PAYMENT_REFERENCE_SUCCESS,\n      data: response.data\n    });\n    yield put({\n      type: paymentReferenceActions.GETTING_PAYMENT_REFERENCES_REQUEST\n    });\n  } catch (error) {\n    yield put({\n      type: paymentReferenceActions.GENERATE_PAYMENT_REFERENCE_ERROR,\n      error: error.data\n    });\n  }\n}\n\nfunction* watchGetPaymentReferences() {\n  yield takeLatest(paymentReferenceActions.GETTING_PAYMENT_REFERENCES_REQUEST, getPaymentReferences);\n}\n\nfunction* watchGeneratePaymentReference() {\n  yield takeLatest(paymentReferenceActions.GENERATE_PAYMENT_REFERENCE_REQUEST, generatePaymentReference);\n}\n\nconst forkFunctions = [fork(watchGetPaymentReferences), fork(watchGeneratePaymentReference)];\nexport default forkFunctions;","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis-front/src/config/saga/payment/paymentReference.js"],"names":["takeLatest","fork","put","axios","authActions","paymentActions","paymentReferenceActions","getPaymentReferences","actions","response","url","method","params","data","type","GETTING_PAYMENT_REFERENCES_SUCCESS","paymentReferences","GET_AUTH_USER_ACCOUNT_BALANCE_REQUEST","GET_MY_TRANSACTIONS_REQUEST","error","GETTING_PAYMENT_REFERENCES_ERROR","generatePaymentReference","referenceType","GENERATE_PAYMENT_REFERENCE_SUCCESS","GETTING_PAYMENT_REFERENCES_REQUEST","GENERATE_PAYMENT_REFERENCE_ERROR","watchGetPaymentReferences","watchGeneratePaymentReference","GENERATE_PAYMENT_REFERENCE_REQUEST","forkFunctions"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,WADF,EAEEC,cAFF,EAGEC,uBAHF,QAIO,eAJP;;AAMA,UAAUC,oBAAV,CAA+BC,OAA/B,EAAwC;AACtC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMN,KAAK,CAAC;AAC3BO,MAAAA,GAAG,EAAE,4CADsB;AAE3BC,MAAAA,MAAM,EAAE,KAFmB;AAG3BC,MAAAA,MAAM,EAAEJ,OAAO,CAACK;AAHW,KAAD,CAA5B;AAKA,UAAMX,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAER,uBAAuB,CAACS,kCADtB;AAERF,MAAAA,IAAI,EAAEJ,QAAQ,CAACO;AAFP,KAAD,CAAT;AAIA,UAAMd,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAEV,WAAW,CAACa;AADV,KAAD,CAAT;AAGA,UAAMf,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAET,cAAc,CAACa;AADb,KAAD,CAAT;AAGD,GAhBD,CAgBE,OAAOC,KAAP,EAAc;AACd,UAAMjB,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAER,uBAAuB,CAACc,gCADtB;AAERD,MAAAA,KAAK,EAAEA,KAAK,CAACN;AAFL,KAAD,CAAT;AAID;AACF;;AAED,UAAUQ,wBAAV,CAAmCb,OAAnC,EAA4C;AAC1C,MAAIE,GAAG,GAAG,oCAAV;AACA,MAAIF,OAAO,CAACc,aAAR,KAA0B,MAA9B,EACEZ,GAAG,GAAG,2DAAN,CADF,KAEK,IAAIF,OAAO,CAACc,aAAR,KAA0B,QAA9B,EACHZ,GAAG,GAAG,oDAAN,CADG,KAEA,IAAIF,OAAO,CAACc,aAAR,KAA0B,KAA9B,EACHZ,GAAG,GAAG,wDAAN;;AAEF,MAAI;AACF,UAAMD,QAAQ,GAAG,MAAMN,KAAK,CAAC;AAC3BO,MAAAA,GAD2B;AAE3BC,MAAAA,MAAM,EAAE,MAFmB;AAG3BE,MAAAA,IAAI,EAAEL,OAAO,CAACK;AAHa,KAAD,CAA5B;AAKA,UAAMX,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAER,uBAAuB,CAACiB,kCADtB;AAERV,MAAAA,IAAI,EAAEJ,QAAQ,CAACI;AAFP,KAAD,CAAT;AAIA,UAAMX,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAER,uBAAuB,CAACkB;AADtB,KAAD,CAAT;AAGD,GAbD,CAaE,OAAOL,KAAP,EAAc;AACd,UAAMjB,GAAG,CAAC;AACRY,MAAAA,IAAI,EAAER,uBAAuB,CAACmB,gCADtB;AAERN,MAAAA,KAAK,EAAEA,KAAK,CAACN;AAFL,KAAD,CAAT;AAID;AACF;;AAED,UAAUa,yBAAV,GAAsC;AACpC,QAAM1B,UAAU,CACdM,uBAAuB,CAACkB,kCADV,EAEdjB,oBAFc,CAAhB;AAID;;AAED,UAAUoB,6BAAV,GAA0C;AACxC,QAAM3B,UAAU,CACdM,uBAAuB,CAACsB,kCADV,EAEdP,wBAFc,CAAhB;AAID;;AAED,MAAMQ,aAAa,GAAG,CACpB5B,IAAI,CAACyB,yBAAD,CADgB,EAEpBzB,IAAI,CAAC0B,6BAAD,CAFgB,CAAtB;AAKA,eAAeE,aAAf","sourcesContent":["import { takeLatest, fork, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  authActions,\n  paymentActions,\n  paymentReferenceActions,\n} from '../../actions';\n\nfunction* getPaymentReferences(actions) {\n  try {\n    const response = yield axios({\n      url: '/student-portal/payment-references/history',\n      method: 'GET',\n      params: actions.data,\n    });\n    yield put({\n      type: paymentReferenceActions.GETTING_PAYMENT_REFERENCES_SUCCESS,\n      data: response.paymentReferences,\n    });\n    yield put({\n      type: authActions.GET_AUTH_USER_ACCOUNT_BALANCE_REQUEST,\n    });\n    yield put({\n      type: paymentActions.GET_MY_TRANSACTIONS_REQUEST,\n    });\n  } catch (error) {\n    yield put({\n      type: paymentReferenceActions.GETTING_PAYMENT_REFERENCES_ERROR,\n      error: error.data,\n    });\n  }\n}\n\nfunction* generatePaymentReference(actions) {\n  let url = '/student-portal/payment-references';\n  if (actions.referenceType === 'bulk')\n    url = '/student-portal/payment-references/select-unpaid-invoices';\n  else if (actions.referenceType === 'future')\n    url = '/student-portal/payment-references/future-payments';\n  else if (actions.referenceType === 'all')\n    url = '/student-portal/payment-references/all-unpaid-invoices';\n\n  try {\n    const response = yield axios({\n      url,\n      method: 'POST',\n      data: actions.data,\n    });\n    yield put({\n      type: paymentReferenceActions.GENERATE_PAYMENT_REFERENCE_SUCCESS,\n      data: response.data,\n    });\n    yield put({\n      type: paymentReferenceActions.GETTING_PAYMENT_REFERENCES_REQUEST,\n    });\n  } catch (error) {\n    yield put({\n      type: paymentReferenceActions.GENERATE_PAYMENT_REFERENCE_ERROR,\n      error: error.data,\n    });\n  }\n}\n\nfunction* watchGetPaymentReferences() {\n  yield takeLatest(\n    paymentReferenceActions.GETTING_PAYMENT_REFERENCES_REQUEST,\n    getPaymentReferences\n  );\n}\n\nfunction* watchGeneratePaymentReference() {\n  yield takeLatest(\n    paymentReferenceActions.GENERATE_PAYMENT_REFERENCE_REQUEST,\n    generatePaymentReference\n  );\n}\n\nconst forkFunctions = [\n  fork(watchGetPaymentReferences),\n  fork(watchGeneratePaymentReference),\n];\n\nexport default forkFunctions;\n"]},"metadata":{},"sourceType":"module"}