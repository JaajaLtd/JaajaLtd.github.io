{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/ChangePassword.jsx\",\n    _s = $RefreshSig$();\n\nimport { get, isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card, Form } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { FaUserLock } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, InputText, SubmitButton } from '../../components/common';\nimport { authActions } from '../../config/actions';\nimport usePrevious from '../Hooks/usePrevious';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ChangePassword = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    errors,\n    reset\n  } = useForm();\n  const changingPassword = useSelector(state => state.auth.changingPassword);\n  const changePasswordError = useSelector(state => state.auth.changePasswordError);\n  const changePasswordSuccess = useSelector(state => state.auth.changePasswordSuccess);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const previousState = usePrevious({\n    changePasswordError,\n    changePasswordSuccess\n  });\n  useEffect(() => {\n    setErrorMessage(null);\n    setSuccessMessage(null);\n\n    if (!isEmpty(previousState)) {\n      if (previousState.changePasswordError !== changePasswordError && (changePasswordError === null || changePasswordError === void 0 ? void 0 : changePasswordError.server)) {\n        setErrorMessage(changePasswordError.server.message);\n      }\n\n      if (previousState.changePasswordSuccess !== changePasswordSuccess && (changePasswordSuccess === null || changePasswordSuccess === void 0 ? void 0 : changePasswordSuccess.server)) {\n        setSuccessMessage(changePasswordSuccess.server.message);\n        reset();\n      }\n    }\n  }, [changePasswordError, changePasswordSuccess]);\n\n  const onChangePasswordFormSubmit = data => {\n    if (!isEmpty(data)) {\n      dispatch(authActions.changePassword(data));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n      className: \"text-primary font600 py-3 text-sm\",\n      children: [/*#__PURE__*/_jsxDEV(FaUserLock, {\n        className: \"me-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), \"CHANGE PASSWORD\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [(errorMessage || successMessage) && /*#__PURE__*/_jsxDEV(AlertMessage, {\n        type: errorMessage ? 'danger' : 'success',\n        message: errorMessage || successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit(onChangePasswordFormSubmit),\n        children: [/*#__PURE__*/_jsxDEV(InputText, {\n          label: \"Old Password\",\n          type: \"password\",\n          name: \"old_password\",\n          inline: true,\n          register: register({\n            required: 'Your old password is Required'\n          }),\n          error: get(errors, 'old_password.message')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputText, {\n          label: \"New Password\",\n          type: \"password\",\n          name: \"new_password\",\n          inline: true,\n          register: register({\n            required: 'Your New password is Required',\n            minLength: {\n              value: 8,\n              message: 'Password should be at least 8 characters'\n            },\n            maxLength: {\n              value: 16,\n              message: 'Password should be less than 16 characters'\n            }\n          }),\n          error: get(errors, 'new_password.message')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputText, {\n          label: \"Confirm New Password\",\n          type: \"password\",\n          name: \"confirm_new_password\",\n          inline: true,\n          register: register({\n            required: 'Confirm your New password.',\n            minLength: {\n              value: 8,\n              message: 'Password should be at least 8 characters'\n            },\n            maxLength: {\n              value: 16,\n              message: 'Password should be less than 16 characters'\n            }\n          }),\n          error: get(errors, 'confirm_new_password.message')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SubmitButton, {\n          size: \"sm\",\n          loading: changingPassword,\n          text: \"Change Password\",\n          loadingText: \"Updating Password...\",\n          className: \"float-right font600 text-uppercase\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ChangePassword, \"C4+Hcc9zsQlxsuIJZCC8klhJ+XQ=\", false, function () {\n  return [useDispatch, useForm, useSelector, useSelector, useSelector, usePrevious];\n});\n\n_c = ChangePassword;\nexport default ChangePassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChangePassword\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/ChangePassword.jsx"],"names":["get","isEmpty","React","useEffect","useState","Card","Form","useForm","FaUserLock","useDispatch","useSelector","AlertMessage","InputText","SubmitButton","authActions","usePrevious","ChangePassword","dispatch","register","handleSubmit","errors","reset","changingPassword","state","auth","changePasswordError","changePasswordSuccess","errorMessage","setErrorMessage","successMessage","setSuccessMessage","previousState","server","message","onChangePasswordFormSubmit","data","changePassword","required","minLength","value","maxLength"],"mappings":"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","sourcesContent":["import { get, isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card, Form } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { FaUserLock } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, InputText, SubmitButton } from '../../components/common';\nimport { authActions } from '../../config/actions';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst ChangePassword = () => {\n  const dispatch = useDispatch();\n  const { register, handleSubmit, errors, reset } = useForm();\n  const changingPassword = useSelector((state) => state.auth.changingPassword);\n  const changePasswordError = useSelector(\n    (state) => state.auth.changePasswordError\n  );\n  const changePasswordSuccess = useSelector(\n    (state) => state.auth.changePasswordSuccess\n  );\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const previousState = usePrevious({\n    changePasswordError,\n    changePasswordSuccess,\n  });\n\n  useEffect(() => {\n    setErrorMessage(null);\n    setSuccessMessage(null);\n    if (!isEmpty(previousState)) {\n      if (\n        previousState.changePasswordError !== changePasswordError &&\n        changePasswordError?.server\n      ) {\n        setErrorMessage(changePasswordError.server.message);\n      }\n      if (\n        previousState.changePasswordSuccess !== changePasswordSuccess &&\n        changePasswordSuccess?.server\n      ) {\n        setSuccessMessage(changePasswordSuccess.server.message);\n        reset();\n      }\n    }\n  }, [changePasswordError, changePasswordSuccess]);\n\n  const onChangePasswordFormSubmit = (data) => {\n    if (!isEmpty(data)) {\n      dispatch(authActions.changePassword(data));\n    }\n  };\n  return (\n    <>\n      <Card.Header className=\"text-primary font600 py-3 text-sm\">\n        <FaUserLock className=\"me-1\" />\n        CHANGE PASSWORD\n      </Card.Header>\n      <Card.Body>\n        {(errorMessage || successMessage) && (\n          <AlertMessage\n            type={errorMessage ? 'danger' : 'success'}\n            message={errorMessage || successMessage}\n          />\n        )}\n        <Form onSubmit={handleSubmit(onChangePasswordFormSubmit)}>\n          <InputText\n            label=\"Old Password\"\n            type=\"password\"\n            name=\"old_password\"\n            inline\n            register={register({\n              required: 'Your old password is Required',\n            })}\n            error={get(errors, 'old_password.message')}\n          />\n          <InputText\n            label=\"New Password\"\n            type=\"password\"\n            name=\"new_password\"\n            inline\n            register={register({\n              required: 'Your New password is Required',\n              minLength: {\n                value: 8,\n                message: 'Password should be at least 8 characters',\n              },\n              maxLength: {\n                value: 16,\n                message: 'Password should be less than 16 characters',\n              },\n            })}\n            error={get(errors, 'new_password.message')}\n          />\n          <InputText\n            label=\"Confirm New Password\"\n            type=\"password\"\n            name=\"confirm_new_password\"\n            inline\n            register={register({\n              required: 'Confirm your New password.',\n              minLength: {\n                value: 8,\n                message: 'Password should be at least 8 characters',\n              },\n              maxLength: {\n                value: 16,\n                message: 'Password should be less than 16 characters',\n              },\n            })}\n            error={get(errors, 'confirm_new_password.message')}\n          />\n\n          <SubmitButton\n            size=\"sm\"\n            loading={changingPassword}\n            text=\"Change Password\"\n            loadingText=\"Updating Password...\"\n            className=\"float-right font600 text-uppercase\"\n          />\n        </Form>\n      </Card.Body>\n    </>\n  );\n};\n\nexport default ChangePassword;\n"]},"metadata":{},"sourceType":"module"}