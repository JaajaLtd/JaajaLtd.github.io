{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis-front/src/containers/PaymentReferences/GeneratePaymentReference.jsx\",\n    _s = $RefreshSig$();\n\nimport { get, isEmpty, sum, sumBy } from 'lodash';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { Card, Col, Form, Row } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { FaExclamationCircle } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, InputText, ReloadButton, SubmitButton } from '../../components/common';\nimport { paymentActions, paymentReferenceActions } from '../../config/actions';\nimport { getInvoiceAmount } from './helper';\nimport UnPaidInvoices from './UnPaidInvoices';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst GeneratePaymentReference = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    register,\n    errors,\n    handleSubmit\n  } = useForm();\n  const [invoiceType, setInvoiceType] = useState('future-payments');\n  const [totalInvoiceDue, setTotalInvoiceDue] = useState(0);\n  const [allUnPaidInvoices, setAllUnPaidInvoices] = useState([]);\n  const [selectedRows, setSelectedRows] = useState([]);\n  const {\n    invoices,\n    loading\n  } = useSelector(state => state.myInvoice);\n  const {\n    generatingPaymentReference\n  } = useSelector(state => state.paymentReference); // const paymentMode = watch('payment_mode', null);\n\n  const getInvoices = () => dispatch(paymentActions.getMyInvoices());\n\n  useEffect(() => {\n    if (isEmpty(invoices)) getInvoices();\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(invoices)) {\n      let invoiceAmountsDue = 0;\n      let unPaidInvoices = [];\n      invoices.forEach(invoice => {\n        var _invoice$tuition_invo, _invoice$functional_f, _invoice$manual_invoi, _invoice$other_fees_i;\n\n        const tuitionDue = sumBy(invoice.tuition_invoices, 'amount_due');\n        const functionalDue = sumBy(invoice.functional_fees_invoices, 'amount_due');\n        const otherFeesDue = sumBy(invoice.other_fees_invoices, 'amount_due');\n        const manualsDue = sumBy(invoice.manual_invoices, 'amount_due');\n        invoiceAmountsDue += sum([tuitionDue, functionalDue, otherFeesDue, manualsDue]);\n        const unPaidTuition = invoice === null || invoice === void 0 ? void 0 : (_invoice$tuition_invo = invoice.tuition_invoices) === null || _invoice$tuition_invo === void 0 ? void 0 : _invoice$tuition_invo.filter(unpaidInvoice => unpaidInvoice.amount_due > 0);\n        const unPaidFunctional = invoice === null || invoice === void 0 ? void 0 : (_invoice$functional_f = invoice.functional_fees_invoices) === null || _invoice$functional_f === void 0 ? void 0 : _invoice$functional_f.filter(unpaidInvoice => unpaidInvoice.amount_due > 0);\n        const unPaidManual = invoice === null || invoice === void 0 ? void 0 : (_invoice$manual_invoi = invoice.manual_invoices) === null || _invoice$manual_invoi === void 0 ? void 0 : _invoice$manual_invoi.filter(unpaidInvoice => unpaidInvoice.amount_due > 0);\n        const unPaidOther = invoice === null || invoice === void 0 ? void 0 : (_invoice$other_fees_i = invoice.other_fees_invoices) === null || _invoice$other_fees_i === void 0 ? void 0 : _invoice$other_fees_i.filter(unpaidInvoice => unpaidInvoice.amount_due > 0);\n        unPaidInvoices = [...unPaidInvoices, ...unPaidTuition, ...unPaidFunctional, ...unPaidManual, ...unPaidOther];\n      });\n      setTotalInvoiceDue(invoiceAmountsDue);\n      setAllUnPaidInvoices(unPaidInvoices);\n      setSelectedRows(unPaidInvoices.map(unpaidInvoice => {\n        return {\n          id: unpaidInvoice === null || unpaidInvoice === void 0 ? void 0 : unpaidInvoice.id,\n          invoice_number: unpaidInvoice.invoice_number,\n          amount: unpaidInvoice.amount_due\n        };\n      }));\n    }\n  }, [invoices]);\n\n  const handleFormSubmit = data => {\n    if (!isEmpty(data)) {\n      let payload = data;\n      let url = 'future';\n      if (invoiceType === 'all-unpaid-invoices') url = 'all';else if (invoiceType === 'select-unpaid-invoices') {\n        url = 'bulk';\n        payload = { ...payload,\n          tuition_invoices: getInvoiceAmount(selectedRows, 'T', 'tuition_invoice_id'),\n          functional_fees_invoices: getInvoiceAmount(selectedRows, 'F', 'functional_fees_invoice_id'),\n          other_fees_invoices: getInvoiceAmount(selectedRows, 'O', 'functional_fees_invoice_id'),\n          manual_invoices: getInvoiceAmount(selectedRows, 'M', 'manual_invoice_id')\n        };\n      }\n      dispatch(paymentReferenceActions.generatePaymentReference(payload, url));\n    }\n  };\n\n  const invoiceTypes = [{\n    title: '1. FOR FEES DEPOSIT TO MY ACCOUNT',\n    url: 'future-payments',\n    hidden: false\n  }, {\n    title: '2. FOR ALL PENDING INVOICES',\n    url: 'all-unpaid-invoices',\n    hidden: isEmpty(allUnPaidInvoices)\n  }, {\n    title: '3. FOR SPECIFIC INVOICES',\n    url: 'select-unpaid-invoices',\n    hidden: isEmpty(allUnPaidInvoices)\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isEmpty(allUnPaidInvoices) && /*#__PURE__*/_jsxDEV(AlertMessage, {\n      message: \"You Have No Unpaid Invoices\",\n      icon: /*#__PURE__*/_jsxDEV(FaExclamationCircle, {\n        className: \"me-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this),\n      className: \"font600 text-sm p-2\",\n      type: \"info\",\n      extras: /*#__PURE__*/_jsxDEV(ReloadButton, {\n        loading: loading,\n        onClick: getInvoices,\n        variant: \"link\",\n        text: \"Reload\",\n        size: \"sm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit(handleFormSubmit),\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"row-deck mb-4 g-0\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          md: 5,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            body: true,\n            children: [/*#__PURE__*/_jsxDEV(Card.Subtitle, {\n              className: \"mb-4 font600 text-center text-sm\",\n              children: \"SELECT PAYMENT REFERENCE TYPE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), invoiceTypes.map(invoice => /*#__PURE__*/_jsxDEV(Fragment, {\n              children: invoice.hidden === false && /*#__PURE__*/_jsxDEV(Card, {\n                body: true,\n                onClick: () => setInvoiceType(invoice.url),\n                className: `mb-2 p-2 text-center rounded font600 ${invoiceType === invoice.url ? 'bg-primary text-white' : 'bg-light text-primary'}`,\n                style: {\n                  cursor: 'pointer'\n                },\n                children: invoice.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 21\n              }, this)\n            }, invoice.url, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          md: 7,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            body: true,\n            className: \"bg-light\",\n            children: [/*#__PURE__*/_jsxDEV(Card.Subtitle, {\n              className: \"mb-4 font600 text-primary text-center text-sm\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"me-1\",\n                children: \"GENERATE REFERENCE FOR\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 17\n              }, this), invoiceType === 'future-payments' && 'FEES DEPOSIT TO YOUR ACCOUNT' || invoiceType === 'all-unpaid-invoices' && 'ALL UNPAID INVOICES']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this), invoiceType === 'all-unpaid-invoices' && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(UnPaidInvoices, {\n                selectedRows: selectedRows,\n                setSelectedRows: setSelectedRows,\n                invoices: allUnPaidInvoices\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Header, {\n                className: \"rounded-0 border-0 text-sm py-1 my-3 bg-dark text-white\",\n                children: [\"TOTAL AMOUNT TO PAY\", /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-options text-white\",\n                  children: `${totalInvoiceDue.toLocaleString()} UGX`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true), invoiceType === 'select-unpaid-invoices' && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(UnPaidInvoices, {\n                selectedRows: selectedRows,\n                setSelectedRows: setSelectedRows,\n                invoices: allUnPaidInvoices,\n                editAmount: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Header, {\n                className: \"rounded-0 border-0 text-sm py-1 my-3 bg-dark text-white\",\n                children: [\"TOTAL AMOUNT TO PAY\", /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"card-options text-white\",\n                  children: `${sumBy(selectedRows, 'amount').toLocaleString()} UGX`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 226,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true), invoiceType === 'future-payments' && /*#__PURE__*/_jsxDEV(InputText, {\n              name: \"amount\",\n              label: \"AMOUNT TO DEPOSIT\",\n              register: register({\n                required: 'Enter the amount to Deposit E.g 1,000,000',\n                min: {\n                  value: 500,\n                  message: 'Minimum amount should be 500 UGX'\n                },\n                max: {\n                  value: 100000000,\n                  message: 'Minimum amount should be 100,000,000 UGX'\n                }\n              }),\n              type: \"number\",\n              min: \"500\",\n              max: \"100000000\",\n              error: get(errors, 'amount.message'),\n              requiredField: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-3 text-end\",\n              children: /*#__PURE__*/_jsxDEV(SubmitButton, {\n                text: \"GENERATE REFERENCE\",\n                size: \"md\",\n                loading: generatingPaymentReference,\n                loadingText: \"Generating...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(GeneratePaymentReference, \"c90ZwUbogvctsAFsDLHF3xps0rI=\", false, function () {\n  return [useDispatch, useForm, useSelector, useSelector];\n});\n\n_c = GeneratePaymentReference;\nexport default GeneratePaymentReference;\n\nvar _c;\n\n$RefreshReg$(_c, \"GeneratePaymentReference\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis-front/src/containers/PaymentReferences/GeneratePaymentReference.jsx"],"names":["get","isEmpty","sum","sumBy","React","Fragment","useEffect","useState","Card","Col","Form","Row","useForm","FaExclamationCircle","useDispatch","useSelector","AlertMessage","InputText","ReloadButton","SubmitButton","paymentActions","paymentReferenceActions","getInvoiceAmount","UnPaidInvoices","GeneratePaymentReference","dispatch","register","errors","handleSubmit","invoiceType","setInvoiceType","totalInvoiceDue","setTotalInvoiceDue","allUnPaidInvoices","setAllUnPaidInvoices","selectedRows","setSelectedRows","invoices","loading","state","myInvoice","generatingPaymentReference","paymentReference","getInvoices","getMyInvoices","invoiceAmountsDue","unPaidInvoices","forEach","invoice","tuitionDue","tuition_invoices","functionalDue","functional_fees_invoices","otherFeesDue","other_fees_invoices","manualsDue","manual_invoices","unPaidTuition","filter","unpaidInvoice","amount_due","unPaidFunctional","unPaidManual","unPaidOther","map","id","invoice_number","amount","handleFormSubmit","data","payload","url","generatePaymentReference","invoiceTypes","title","hidden","cursor","toLocaleString","required","min","value","message","max"],"mappings":"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","sourcesContent":["import { get, isEmpty, sum, sumBy } from 'lodash';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { Card, Col, Form, Row } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { FaExclamationCircle } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  AlertMessage,\n  InputText,\n  ReloadButton,\n  SubmitButton,\n} from '../../components/common';\nimport { paymentActions, paymentReferenceActions } from '../../config/actions';\nimport { getInvoiceAmount } from './helper';\nimport UnPaidInvoices from './UnPaidInvoices';\n\nconst GeneratePaymentReference = () => {\n  const dispatch = useDispatch();\n  const { register, errors, handleSubmit } = useForm();\n  const [invoiceType, setInvoiceType] = useState('future-payments');\n  const [totalInvoiceDue, setTotalInvoiceDue] = useState(0);\n  const [allUnPaidInvoices, setAllUnPaidInvoices] = useState([]);\n  const [selectedRows, setSelectedRows] = useState([]);\n  const { invoices, loading } = useSelector((state) => state.myInvoice);\n  const { generatingPaymentReference } = useSelector(\n    (state) => state.paymentReference\n  );\n\n  // const paymentMode = watch('payment_mode', null);\n\n  const getInvoices = () => dispatch(paymentActions.getMyInvoices());\n\n  useEffect(() => {\n    if (isEmpty(invoices)) getInvoices();\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(invoices)) {\n      let invoiceAmountsDue = 0;\n      let unPaidInvoices = [];\n\n      invoices.forEach((invoice) => {\n        const tuitionDue = sumBy(invoice.tuition_invoices, 'amount_due');\n        const functionalDue = sumBy(\n          invoice.functional_fees_invoices,\n          'amount_due'\n        );\n        const otherFeesDue = sumBy(invoice.other_fees_invoices, 'amount_due');\n        const manualsDue = sumBy(invoice.manual_invoices, 'amount_due');\n        invoiceAmountsDue += sum([\n          tuitionDue,\n          functionalDue,\n          otherFeesDue,\n          manualsDue,\n        ]);\n\n        const unPaidTuition = invoice?.tuition_invoices?.filter(\n          (unpaidInvoice) => unpaidInvoice.amount_due > 0\n        );\n        const unPaidFunctional = invoice?.functional_fees_invoices?.filter(\n          (unpaidInvoice) => unpaidInvoice.amount_due > 0\n        );\n        const unPaidManual = invoice?.manual_invoices?.filter(\n          (unpaidInvoice) => unpaidInvoice.amount_due > 0\n        );\n        const unPaidOther = invoice?.other_fees_invoices?.filter(\n          (unpaidInvoice) => unpaidInvoice.amount_due > 0\n        );\n        unPaidInvoices = [\n          ...unPaidInvoices,\n          ...unPaidTuition,\n          ...unPaidFunctional,\n          ...unPaidManual,\n          ...unPaidOther,\n        ];\n      });\n      setTotalInvoiceDue(invoiceAmountsDue);\n      setAllUnPaidInvoices(unPaidInvoices);\n      setSelectedRows(\n        unPaidInvoices.map((unpaidInvoice) => {\n          return {\n            id: unpaidInvoice?.id,\n            invoice_number: unpaidInvoice.invoice_number,\n            amount: unpaidInvoice.amount_due,\n          };\n        })\n      );\n    }\n  }, [invoices]);\n\n  const handleFormSubmit = (data) => {\n    if (!isEmpty(data)) {\n      let payload = data;\n      let url = 'future';\n      if (invoiceType === 'all-unpaid-invoices') url = 'all';\n      else if (invoiceType === 'select-unpaid-invoices') {\n        url = 'bulk';\n        payload = {\n          ...payload,\n          tuition_invoices: getInvoiceAmount(\n            selectedRows,\n            'T',\n            'tuition_invoice_id'\n          ),\n          functional_fees_invoices: getInvoiceAmount(\n            selectedRows,\n            'F',\n            'functional_fees_invoice_id'\n          ),\n          other_fees_invoices: getInvoiceAmount(\n            selectedRows,\n            'O',\n            'functional_fees_invoice_id'\n          ),\n          manual_invoices: getInvoiceAmount(\n            selectedRows,\n            'M',\n            'manual_invoice_id'\n          ),\n        };\n      }\n      dispatch(paymentReferenceActions.generatePaymentReference(payload, url));\n    }\n  };\n\n  const invoiceTypes = [\n    {\n      title: '1. FOR FEES DEPOSIT TO MY ACCOUNT',\n      url: 'future-payments',\n      hidden: false,\n    },\n    {\n      title: '2. FOR ALL PENDING INVOICES',\n      url: 'all-unpaid-invoices',\n      hidden: isEmpty(allUnPaidInvoices),\n    },\n    {\n      title: '3. FOR SPECIFIC INVOICES',\n      url: 'select-unpaid-invoices',\n      hidden: isEmpty(allUnPaidInvoices),\n    },\n  ];\n\n  return (\n    <>\n      {isEmpty(allUnPaidInvoices) && (\n        <AlertMessage\n          message=\"You Have No Unpaid Invoices\"\n          icon={<FaExclamationCircle className=\"me-1\" />}\n          className=\"font600 text-sm p-2\"\n          type=\"info\"\n          extras={\n            <ReloadButton\n              loading={loading}\n              onClick={getInvoices}\n              variant=\"link\"\n              text=\"Reload\"\n              size=\"sm\"\n            />\n          }\n        />\n      )}\n      <Form onSubmit={handleSubmit(handleFormSubmit)}>\n        <Row className=\"row-deck mb-4 g-0\">\n          <Col md={5}>\n            <Card body>\n              <Card.Subtitle className=\"mb-4 font600 text-center text-sm\">\n                SELECT PAYMENT REFERENCE TYPE\n              </Card.Subtitle>\n\n              {invoiceTypes.map((invoice) => (\n                <Fragment key={invoice.url}>\n                  {invoice.hidden === false && (\n                    <Card\n                      body\n                      onClick={() => setInvoiceType(invoice.url)}\n                      className={`mb-2 p-2 text-center rounded font600 ${\n                        invoiceType === invoice.url\n                          ? 'bg-primary text-white'\n                          : 'bg-light text-primary'\n                      }`}\n                      style={{ cursor: 'pointer' }}\n                    >\n                      {invoice.title}\n                    </Card>\n                  )}\n                </Fragment>\n              ))}\n            </Card>\n          </Col>\n          <Col md={7}>\n            <Card body className=\"bg-light\">\n              <Card.Subtitle className=\"mb-4 font600 text-primary text-center text-sm\">\n                <span className=\"me-1\">GENERATE REFERENCE FOR</span>\n                {(invoiceType === 'future-payments' &&\n                  'FEES DEPOSIT TO YOUR ACCOUNT') ||\n                  (invoiceType === 'all-unpaid-invoices' &&\n                    'ALL UNPAID INVOICES')}\n              </Card.Subtitle>\n              {invoiceType === 'all-unpaid-invoices' && (\n                <>\n                  <UnPaidInvoices\n                    selectedRows={selectedRows}\n                    setSelectedRows={setSelectedRows}\n                    invoices={allUnPaidInvoices}\n                  />\n                  <Card.Header className=\"rounded-0 border-0 text-sm py-1 my-3 bg-dark text-white\">\n                    TOTAL AMOUNT TO PAY\n                    <div className=\"card-options text-white\">\n                      {`${totalInvoiceDue.toLocaleString()} UGX`}\n                    </div>\n                  </Card.Header>\n                </>\n              )}\n\n              {invoiceType === 'select-unpaid-invoices' && (\n                <>\n                  <UnPaidInvoices\n                    selectedRows={selectedRows}\n                    setSelectedRows={setSelectedRows}\n                    invoices={allUnPaidInvoices}\n                    editAmount\n                  />\n                  <Card.Header className=\"rounded-0 border-0 text-sm py-1 my-3 bg-dark text-white\">\n                    TOTAL AMOUNT TO PAY\n                    <div className=\"card-options text-white\">\n                      {`${sumBy(selectedRows, 'amount').toLocaleString()} UGX`}\n                    </div>\n                  </Card.Header>\n                </>\n              )}\n\n              {invoiceType === 'future-payments' && (\n                <InputText\n                  name=\"amount\"\n                  label=\"AMOUNT TO DEPOSIT\"\n                  register={register({\n                    required: 'Enter the amount to Deposit E.g 1,000,000',\n                    min: {\n                      value: 500,\n                      message: 'Minimum amount should be 500 UGX',\n                    },\n                    max: {\n                      value: 100000000,\n                      message: 'Minimum amount should be 100,000,000 UGX',\n                    },\n                  })}\n                  type=\"number\"\n                  min=\"500\"\n                  max=\"100000000\"\n                  error={get(errors, 'amount.message')}\n                  requiredField\n                />\n              )}\n\n              <div className=\"mt-3 text-end\">\n                <SubmitButton\n                  text=\"GENERATE REFERENCE\"\n                  size=\"md\"\n                  loading={generatingPaymentReference}\n                  loadingText=\"Generating...\"\n                />\n              </div>\n            </Card>\n          </Col>\n        </Row>\n      </Form>\n    </>\n  );\n};\n\nexport default GeneratePaymentReference;\n"]},"metadata":{},"sourceType":"module"}