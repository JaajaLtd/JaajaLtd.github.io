{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Payments/MyInvoices.jsx\",\n    _s = $RefreshSig$();\n\nimport { isEmpty, sum, sumBy } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card, Col, Row } from 'react-bootstrap';\nimport DataTable from 'react-data-table-component';\nimport { FaMinus, FaPaperclip, FaPlus } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DataNotFound, DataSpinner, ReloadButton } from '../../components/common';\nimport { paymentActions } from '../../config/actions';\nimport Invoice from './Invoice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyInvoices = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    invoices,\n    loading\n  } = useSelector(state => state.myInvoice);\n  const [invoiceGrandTotalAmount, setInvoiceGrandTotalAmount] = useState(0);\n  const [invoiceGrandAmountPaid, seInvoiceGrandAmountPaid] = useState(0);\n  const [invoiceGrandAmountDue, seInvoiceGrandAmountDue] = useState(0);\n\n  const getInvoices = () => {\n    dispatch(paymentActions.getMyInvoices());\n  };\n\n  useEffect(() => {\n    if (isEmpty(invoices)) getInvoices();\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(invoices)) {\n      let invoiceAmounts = 0;\n      let invoiceAmountsDue = 0;\n      let invoiceAmountsPaid = 0;\n      invoices.forEach(invoice => {\n        const tuitionAmounts = sumBy(invoice.tuition_invoices, 'invoice_amount');\n        const tuitionDue = sumBy(invoice.tuition_invoices, 'amount_due');\n        const tuitionPaid = sumBy(invoice.tuition_invoices, 'amount_paid');\n        const functionalAmounts = sumBy(invoice.functional_fees_invoices, 'invoice_amount');\n        const functionalDue = sumBy(invoice.functional_fees_invoices, 'amount_due');\n        const functionalPaid = sumBy(invoice.functional_fees_invoices, 'amount_paid');\n        const otherAmounts = sumBy(invoice.other_fees_invoices, 'invoice_amount');\n        const otherFeesDue = sumBy(invoice.other_fees_invoices, 'amount_due');\n        const otherFeesPaid = sumBy(invoice.other_fees_invoices, 'amount_paid');\n        const manualAmounts = sumBy(invoice.manual_invoices, 'invoice_amount');\n        const manualsDue = sumBy(invoice.manual_invoices, 'amount_due');\n        const manualsPaid = sumBy(invoice.manual_invoices, 'amount_paid');\n        invoiceAmounts += sum([tuitionAmounts, functionalAmounts, otherAmounts, manualAmounts]);\n        invoiceAmountsDue += sum([tuitionDue, functionalDue, otherFeesDue, manualsDue]);\n        invoiceAmountsPaid += sum([tuitionPaid, functionalPaid, otherFeesPaid, manualsPaid]);\n      });\n      setInvoiceGrandTotalAmount(invoiceAmounts);\n      seInvoiceGrandAmountDue(invoiceAmountsDue);\n      seInvoiceGrandAmountPaid(invoiceAmountsPaid);\n    }\n  }, [invoices]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"text-center text-muted\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 3,\n        className: \"mb-2\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n              className: \"text-xs font600 mb-2\",\n              children: \"TOTAL INVOICE AMOUNT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-info font600 mx-1\",\n              children: `${invoiceGrandTotalAmount.toLocaleString()} UGX`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 3,\n        className: \"mb-2\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n              className: \"text-xs font600 mb-2\",\n              children: \"TOTAL INVOICE AMOUNT PAID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-success font600 mx-1\",\n              children: `${invoiceGrandAmountPaid.toLocaleString()} UGX`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 3,\n        className: \"mb-2\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n              className: \"text-xs font600 mb-2\",\n              children: \"TOTAL INVOICE AMOUNT DUE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-danger font600 mx-1\",\n              children: `${invoiceGrandAmountDue.toLocaleString()} UGX`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 3,\n        className: \"mb-2\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Text, {\n              className: \"text-xs font600 mb-2\",\n              children: \"PERCENTAGE COMPLETION\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `mx-1 font600 ${invoiceGrandAmountPaid / invoiceGrandTotalAmount * 100 > 70 ? 'text-success' : 'text-danger'}`,\n              children: `${invoiceGrandTotalAmount !== 0 ? parseInt(invoiceGrandAmountPaid / invoiceGrandTotalAmount, 10) * 100 : 0} %`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border mt-2\",\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        className: \"py-2  text-secondary text-sm font600\",\n        children: [\"MY INVOICES/BILLS\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-options\",\n          children: /*#__PURE__*/_jsxDEV(ReloadButton, {\n            loading: loading,\n            onClick: () => getInvoices()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DataTable, {\n        data: invoices,\n        noHeader: true,\n        noTableHead: true,\n        progressPending: loading && isEmpty(invoices),\n        progressComponent: /*#__PURE__*/_jsxDEV(DataSpinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 30\n        }, this),\n        expandableRows: true,\n        columns: [{\n          name: 'ACADEMIC YEAR',\n          wrap: true,\n\n          cell(transaction) {\n            const {\n              semester,\n              academic_year: academicYear,\n              programme_study_years: studyYear\n            } = transaction;\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font600 text-info\",\n                children: [/*#__PURE__*/_jsxDEV(FaPaperclip, {\n                  className: \"me-1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 182,\n                  columnNumber: 23\n                }, this), `${studyYear} - ${semester} - ${academicYear}`]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 21\n              }, this)\n            }, void 0, false);\n          }\n\n        }],\n        noDataComponent: /*#__PURE__*/_jsxDEV(DataNotFound, {\n          message: \"YOU HAVE NO INVOICE HISTORY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this),\n        expandableRowsComponent: /*#__PURE__*/_jsxDEV(Invoice, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 36\n        }, this),\n        expandableRowExpanded: (row, index) => index === 1,\n        expandOnRowClicked: true,\n        striped: true,\n        expandableIcon: {\n          expanded: /*#__PURE__*/_jsxDEV(FaMinus, {\n            className: \"text-info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 23\n          }, this),\n          collapsed: /*#__PURE__*/_jsxDEV(FaPlus, {\n            className: \"text-info\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 24\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MyInvoices, \"c30bbRyxGvOGeFKEjiGYQ6u3/Hc=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = MyInvoices;\nexport default MyInvoices;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyInvoices\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Payments/MyInvoices.jsx"],"names":["isEmpty","sum","sumBy","React","useEffect","useState","Card","Col","Row","DataTable","FaMinus","FaPaperclip","FaPlus","useDispatch","useSelector","DataNotFound","DataSpinner","ReloadButton","paymentActions","Invoice","MyInvoices","dispatch","invoices","loading","state","myInvoice","invoiceGrandTotalAmount","setInvoiceGrandTotalAmount","invoiceGrandAmountPaid","seInvoiceGrandAmountPaid","invoiceGrandAmountDue","seInvoiceGrandAmountDue","getInvoices","getMyInvoices","invoiceAmounts","invoiceAmountsDue","invoiceAmountsPaid","forEach","invoice","tuitionAmounts","tuition_invoices","tuitionDue","tuitionPaid","functionalAmounts","functional_fees_invoices","functionalDue","functionalPaid","otherAmounts","other_fees_invoices","otherFeesDue","otherFeesPaid","manualAmounts","manual_invoices","manualsDue","manualsPaid","toLocaleString","parseInt","name","wrap","cell","transaction","semester","academic_year","academicYear","programme_study_years","studyYear","row","index","expanded","collapsed"],"mappings":"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","sourcesContent":["import { isEmpty, sum, sumBy } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card, Col, Row } from 'react-bootstrap';\nimport DataTable from 'react-data-table-component';\nimport { FaMinus, FaPaperclip, FaPlus } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  DataNotFound,\n  DataSpinner,\n  ReloadButton,\n} from '../../components/common';\nimport { paymentActions } from '../../config/actions';\nimport Invoice from './Invoice';\n\nconst MyInvoices = () => {\n  const dispatch = useDispatch();\n  const { invoices, loading } = useSelector((state) => state.myInvoice);\n  const [invoiceGrandTotalAmount, setInvoiceGrandTotalAmount] = useState(0);\n  const [invoiceGrandAmountPaid, seInvoiceGrandAmountPaid] = useState(0);\n  const [invoiceGrandAmountDue, seInvoiceGrandAmountDue] = useState(0);\n\n  const getInvoices = () => {\n    dispatch(paymentActions.getMyInvoices());\n  };\n\n  useEffect(() => {\n    if (isEmpty(invoices)) getInvoices();\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(invoices)) {\n      let invoiceAmounts = 0;\n      let invoiceAmountsDue = 0;\n      let invoiceAmountsPaid = 0;\n\n      invoices.forEach((invoice) => {\n        const tuitionAmounts = sumBy(\n          invoice.tuition_invoices,\n          'invoice_amount'\n        );\n        const tuitionDue = sumBy(invoice.tuition_invoices, 'amount_due');\n        const tuitionPaid = sumBy(invoice.tuition_invoices, 'amount_paid');\n        const functionalAmounts = sumBy(\n          invoice.functional_fees_invoices,\n          'invoice_amount'\n        );\n        const functionalDue = sumBy(\n          invoice.functional_fees_invoices,\n          'amount_due'\n        );\n        const functionalPaid = sumBy(\n          invoice.functional_fees_invoices,\n          'amount_paid'\n        );\n        const otherAmounts = sumBy(\n          invoice.other_fees_invoices,\n          'invoice_amount'\n        );\n        const otherFeesDue = sumBy(invoice.other_fees_invoices, 'amount_due');\n        const otherFeesPaid = sumBy(invoice.other_fees_invoices, 'amount_paid');\n        const manualAmounts = sumBy(invoice.manual_invoices, 'invoice_amount');\n        const manualsDue = sumBy(invoice.manual_invoices, 'amount_due');\n        const manualsPaid = sumBy(invoice.manual_invoices, 'amount_paid');\n\n        invoiceAmounts += sum([\n          tuitionAmounts,\n          functionalAmounts,\n          otherAmounts,\n          manualAmounts,\n        ]);\n        invoiceAmountsDue += sum([\n          tuitionDue,\n          functionalDue,\n          otherFeesDue,\n          manualsDue,\n        ]);\n        invoiceAmountsPaid += sum([\n          tuitionPaid,\n          functionalPaid,\n          otherFeesPaid,\n          manualsPaid,\n        ]);\n      });\n      setInvoiceGrandTotalAmount(invoiceAmounts);\n      seInvoiceGrandAmountDue(invoiceAmountsDue);\n      seInvoiceGrandAmountPaid(invoiceAmountsPaid);\n    }\n  }, [invoices]);\n\n  return (\n    <>\n      <Row className=\"text-center text-muted\">\n        <Col md={3} className=\"mb-2\">\n          <Card>\n            <Card.Body>\n              <Card.Text className=\"text-xs font600 mb-2\">\n                TOTAL INVOICE AMOUNT\n              </Card.Text>\n              <span className=\"text-info font600 mx-1\">\n                {`${invoiceGrandTotalAmount.toLocaleString()} UGX`}\n              </span>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col md={3} className=\"mb-2\">\n          <Card>\n            <Card.Body>\n              <Card.Text className=\"text-xs font600 mb-2\">\n                TOTAL INVOICE AMOUNT PAID\n              </Card.Text>\n              <span className=\"text-success font600 mx-1\">\n                {`${invoiceGrandAmountPaid.toLocaleString()} UGX`}\n              </span>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col md={3} className=\"mb-2\">\n          <Card>\n            <Card.Body>\n              <Card.Text className=\"text-xs font600 mb-2\">\n                TOTAL INVOICE AMOUNT DUE\n              </Card.Text>\n              <span className=\"text-danger font600 mx-1\">\n                {`${invoiceGrandAmountDue.toLocaleString()} UGX`}\n              </span>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col md={3} className=\"mb-2\">\n          <Card>\n            <Card.Body>\n              <Card.Text className=\"text-xs font600 mb-2\">\n                PERCENTAGE COMPLETION\n              </Card.Text>\n              <span\n                className={`mx-1 font600 ${\n                  (invoiceGrandAmountPaid / invoiceGrandTotalAmount) * 100 > 70\n                    ? 'text-success'\n                    : 'text-danger'\n                }`}\n              >\n                {`${\n                  invoiceGrandTotalAmount !== 0\n                    ? parseInt(\n                        invoiceGrandAmountPaid / invoiceGrandTotalAmount,\n                        10\n                      ) * 100\n                    : 0\n                } %`}\n              </span>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <div className=\"border mt-2\">\n        <Card.Header className=\"py-2  text-secondary text-sm font600\">\n          MY INVOICES/BILLS\n          <div className=\"card-options\">\n            <ReloadButton loading={loading} onClick={() => getInvoices()} />\n          </div>\n        </Card.Header>\n        <DataTable\n          data={invoices}\n          noHeader\n          noTableHead\n          progressPending={loading && isEmpty(invoices)}\n          progressComponent={<DataSpinner />}\n          expandableRows\n          columns={[\n            {\n              name: 'ACADEMIC YEAR',\n              wrap: true,\n              cell(transaction) {\n                const {\n                  semester,\n                  academic_year: academicYear,\n                  programme_study_years: studyYear,\n                } = transaction;\n                return (\n                  <>\n                    <span className=\"font600 text-info\">\n                      <FaPaperclip className=\"me-1\" />\n                      {`${studyYear} - ${semester} - ${academicYear}`}\n                    </span>\n                  </>\n                );\n              },\n            },\n          ]}\n          noDataComponent={\n            <DataNotFound message=\"YOU HAVE NO INVOICE HISTORY\" />\n          }\n          expandableRowsComponent={<Invoice />}\n          expandableRowExpanded={(row, index) => index === 1}\n          expandOnRowClicked\n          striped\n          expandableIcon={{\n            expanded: <FaMinus className=\"text-info\" />,\n            collapsed: <FaPlus className=\"text-info\" />,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default MyInvoices;\n"]},"metadata":{},"sourceType":"module"}