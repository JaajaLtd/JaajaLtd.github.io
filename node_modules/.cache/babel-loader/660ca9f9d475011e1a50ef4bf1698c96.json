{"ast":null,"code":"import { takeLatest, fork, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { enrollmentActions, registrationActions } from '../../actions';\n\nfunction* getRegistrationEvent(actions) {\n  try {\n    const response = yield axios({\n      url: '/student-portal/registration/event',\n      method: 'GET',\n      params: actions.data\n    });\n    yield put({\n      type: registrationActions.GET_REGISTRATION_EVENT_SUCCESS,\n      data: response.data\n    });\n  } catch (error) {\n    yield put({\n      type: registrationActions.GET_REGISTRATION_EVENT_ERROR,\n      error: error.data\n    });\n  }\n}\n\nfunction* getRegistrationHistory(actions) {\n  try {\n    const response = yield axios({\n      url: `/student-portal/registration/history/${actions.studentProgrammeId}`,\n      method: 'GET'\n    });\n    yield put({\n      type: registrationActions.GET_REGISTRATION_HISTORY_SUCCESS,\n      data: response.data\n    });\n  } catch (error) {\n    yield put({\n      type: registrationActions.GET_REGISTRATION_HISTORY_SUCCESS,\n      error: error.data\n    });\n  }\n}\n\nfunction* registerStudent(actions) {\n  try {\n    const response = yield axios({\n      url: '/student-portal/registration/event/register',\n      method: 'POST',\n      data: actions.data\n    });\n    yield put({\n      type: registrationActions.REGISTER_STUDENT_SUCCESS,\n      data: response.data\n    });\n    yield put({\n      type: enrollmentActions.GET_CURRENT_EVENTS_REQUEST\n    });\n  } catch (error) {\n    yield put({\n      type: registrationActions.REGISTER_STUDENT_ERROR,\n      error: error.data\n    });\n  }\n}\n\nfunction* getCourseUnits(actions) {\n  try {\n    const response = yield axios({\n      url: `/student-portal/registration/course-units/${actions.programmeId}`,\n      method: 'GET',\n      params: actions.data\n    });\n    yield put({\n      type: registrationActions.GET_COURSE_UNITS_SUCCESS,\n      data: response.data\n    });\n  } catch (error) {\n    yield put({\n      type: registrationActions.GET_COURSE_UNITS_ERROR,\n      error: error.data\n    });\n  }\n}\n\nfunction* watchGetRegistrationEvent() {\n  yield takeLatest(registrationActions.GET_REGISTRATION_EVENT_REQUEST, getRegistrationEvent);\n}\n\nfunction* watchGetRegistrationHistory() {\n  yield takeLatest(registrationActions.GET_REGISTRATION_HISTORY_REQUEST, getRegistrationHistory);\n}\n\nfunction* watchRegisterStudent() {\n  yield takeLatest(registrationActions.REGISTER_STUDENT_REQUEST, registerStudent);\n}\n\nfunction* watchGetCourseUnits() {\n  yield takeLatest(registrationActions.GET_COURSE_UNITS_REQUEST, getCourseUnits);\n}\n\nconst forkFunctions = [fork(watchGetRegistrationEvent), fork(watchGetRegistrationHistory), fork(watchRegisterStudent), fork(watchGetCourseUnits)];\nexport default forkFunctions;","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis-front/src/config/saga/registration/index.js"],"names":["takeLatest","fork","put","axios","enrollmentActions","registrationActions","getRegistrationEvent","actions","response","url","method","params","data","type","GET_REGISTRATION_EVENT_SUCCESS","error","GET_REGISTRATION_EVENT_ERROR","getRegistrationHistory","studentProgrammeId","GET_REGISTRATION_HISTORY_SUCCESS","registerStudent","REGISTER_STUDENT_SUCCESS","GET_CURRENT_EVENTS_REQUEST","REGISTER_STUDENT_ERROR","getCourseUnits","programmeId","GET_COURSE_UNITS_SUCCESS","GET_COURSE_UNITS_ERROR","watchGetRegistrationEvent","GET_REGISTRATION_EVENT_REQUEST","watchGetRegistrationHistory","GET_REGISTRATION_HISTORY_REQUEST","watchRegisterStudent","REGISTER_STUDENT_REQUEST","watchGetCourseUnits","GET_COURSE_UNITS_REQUEST","forkFunctions"],"mappings":"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","sourcesContent":["import { takeLatest, fork, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { enrollmentActions, registrationActions } from '../../actions';\n\nfunction* getRegistrationEvent(actions) {\n  try {\n    const response = yield axios({\n      url: '/student-portal/registration/event',\n      method: 'GET',\n      params: actions.data,\n    });\n    yield put({\n      type: registrationActions.GET_REGISTRATION_EVENT_SUCCESS,\n      data: response.data,\n    });\n  } catch (error) {\n    yield put({\n      type: registrationActions.GET_REGISTRATION_EVENT_ERROR,\n      error: error.data,\n    });\n  }\n}\n\nfunction* getRegistrationHistory(actions) {\n  try {\n    const response = yield axios({\n      url: `/student-portal/registration/history/${actions.studentProgrammeId}`,\n      method: 'GET',\n    });\n    yield put({\n      type: registrationActions.GET_REGISTRATION_HISTORY_SUCCESS,\n      data: response.data,\n    });\n  } catch (error) {\n    yield put({\n      type: registrationActions.GET_REGISTRATION_HISTORY_SUCCESS,\n      error: error.data,\n    });\n  }\n}\n\nfunction* registerStudent(actions) {\n  try {\n    const response = yield axios({\n      url: '/student-portal/registration/event/register',\n      method: 'POST',\n      data: actions.data,\n    });\n    yield put({\n      type: registrationActions.REGISTER_STUDENT_SUCCESS,\n      data: response.data,\n    });\n    yield put({\n      type: enrollmentActions.GET_CURRENT_EVENTS_REQUEST,\n    });\n  } catch (error) {\n    yield put({\n      type: registrationActions.REGISTER_STUDENT_ERROR,\n      error: error.data,\n    });\n  }\n}\n\nfunction* getCourseUnits(actions) {\n  try {\n    const response = yield axios({\n      url: `/student-portal/registration/course-units/${actions.programmeId}`,\n      method: 'GET',\n      params: actions.data,\n    });\n    yield put({\n      type: registrationActions.GET_COURSE_UNITS_SUCCESS,\n      data: response.data,\n    });\n  } catch (error) {\n    yield put({\n      type: registrationActions.GET_COURSE_UNITS_ERROR,\n      error: error.data,\n    });\n  }\n}\n\nfunction* watchGetRegistrationEvent() {\n  yield takeLatest(\n    registrationActions.GET_REGISTRATION_EVENT_REQUEST,\n    getRegistrationEvent\n  );\n}\n\nfunction* watchGetRegistrationHistory() {\n  yield takeLatest(\n    registrationActions.GET_REGISTRATION_HISTORY_REQUEST,\n    getRegistrationHistory\n  );\n}\n\nfunction* watchRegisterStudent() {\n  yield takeLatest(\n    registrationActions.REGISTER_STUDENT_REQUEST,\n    registerStudent\n  );\n}\n\nfunction* watchGetCourseUnits() {\n  yield takeLatest(\n    registrationActions.GET_COURSE_UNITS_REQUEST,\n    getCourseUnits\n  );\n}\n\nconst forkFunctions = [\n  fork(watchGetRegistrationEvent),\n  fork(watchGetRegistrationHistory),\n  fork(watchRegisterStudent),\n  fork(watchGetCourseUnits),\n];\n\nexport default forkFunctions;\n"]},"metadata":{},"sourceType":"module"}