{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis-front/src/containers/Dashboard/Header.jsx\",\n    _s = $RefreshSig$();\n\nimport { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Button } from 'react-bootstrap';\nimport { FaUserCheck, FaUserTimes } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, DataSpinner } from '../../components/common';\nimport { appActions, enrollmentActions } from '../../config/actions';\nimport ProgrammeTab from './ProgrammeTab';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Header = () => {\n  _s();\n\n  var _currentSemester$acad, _currentSemester$acad2, _currentSemester$seme;\n\n  const dispatch = useDispatch();\n  const {\n    gettingCurrentSemester,\n    currentEvents\n  } = useSelector(state => state.enrollment);\n  const {\n    currentStudentProgramme,\n    accountBalance\n  } = useSelector(state => state.auth);\n  const {\n    currentSemester\n  } = useSelector(state => state.app);\n  const [isRegistered, setIsRegistered] = useState(false);\n\n  const reloadCurrentSemester = () => {\n    dispatch(appActions.getCurrentSemester());\n    if (!isEmpty(currentStudentProgramme)) dispatch(enrollmentActions.getCurrentEvents(currentStudentProgramme === null || currentStudentProgramme === void 0 ? void 0 : currentStudentProgramme.id));\n  };\n\n  useEffect(() => {\n    if (isEmpty(currentSemester)) {\n      reloadCurrentSemester();\n    }\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(currentEvents)) {\n      setIsRegistered(!isEmpty(currentEvents.studentRegistration));\n    }\n  }, [currentEvents]);\n  const buttonOptions = [{\n    id: 1,\n    title: 'Current Yr',\n    value: currentSemester === null || currentSemester === void 0 ? void 0 : (_currentSemester$acad = currentSemester.academicYear) === null || _currentSemester$acad === void 0 ? void 0 : (_currentSemester$acad2 = _currentSemester$acad.academicYear) === null || _currentSemester$acad2 === void 0 ? void 0 : _currentSemester$acad2.metadata_value,\n    color: 'info'\n  }, {\n    id: 2,\n    title: 'Current Sem',\n    value: currentSemester === null || currentSemester === void 0 ? void 0 : (_currentSemester$seme = currentSemester.semester) === null || _currentSemester$seme === void 0 ? void 0 : _currentSemester$seme.metadata_value,\n    color: 'info'\n  }, {\n    id: 3,\n    title: 'Reg. Status',\n    value: isRegistered ? 'REGISTERED' : 'NOT REGISTERED',\n    color: isRegistered ? 'success' : 'danger',\n    icon: isRegistered ? /*#__PURE__*/_jsxDEV(FaUserCheck, {\n      className: \"me-1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(FaUserTimes, {\n      className: \"me-1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ProgrammeTab, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: \"border-top border-bottom border-start-0 border-end-0\",\n      children: /*#__PURE__*/_jsxDEV(Card.Header, {\n        className: \"py-2 px-3 border-0 mb-0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Header, \"aTWHW7Ej8yWQg6ULH9FmC9+SERk=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = Header;\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis-front/src/containers/Dashboard/Header.jsx"],"names":["isEmpty","React","useEffect","useState","ButtonGroup","Card","Button","FaUserCheck","FaUserTimes","useDispatch","useSelector","AlertMessage","DataSpinner","appActions","enrollmentActions","ProgrammeTab","Header","dispatch","gettingCurrentSemester","currentEvents","state","enrollment","currentStudentProgramme","accountBalance","auth","currentSemester","app","isRegistered","setIsRegistered","reloadCurrentSemester","getCurrentSemester","getCurrentEvents","id","studentRegistration","buttonOptions","title","value","academicYear","metadata_value","color","semester","icon"],"mappings":"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","sourcesContent":["import { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Button } from 'react-bootstrap';\nimport { FaUserCheck, FaUserTimes } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, DataSpinner } from '../../components/common';\nimport { appActions, enrollmentActions } from '../../config/actions';\nimport ProgrammeTab from './ProgrammeTab';\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const { gettingCurrentSemester, currentEvents } = useSelector(\n    (state) => state.enrollment\n  );\n  const { currentStudentProgramme, accountBalance } = useSelector(\n    (state) => state.auth\n  );\n  const { currentSemester } = useSelector((state) => state.app);\n  const [isRegistered, setIsRegistered] = useState(false);\n\n  const reloadCurrentSemester = () => {\n    dispatch(appActions.getCurrentSemester());\n    if (!isEmpty(currentStudentProgramme))\n      dispatch(enrollmentActions.getCurrentEvents(currentStudentProgramme?.id));\n  };\n\n  useEffect(() => {\n    if (isEmpty(currentSemester)) {\n      reloadCurrentSemester();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(currentEvents)) {\n      setIsRegistered(!isEmpty(currentEvents.studentRegistration));\n    }\n  }, [currentEvents]);\n\n  const buttonOptions = [\n    {\n      id: 1,\n      title: 'Current Yr',\n      value: currentSemester?.academicYear?.academicYear?.metadata_value,\n      color: 'info',\n    },\n    {\n      id: 2,\n      title: 'Current Sem',\n      value: currentSemester?.semester?.metadata_value,\n      color: 'info',\n    },\n    {\n      id: 3,\n      title: 'Reg. Status',\n      value: isRegistered ? 'REGISTERED' : 'NOT REGISTERED',\n      color: isRegistered ? 'success' : 'danger',\n      icon: isRegistered ? (\n        <FaUserCheck className=\"me-1\" />\n      ) : (\n        <FaUserTimes className=\"me-1\" />\n      ),\n    },\n  ];\n  return (\n    <>\n      <ProgrammeTab />\n      <Card className=\"border-top border-bottom border-start-0 border-end-0\">\n        <Card.Header className=\"py-2 px-3 border-0 mb-0\">\n        </Card.Header>\n      </Card>\n    </>\n  );\n};\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}