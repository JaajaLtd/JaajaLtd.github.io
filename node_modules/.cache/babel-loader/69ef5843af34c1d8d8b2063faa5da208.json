{"ast":null,"code":"import _toConsumableArray from\"/Users/admin/Documents/react-projects/hesmis/hesmis-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/admin/Documents/react-projects/hesmis/hesmis-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/admin/Documents/react-projects/hesmis/hesmis-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{flatten,isEmpty,orderBy,pick,toUpper}from'lodash';export var formatUserSelectOption=function formatUserSelectOption(){var users=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];var usersList=[];if(typeof users==='object'){users.forEach(function(user){usersList.push({label:\"\".concat(user.salutation?user.salutation:'',\" \").concat(user.firstname,\" \").concat(user.lastname),value:user.id});});}return usersList;};export var formatColleges=function formatColleges(colleges){var collegesList=[];colleges.forEach(function(college){collegesList.push({label:\"\".concat(college.college_title),value:college.id});});return collegesList;};export var formatDepartments=function formatDepartments(departments){var departmentOptions=[];departments===null||departments===void 0?void 0:departments.forEach(function(department){departmentOptions.push({label:\"(\".concat(department===null||department===void 0?void 0:department.department_code,\") - \").concat(department===null||department===void 0?void 0:department.department_title),value:department.id});});return departmentOptions;};export var formatFaculties=function formatFaculties(faculties){var facultiesList=[];faculties.forEach(function(faculty){facultiesList.push({label:\"\".concat(faculty.faculty_title),value:faculty.id});});return facultiesList;};export var formatSubjects=function formatSubjects(subjects){var subjectOptions=[];subjects.forEach(function(subject){subjectOptions.push({label:\"(\".concat(subject.subject_code,\") - \").concat(subject.subject_name),value:subject.id});});return subjectOptions;};export var formatMetadata=function formatMetadata(metadata,fieldName){var valueKey=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var formattedMetadataValues=[];metadata.forEach(function(data){if(toUpper(data.metadata_name)===toUpper(fieldName)){data.metadataValues.forEach(function(value){formattedMetadataValues.push({label:value.metadata_value,value:valueKey?value[valueKey]:value.id});});}});return orderBy(formattedMetadataValues,['label'],'asc');};export var formatSpecialization=function formatSpecialization(specializations){var specializationOptions=[];specializations.forEach(function(specialization){specializationOptions.push({label:\"(\".concat(specialization.specialization_code,\") - \").concat(specialization.specialization_title),value:specialization.id});});return specializationOptions;};export var formatProgrammes=function formatProgrammes(programmes){var valueField=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var formattedOptions=[];programmes.forEach(function(programme){formattedOptions.push({label:\"(\".concat(toUpper(programme.programme_code),\") - \").concat(toUpper(programme.programme_title)),value:valueField?programme[valueField]:programme.id});});return formattedOptions;};export var formatProgrammeWithCategories=function formatProgrammeWithCategories(programmes){var formattedOptions=[];programmes.forEach(function(programme){formattedOptions.push({label:\"(\".concat(toUpper(programme.programme_code),\") - \").concat(toUpper(programme.programme_title)),value:programme.programme_id});});return formattedOptions;};export var formatProgrammeVersions=function formatProgrammeVersions(programmeVersions){var formattedOptions=[];programmeVersions.forEach(function(version){formattedOptions.push({label:toUpper(version.version_title),value:version.id});});return formattedOptions;};export var formatProgrammeVersionModules=function formatProgrammeVersionModules(versionModules){var formattedOptions=[];versionModules.forEach(function(versionModule){var _versionModule$module;formattedOptions.push({label:versionModule===null||versionModule===void 0?void 0:(_versionModule$module=versionModule.module)===null||_versionModule$module===void 0?void 0:_versionModule$module.metadata_value,value:versionModule===null||versionModule===void 0?void 0:versionModule.module_id});});return orderBy(formattedOptions,['label']);};export var formatProgrammeVersionModuleOptions=function formatProgrammeVersionModuleOptions(moduleOptions){var formattedOptions=[];moduleOptions.forEach(function(moduleOption){var _moduleOption$option;formattedOptions.push({label:moduleOption===null||moduleOption===void 0?void 0:(_moduleOption$option=moduleOption.option)===null||_moduleOption$option===void 0?void 0:_moduleOption$option.metadata_value,value:moduleOption===null||moduleOption===void 0?void 0:moduleOption.option_id});});return orderBy(formattedOptions,['label']);};export var formatProgrammeVersionPlans=function formatProgrammeVersionPlans(plans){var formattedOptions=[];plans.forEach(function(plan){var _plan$ProgrammeVersio;formattedOptions.push({label:plan.metadata_value,value:plan===null||plan===void 0?void 0:(_plan$ProgrammeVersio=plan.ProgrammeVersionPlan)===null||_plan$ProgrammeVersio===void 0?void 0:_plan$ProgrammeVersio.id});});return formattedOptions;};export var formatProgrammeVersionSubjectCombinationCategories=function formatProgrammeVersionSubjectCombinationCategories(combinationCategories){var value=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var label=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;var formattedOptions=[];var categories=combinationCategories||[];categories.forEach(function(combinationCategory){formattedOptions.push({label:label?combinationCategory[label]:combinationCategory.category.metadata_value,value:value?combinationCategory[value]:combinationCategory===null||combinationCategory===void 0?void 0:combinationCategory.id});});return formattedOptions;};export var formatGrading=function formatGrading(grading){var formattedGrading=[];grading.forEach(function(grade){formattedGrading.push({label:grade.grading_code,value:grade.id});});return formattedGrading;};export var removeEmptyOrNullObject=function removeEmptyOrNullObject(obj){Object.keys(obj).forEach(function(k){return obj[k]&&typeof obj[k]==='object'&&removeEmptyOrNullObject(obj[k])||!obj[k]&&obj[k]!==undefined&&delete obj[k];});return obj;};export var formatSubjectCombinationCategories=function formatSubjectCombinationCategories(categories){var formattedCategories=[];categories.forEach(function(category){formattedCategories.push({label:category.subject_combination_category,value:category.subject_combination_category_id});});return formattedCategories;};export var formatAdmissionSchemes=function formatAdmissionSchemes(schemes){var formattedSchemes=[];schemes.forEach(function(scheme){formattedSchemes.push({label:scheme.scheme_name,value:scheme.id});});return formattedSchemes;};export var formatAdmissionForms=function formatAdmissionForms(forms){var formattedForms=[];forms.forEach(function(form){formattedForms.push({label:form.form_name,value:form.id});});return formattedForms;};export var getObjectValues=function getObjectValues(objectValues){Object.keys(objectValues).forEach(function(objectKey){if(!isEmpty(objectValues[objectKey])&&typeof objectValues[objectKey]==='object'){if(Array.isArray(objectValues[objectKey])){objectValues[objectKey]=objectValues[objectKey].map(function(object){if(typeof object==='object'){if(Array.isArray(object)){return getObjectValues(object);}return object.value;}return object;});}else if(typeof objectValues[objectKey]==='object'){objectValues[objectKey]=objectValues[objectKey].value;}}});return objectValues;};export var formatRoleGroups=function formatRoleGroups(roleGroups){var formattedGroups=[];roleGroups.forEach(function(group){formattedGroups.push({label:group.role_group_title,value:group.id});});return formattedGroups;};export var formatUserRoles=function formatUserRoles(userRoles){var formattedRoles=[];userRoles.forEach(function(role){formattedRoles.push({label:role.role_title,value:role.id});});return formattedRoles;};export var formatSecurityProfile=function formatSecurityProfile(securityProfiles){var formattedProfiles=[];securityProfiles.forEach(function(profile){formattedProfiles.push({label:profile.security_profile_name,value:profile.id});});return formattedProfiles;};export var formatSystemApps=function formatSystemApps(applications){var formattedApps=[];applications.forEach(function(app){formattedApps.push({label:app.app_name,value:app.id});});return formattedApps;};export var formatAppFunctions=function formatAppFunctions(allApps,appId){var findApp=allApps.filter(function(app){return app.id===appId;});var formattedFunctions=[];if(findApp){findApp[0].app_functions.forEach(function(appFunction){formattedFunctions.push({label:appFunction.function_name,value:appFunction.id});});}return formattedFunctions;};export var searchStringInArrayObject=function searchStringInArrayObject(data,fields,valueToSearch){var searchedValue=[];if(typeof fields==='string'){data.forEach(function(datum){var search=toUpper(datum[fields]).includes(toUpper(valueToSearch));if(search===true)searchedValue.push(datum);});}else{fields.forEach(function(field){data.forEach(function(datum){var search=toUpper(datum[field]).includes(toUpper(valueToSearch));if(search===true)searchedValue.push(datum);});});}return searchedValue;};export var generateFullHeadedBy=function generateFullHeadedBy(arrayData){var concatenatedHeadedBy=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'headed_by';var generatedArray=arrayData.filter(function(singleObject){// format singleObject head field by joining first and last name\nsingleObject[concatenatedHeadedBy]=singleObject.headedBy?\"\".concat(singleObject.headedBy.firstname,\" \").concat(singleObject.headedBy.lastname):'-';return singleObject;});return generatedArray;};export var moveKeysFromSubObjects=function moveKeysFromSubObjects(arrayOfObjects,desiredKeysObject){var formattedArray=arrayOfObjects.map(function(singleObject){Object.entries(desiredKeysObject).forEach(function(entry){var _entry=_slicedToArray(entry,2),key=_entry[0],arrayOfFields=_entry[1];var pickedObj=pick(singleObject[key],arrayOfFields);// rename keys\nObject.keys(pickedObj).forEach(function(keyName){pickedObj[\"\".concat(key,\"_\").concat(keyName)]=pickedObj[keyName];delete pickedObj[keyName];});// spread renamed keys to parent object\nreturn _objectSpread(_objectSpread({},singleObject),pickedObj);});return singleObject;});return formattedArray;};export var getDefaultSelectedValue=function getDefaultSelectedValue(selectOptions,value){// For case of isMulti Select Fields\nif(typeof value==='object'&&!isEmpty(value)){var formattedSelectOptions=[];value.forEach(function(val){var findOption=selectOptions.find(function(option){return toString(option.value)===toString(val);});if(findOption)formattedSelectOptions.push(findOption);});return formattedSelectOptions;}// For Single Selects\nvar findOption=selectOptions.find(function(option){return option.value===value;});return findOption||'';};export var getUnAssignedApps=function getUnAssignedApps(allApps,roleGroups){var apps=[];roleGroups.forEach(function(group){return apps.push(group.apps.map(function(app){return app.id;}));});var unassignedApps=allApps.filter(function(app){return flatten(apps).includes(app.id)===false;});return unassignedApps;};export var formatAcademicYears=function formatAcademicYears(academicYears){var formattedAcademicYears=[];academicYears.forEach(function(academicYear){formattedAcademicYears.push({label:academicYear.academicYear.metadata_value,value:academicYear.id});});return orderBy(formattedAcademicYears,['label'],'desc');};export var formatStudyYears=function formatStudyYears(studyYears){var formattedStudyYears=[];studyYears.forEach(function(studyYear){formattedStudyYears.push({label:studyYear.study_year,value:studyYear.id});});return formattedStudyYears;};export var formatFeesWaivers=function formatFeesWaivers(feesWaivers){var formattedWaivers=[];feesWaivers.forEach(function(feesWaiver){formattedWaivers.push({label:feesWaiver.fees_waiver_name,value:feesWaiver.id});});return formattedWaivers;};export var formatProgrammeTypes=function formatProgrammeTypes(programmeTypes){var formattedType=[];if(!isEmpty(programmeTypes)){programmeTypes.forEach(function(programmeType){formattedType.push({label:programmeType.programme_type,value:programmeType.programme_type_id});});}return formattedType;};export var formatOtherFeesContext=function formatOtherFeesContext(otherFeesContext){var queryData={};Object.keys(otherFeesContext).forEach(function(context){queryData[context]=otherFeesContext[context].value;});return queryData;};export var generalFormatter=function generalFormatter(objectsArray,label,value){var formattedData=[];if(!isEmpty(objectsArray)){objectsArray.forEach(function(programmeType){formattedData.push({label:programmeType[label],value:programmeType[value]});});return formattedData;}return[];};export var getAcademicYearMetaData=function getAcademicYearMetaData(academicYearObject,metadataName){var campusList=[];if(!isEmpty(academicYearObject)){academicYearObject.semesters.forEach(function(semester){campusList=[].concat(_toConsumableArray(campusList),_toConsumableArray(semester[metadataName]));});return campusList;}return[];};export var formatNestedPlan=function formatNestedPlan(plans){var formattedPlans=[];if(!isEmpty(plans)){plans.forEach(function(plan){formattedPlans.push({label:plan.metadata_value,value:plan.ProgrammeVersionPlan.id});});}return formattedPlans;};export var hasAcademicUnit=function hasAcademicUnit(institutionStructure,unit){if(!isEmpty(institutionStructure)){var academicUnits=institutionStructure===null||institutionStructure===void 0?void 0:institutionStructure.academic_units;if(typeof academicUnits==='object'){var formattedUnits=academicUnits.map(function(academicUnit){return toUpper(academicUnit);});return formattedUnits.includes(toUpper(unit));}}return false;};export var getOptionsValues=function getOptionsValues(input){var output=[];if(!isEmpty(input)){input.forEach(function(elem){output.push(elem.value);});}return output;};export var toMoney=new Intl.NumberFormat().format;","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/helpers/dataFormatter.js"],"names":["flatten","isEmpty","orderBy","pick","toUpper","formatUserSelectOption","users","usersList","forEach","user","push","label","salutation","firstname","lastname","value","id","formatColleges","colleges","collegesList","college","college_title","formatDepartments","departments","departmentOptions","department","department_code","department_title","formatFaculties","faculties","facultiesList","faculty","faculty_title","formatSubjects","subjects","subjectOptions","subject","subject_code","subject_name","formatMetadata","metadata","fieldName","valueKey","formattedMetadataValues","data","metadata_name","metadataValues","metadata_value","formatSpecialization","specializations","specializationOptions","specialization","specialization_code","specialization_title","formatProgrammes","programmes","valueField","formattedOptions","programme","programme_code","programme_title","formatProgrammeWithCategories","programme_id","formatProgrammeVersions","programmeVersions","version","version_title","formatProgrammeVersionModules","versionModules","versionModule","module","module_id","formatProgrammeVersionModuleOptions","moduleOptions","moduleOption","option","option_id","formatProgrammeVersionPlans","plans","plan","ProgrammeVersionPlan","formatProgrammeVersionSubjectCombinationCategories","combinationCategories","categories","combinationCategory","category","formatGrading","grading","formattedGrading","grade","grading_code","removeEmptyOrNullObject","obj","Object","keys","k","undefined","formatSubjectCombinationCategories","formattedCategories","subject_combination_category","subject_combination_category_id","formatAdmissionSchemes","schemes","formattedSchemes","scheme","scheme_name","formatAdmissionForms","forms","formattedForms","form","form_name","getObjectValues","objectValues","objectKey","Array","isArray","map","object","formatRoleGroups","roleGroups","formattedGroups","group","role_group_title","formatUserRoles","userRoles","formattedRoles","role","role_title","formatSecurityProfile","securityProfiles","formattedProfiles","profile","security_profile_name","formatSystemApps","applications","formattedApps","app","app_name","formatAppFunctions","allApps","appId","findApp","filter","formattedFunctions","app_functions","appFunction","function_name","searchStringInArrayObject","fields","valueToSearch","searchedValue","datum","search","includes","field","generateFullHeadedBy","arrayData","concatenatedHeadedBy","generatedArray","singleObject","headedBy","moveKeysFromSubObjects","arrayOfObjects","desiredKeysObject","formattedArray","entries","entry","key","arrayOfFields","pickedObj","keyName","getDefaultSelectedValue","selectOptions","formattedSelectOptions","val","findOption","find","toString","getUnAssignedApps","apps","unassignedApps","formatAcademicYears","academicYears","formattedAcademicYears","academicYear","formatStudyYears","studyYears","formattedStudyYears","studyYear","study_year","formatFeesWaivers","feesWaivers","formattedWaivers","feesWaiver","fees_waiver_name","formatProgrammeTypes","programmeTypes","formattedType","programmeType","programme_type","programme_type_id","formatOtherFeesContext","otherFeesContext","queryData","context","generalFormatter","objectsArray","formattedData","getAcademicYearMetaData","academicYearObject","metadataName","campusList","semesters","semester","formatNestedPlan","formattedPlans","hasAcademicUnit","institutionStructure","unit","academicUnits","academic_units","formattedUnits","academicUnit","getOptionsValues","input","output","elem","toMoney","Intl","NumberFormat","format"],"mappings":"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","sourcesContent":["import { flatten, isEmpty, orderBy, pick, toUpper } from 'lodash';\n\nexport const formatUserSelectOption = (users = []) => {\n  const usersList = [];\n  if (typeof users === 'object') {\n    users.forEach((user) => {\n      usersList.push({\n        label: `${user.salutation ? user.salutation : ''} ${user.firstname} ${\n          user.lastname\n        }`,\n        value: user.id,\n      });\n    });\n  }\n  return usersList;\n};\n\nexport const formatColleges = (colleges) => {\n  const collegesList = [];\n  colleges.forEach((college) => {\n    collegesList.push({\n      label: `${college.college_title}`,\n      value: college.id,\n    });\n  });\n  return collegesList;\n};\n\nexport const formatDepartments = (departments) => {\n  const departmentOptions = [];\n  departments?.forEach((department) => {\n    departmentOptions.push({\n      label: `(${department?.department_code}) - ${department?.department_title}`,\n      value: department.id,\n    });\n  });\n  return departmentOptions;\n};\n\nexport const formatFaculties = (faculties) => {\n  const facultiesList = [];\n  faculties.forEach((faculty) => {\n    facultiesList.push({\n      label: `${faculty.faculty_title}`,\n      value: faculty.id,\n    });\n  });\n  return facultiesList;\n};\n\nexport const formatSubjects = (subjects) => {\n  const subjectOptions = [];\n  subjects.forEach((subject) => {\n    subjectOptions.push({\n      label: `(${subject.subject_code}) - ${subject.subject_name}`,\n      value: subject.id,\n    });\n  });\n  return subjectOptions;\n};\n\nexport const formatMetadata = (metadata, fieldName, valueKey = null) => {\n  const formattedMetadataValues = [];\n  metadata.forEach((data) => {\n    if (toUpper(data.metadata_name) === toUpper(fieldName)) {\n      data.metadataValues.forEach((value) => {\n        formattedMetadataValues.push({\n          label: value.metadata_value,\n          value: valueKey ? value[valueKey] : value.id,\n        });\n      });\n    }\n  });\n  return orderBy(formattedMetadataValues, ['label'], 'asc');\n};\n\nexport const formatSpecialization = (specializations) => {\n  const specializationOptions = [];\n  specializations.forEach((specialization) => {\n    specializationOptions.push({\n      label: `(${specialization.specialization_code}) - ${specialization.specialization_title}`,\n      value: specialization.id,\n    });\n  });\n  return specializationOptions;\n};\n\nexport const formatProgrammes = (programmes, valueField = null) => {\n  const formattedOptions = [];\n  programmes.forEach((programme) => {\n    formattedOptions.push({\n      label: `(${toUpper(programme.programme_code)}) - ${toUpper(\n        programme.programme_title\n      )}`,\n      value: valueField ? programme[valueField] : programme.id,\n    });\n  });\n  return formattedOptions;\n};\n\nexport const formatProgrammeWithCategories = (programmes) => {\n  const formattedOptions = [];\n  programmes.forEach((programme) => {\n    formattedOptions.push({\n      label: `(${toUpper(programme.programme_code)}) - ${toUpper(\n        programme.programme_title\n      )}`,\n      value: programme.programme_id,\n    });\n  });\n  return formattedOptions;\n};\n\nexport const formatProgrammeVersions = (programmeVersions) => {\n  const formattedOptions = [];\n  programmeVersions.forEach((version) => {\n    formattedOptions.push({\n      label: toUpper(version.version_title),\n      value: version.id,\n    });\n  });\n  return formattedOptions;\n};\n\nexport const formatProgrammeVersionModules = (versionModules) => {\n  const formattedOptions = [];\n  versionModules.forEach((versionModule) => {\n    formattedOptions.push({\n      label: versionModule?.module?.metadata_value,\n      value: versionModule?.module_id,\n    });\n  });\n  return orderBy(formattedOptions, ['label']);\n};\n\nexport const formatProgrammeVersionModuleOptions = (moduleOptions) => {\n  const formattedOptions = [];\n  moduleOptions.forEach((moduleOption) => {\n    formattedOptions.push({\n      label: moduleOption?.option?.metadata_value,\n      value: moduleOption?.option_id,\n    });\n  });\n  return orderBy(formattedOptions, ['label']);\n};\n\nexport const formatProgrammeVersionPlans = (plans) => {\n  const formattedOptions = [];\n  plans.forEach((plan) => {\n    formattedOptions.push({\n      label: plan.metadata_value,\n      value: plan?.ProgrammeVersionPlan?.id,\n    });\n  });\n  return formattedOptions;\n};\n\nexport const formatProgrammeVersionSubjectCombinationCategories = (\n  combinationCategories,\n  value = null,\n  label = null\n) => {\n  const formattedOptions = [];\n  const categories = combinationCategories || [];\n  categories.forEach((combinationCategory) => {\n    formattedOptions.push({\n      label: label\n        ? combinationCategory[label]\n        : combinationCategory.category.metadata_value,\n      value: value ? combinationCategory[value] : combinationCategory?.id,\n    });\n  });\n  return formattedOptions;\n};\n\nexport const formatGrading = (grading) => {\n  const formattedGrading = [];\n  grading.forEach((grade) => {\n    formattedGrading.push({\n      label: grade.grading_code,\n      value: grade.id,\n    });\n  });\n  return formattedGrading;\n};\n\nexport const removeEmptyOrNullObject = (obj) => {\n  Object.keys(obj).forEach(\n    (k) =>\n      (obj[k] &&\n        typeof obj[k] === 'object' &&\n        removeEmptyOrNullObject(obj[k])) ||\n      (!obj[k] && obj[k] !== undefined && delete obj[k])\n  );\n  return obj;\n};\n\nexport const formatSubjectCombinationCategories = (categories) => {\n  const formattedCategories = [];\n  categories.forEach((category) => {\n    formattedCategories.push({\n      label: category.subject_combination_category,\n      value: category.subject_combination_category_id,\n    });\n  });\n  return formattedCategories;\n};\n\nexport const formatAdmissionSchemes = (schemes) => {\n  const formattedSchemes = [];\n  schemes.forEach((scheme) => {\n    formattedSchemes.push({\n      label: scheme.scheme_name,\n      value: scheme.id,\n    });\n  });\n  return formattedSchemes;\n};\n\nexport const formatAdmissionForms = (forms) => {\n  const formattedForms = [];\n  forms.forEach((form) => {\n    formattedForms.push({\n      label: form.form_name,\n      value: form.id,\n    });\n  });\n  return formattedForms;\n};\n\nexport const getObjectValues = (objectValues) => {\n  Object.keys(objectValues).forEach((objectKey) => {\n    if (\n      !isEmpty(objectValues[objectKey]) &&\n      typeof objectValues[objectKey] === 'object'\n    ) {\n      if (Array.isArray(objectValues[objectKey])) {\n        objectValues[objectKey] = objectValues[objectKey].map((object) => {\n          if (typeof object === 'object') {\n            if (Array.isArray(object)) {\n              return getObjectValues(object);\n            }\n            return object.value;\n          }\n          return object;\n        });\n      } else if (typeof objectValues[objectKey] === 'object') {\n        objectValues[objectKey] = objectValues[objectKey].value;\n      }\n    }\n  });\n  return objectValues;\n};\n\nexport const formatRoleGroups = (roleGroups) => {\n  const formattedGroups = [];\n  roleGroups.forEach((group) => {\n    formattedGroups.push({\n      label: group.role_group_title,\n      value: group.id,\n    });\n  });\n  return formattedGroups;\n};\n\nexport const formatUserRoles = (userRoles) => {\n  const formattedRoles = [];\n  userRoles.forEach((role) => {\n    formattedRoles.push({\n      label: role.role_title,\n      value: role.id,\n    });\n  });\n  return formattedRoles;\n};\n\nexport const formatSecurityProfile = (securityProfiles) => {\n  const formattedProfiles = [];\n  securityProfiles.forEach((profile) => {\n    formattedProfiles.push({\n      label: profile.security_profile_name,\n      value: profile.id,\n    });\n  });\n  return formattedProfiles;\n};\n\nexport const formatSystemApps = (applications) => {\n  const formattedApps = [];\n  applications.forEach((app) => {\n    formattedApps.push({\n      label: app.app_name,\n      value: app.id,\n    });\n  });\n  return formattedApps;\n};\n\nexport const formatAppFunctions = (allApps, appId) => {\n  const findApp = allApps.filter((app) => app.id === appId);\n  const formattedFunctions = [];\n  if (findApp) {\n    findApp[0].app_functions.forEach((appFunction) => {\n      formattedFunctions.push({\n        label: appFunction.function_name,\n        value: appFunction.id,\n      });\n    });\n  }\n  return formattedFunctions;\n};\n\nexport const searchStringInArrayObject = (data, fields, valueToSearch) => {\n  const searchedValue = [];\n  if (typeof fields === 'string') {\n    data.forEach((datum) => {\n      const search = toUpper(datum[fields]).includes(toUpper(valueToSearch));\n      if (search === true) searchedValue.push(datum);\n    });\n  } else {\n    fields.forEach((field) => {\n      data.forEach((datum) => {\n        const search = toUpper(datum[field]).includes(toUpper(valueToSearch));\n        if (search === true) searchedValue.push(datum);\n      });\n    });\n  }\n  return searchedValue;\n};\n\nexport const generateFullHeadedBy = (\n  arrayData,\n  concatenatedHeadedBy = 'headed_by'\n) => {\n  const generatedArray = arrayData.filter((singleObject) => {\n    // format singleObject head field by joining first and last name\n    singleObject[concatenatedHeadedBy] = singleObject.headedBy\n      ? `${singleObject.headedBy.firstname} ${singleObject.headedBy.lastname}`\n      : '-';\n    return singleObject;\n  });\n  return generatedArray;\n};\n\nexport const moveKeysFromSubObjects = (arrayOfObjects, desiredKeysObject) => {\n  const formattedArray = arrayOfObjects.map((singleObject) => {\n    Object.entries(desiredKeysObject).forEach((entry) => {\n      const [key, arrayOfFields] = entry;\n      const pickedObj = pick(singleObject[key], arrayOfFields);\n      // rename keys\n      Object.keys(pickedObj).forEach((keyName) => {\n        pickedObj[`${key}_${keyName}`] = pickedObj[keyName];\n        delete pickedObj[keyName];\n      });\n      // spread renamed keys to parent object\n      return {\n        ...singleObject,\n        ...pickedObj,\n      };\n    });\n    return singleObject;\n  });\n  return formattedArray;\n};\n\nexport const getDefaultSelectedValue = (selectOptions, value) => {\n  // For case of isMulti Select Fields\n  if (typeof value === 'object' && !isEmpty(value)) {\n    const formattedSelectOptions = [];\n    value.forEach((val) => {\n      const findOption = selectOptions.find(\n        (option) => toString(option.value) === toString(val)\n      );\n      if (findOption) formattedSelectOptions.push(findOption);\n    });\n    return formattedSelectOptions;\n  }\n\n  // For Single Selects\n  const findOption = selectOptions.find((option) => option.value === value);\n  return findOption || '';\n};\n\nexport const getUnAssignedApps = (allApps, roleGroups) => {\n  const apps = [];\n  roleGroups.forEach((group) => apps.push(group.apps.map((app) => app.id)));\n  const unassignedApps = allApps.filter(\n    (app) => flatten(apps).includes(app.id) === false\n  );\n  return unassignedApps;\n};\n\nexport const formatAcademicYears = (academicYears) => {\n  const formattedAcademicYears = [];\n  academicYears.forEach((academicYear) => {\n    formattedAcademicYears.push({\n      label: academicYear.academicYear.metadata_value,\n      value: academicYear.id,\n    });\n  });\n  return orderBy(formattedAcademicYears, ['label'], 'desc');\n};\n\nexport const formatStudyYears = (studyYears) => {\n  const formattedStudyYears = [];\n  studyYears.forEach((studyYear) => {\n    formattedStudyYears.push({\n      label: studyYear.study_year,\n      value: studyYear.id,\n    });\n  });\n  return formattedStudyYears;\n};\n\nexport const formatFeesWaivers = (feesWaivers) => {\n  const formattedWaivers = [];\n  feesWaivers.forEach((feesWaiver) => {\n    formattedWaivers.push({\n      label: feesWaiver.fees_waiver_name,\n      value: feesWaiver.id,\n    });\n  });\n  return formattedWaivers;\n};\n\nexport const formatProgrammeTypes = (programmeTypes) => {\n  const formattedType = [];\n\n  if (!isEmpty(programmeTypes)) {\n    programmeTypes.forEach((programmeType) => {\n      formattedType.push({\n        label: programmeType.programme_type,\n        value: programmeType.programme_type_id,\n      });\n    });\n  }\n  return formattedType;\n};\n\nexport const formatOtherFeesContext = (otherFeesContext) => {\n  const queryData = {};\n  Object.keys(otherFeesContext).forEach((context) => {\n    queryData[context] = otherFeesContext[context].value;\n  });\n  return queryData;\n};\n\nexport const generalFormatter = (objectsArray, label, value) => {\n  const formattedData = [];\n  if (!isEmpty(objectsArray)) {\n    objectsArray.forEach((programmeType) => {\n      formattedData.push({\n        label: programmeType[label],\n        value: programmeType[value],\n      });\n    });\n    return formattedData;\n  }\n  return [];\n};\n\nexport const getAcademicYearMetaData = (academicYearObject, metadataName) => {\n  let campusList = [];\n  if (!isEmpty(academicYearObject)) {\n    academicYearObject.semesters.forEach((semester) => {\n      campusList = [...campusList, ...semester[metadataName]];\n    });\n    return campusList;\n  }\n  return [];\n};\n\nexport const formatNestedPlan = (plans) => {\n  const formattedPlans = [];\n  if (!isEmpty(plans)) {\n    plans.forEach((plan) => {\n      formattedPlans.push({\n        label: plan.metadata_value,\n        value: plan.ProgrammeVersionPlan.id,\n      });\n    });\n  }\n  return formattedPlans;\n};\n\nexport const hasAcademicUnit = (institutionStructure, unit) => {\n  if (!isEmpty(institutionStructure)) {\n    const academicUnits = institutionStructure?.academic_units;\n    if (typeof academicUnits === 'object') {\n      const formattedUnits = academicUnits.map((academicUnit) =>\n        toUpper(academicUnit)\n      );\n      return formattedUnits.includes(toUpper(unit));\n    }\n  }\n  return false;\n};\n\nexport const getOptionsValues = (input) => {\n  const output = [];\n  if (!isEmpty(input)) {\n    input.forEach((elem) => {\n      output.push(elem.value);\n    });\n  }\n  return output;\n};\n\nexport const toMoney = new Intl.NumberFormat().format;\n"]},"metadata":{},"sourceType":"module"}