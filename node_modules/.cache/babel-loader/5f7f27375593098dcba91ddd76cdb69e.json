{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { isEmpty } from 'lodash';\nimport React, { Suspense, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { useToasts } from 'react-toast-notifications';\nimport { PageLoader } from './components/common';\nimport { appActions } from './config/actions';\nimport RoutePaths from './config/routes/RoutePaths';\nimport Dashboard from './containers/Dashboard';\nimport PageNotFound from './containers/Errors/PageNotFound';\nimport usePrevious from './containers/Hooks/usePrevious';\nimport './custom.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    addToast,\n    removeAllToasts\n  } = useToasts();\n  const {\n    serverSuccess,\n    serverError\n  } = useSelector(state => state.server);\n  const {\n    metadata,\n    institutionStructure\n  } = useSelector(state => state.app);\n  const prevState = usePrevious({\n    serverSuccess,\n    serverError\n  });\n  useEffect(() => {\n    if (isEmpty(institutionStructure)) {\n      dispatch(appActions.getInstitutionStructure());\n    }\n\n    if (isEmpty(metadata)) {\n      dispatch(appActions.getMetadata());\n    }\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(prevState)) {\n      if (!isEmpty(serverError) && serverError !== prevState.serverError) {\n        var _serverError$server;\n\n        removeAllToasts();\n        addToast(serverError === null || serverError === void 0 ? void 0 : (_serverError$server = serverError.server) === null || _serverError$server === void 0 ? void 0 : _serverError$server.message, {\n          autoDismiss: true,\n          appearance: 'error',\n          autoDismissTimeout: 6000\n        });\n      }\n\n      if (!isEmpty(serverSuccess) && serverSuccess !== prevState.serverSuccess) {\n        var _serverSuccess$server;\n\n        addToast(serverSuccess === null || serverSuccess === void 0 ? void 0 : (_serverSuccess$server = serverSuccess.server) === null || _serverSuccess$server === void 0 ? void 0 : _serverSuccess$server.message, {\n          autoDismiss: true,\n          appearance: 'success'\n        });\n      }\n    }\n  }, [serverError, serverSuccess]);\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(PageLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: RoutePaths.dashboard.path,\n          component: Dashboard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"*\",\n          component: PageNotFound\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"PZ/biGsw9HVIq6QLskn6+XowH+0=\", false, function () {\n  return [useDispatch, useToasts, useSelector, useSelector, usePrevious];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/App.js"],"names":["isEmpty","React","Suspense","useEffect","useDispatch","useSelector","BrowserRouter","Router","Route","Switch","useToasts","PageLoader","appActions","RoutePaths","Dashboard","PageNotFound","usePrevious","App","dispatch","addToast","removeAllToasts","serverSuccess","serverError","state","server","metadata","institutionStructure","app","prevState","getInstitutionStructure","getMetadata","message","autoDismiss","appearance","autoDismissTimeout","dashboard","path"],"mappings":"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","sourcesContent":["import { isEmpty } from 'lodash';\nimport React, { Suspense, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { useToasts } from 'react-toast-notifications';\nimport { PageLoader } from './components/common';\nimport { appActions } from './config/actions';\nimport RoutePaths from './config/routes/RoutePaths';\nimport Dashboard from './containers/Dashboard';\nimport PageNotFound from './containers/Errors/PageNotFound';\nimport usePrevious from './containers/Hooks/usePrevious';\nimport './custom.scss';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const { addToast, removeAllToasts } = useToasts();\n  const { serverSuccess, serverError } = useSelector((state) => state.server);\n  const { metadata, institutionStructure } = useSelector((state) => state.app);\n  const prevState = usePrevious({ serverSuccess, serverError });\n\n  useEffect(() => {\n    if (isEmpty(institutionStructure)) {\n      dispatch(appActions.getInstitutionStructure());\n    }\n    if (isEmpty(metadata)) {\n      dispatch(appActions.getMetadata());\n    }\n  }, []); \n\n  useEffect(() => {\n    if (!isEmpty(prevState)) {\n      if (!isEmpty(serverError) && serverError !== prevState.serverError) {\n        removeAllToasts();\n        addToast(serverError?.server?.message, {\n          autoDismiss: true,\n          appearance: 'error',\n          autoDismissTimeout: 6000,\n        });\n      }\n      if (\n        !isEmpty(serverSuccess) &&\n        serverSuccess !== prevState.serverSuccess\n      ) {\n        addToast(serverSuccess?.server?.message, {\n          autoDismiss: true,\n          appearance: 'success',\n        });\n      }\n    }\n  }, [serverError, serverSuccess]);\n\n  return (\n    <Suspense fallback={<PageLoader />}>\n      <Router>\n        <Switch>\n          <Route exact path={RoutePaths.dashboard.path} component={Dashboard} />\n          <Route path=\"*\" component={PageNotFound} />\n        </Switch>\n      </Router>\n    </Suspense>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}