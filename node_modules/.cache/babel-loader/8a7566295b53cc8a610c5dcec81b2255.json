{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/UnPaidInvoices.jsx\";\nimport React from 'react';\nimport PropTypes, { array } from 'prop-types';\nimport { Table, InputNumber } from 'antd';\nimport { uniqBy } from 'lodash';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UnPaidInvoices = ({\n  invoices,\n  setSelectedRows,\n  selectedRows,\n  editAmount\n}) => {\n  const updateCellQuantity = (amount, row) => {\n    setSelectedRows(uniqBy([{\n      id: row.id,\n      invoice_number: row.invoice_number,\n      amount: parseInt(amount, 10)\n    }, ...selectedRows], 'invoice_number'));\n  };\n\n  const columns = [{\n    title: 'Code',\n    dataIndex: 'invoice_number',\n    key: 'invoice_number'\n  }, {\n    title: 'Description',\n    dataIndex: 'description',\n    key: 'invoice_number'\n  }, {\n    title: 'Amount',\n    dataIndex: 'invoice_amount',\n    key: 'invoice_amount',\n    ellipsis: true,\n\n    render(text, row) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: `${parseInt(text, 10).toLocaleString()} ${row.currency}`\n      }, void 0, false);\n    }\n\n  }, {\n    title: 'Paid',\n    dataIndex: 'amount_paid',\n    key: 'amount_paid',\n\n    render(text, row) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: `${parseInt(text, 10).toLocaleString()} ${row.currency}`\n      }, void 0, false);\n    }\n\n  }, {\n    title: 'Amount Due',\n    dataIndex: 'amount_due',\n    key: 'amount_due',\n    width: '150px',\n\n    render(text, row) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: `${parseInt(text, 10).toLocaleString()} ${row.currency}`\n      }, void 0, false);\n    }\n\n  }];\n  if (editAmount) columns.push({\n    title: 'Amount To Pay',\n    key: 'amount_due',\n    editable: true,\n    width: '150px',\n\n    render(text, record) {\n      return /*#__PURE__*/_jsxDEV(InputNumber, {\n        min: 1,\n        max: record.amount_due,\n        defaultValue: record.amount_due,\n        onChange: quantity => updateCellQuantity(quantity, record)\n      }, selectedRows.find(row => row.invoice_number === record.invoice_number), false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this);\n    }\n\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      dataSource: invoices,\n      columns: columns,\n      size: \"small\",\n      pagination: false,\n      bordered: true,\n      rowKey: \"invoice_number\",\n      tableLayout: \"auto\",\n      className: \"border-0 text-sm\",\n      scroll: {\n        y: '65vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_c = UnPaidInvoices;\nUnPaidInvoices.defaultProps = {\n  invoices: [],\n  selectedRows: [],\n  editAmount: false\n};\nUnPaidInvoices.propTypes = {\n  invoices: PropTypes.oneOfType([array]),\n  selectedRows: PropTypes.oneOfType([array]),\n  setSelectedRows: PropTypes.func.isRequired,\n  editAmount: PropTypes.bool\n};\nexport default UnPaidInvoices;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnPaidInvoices\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/UnPaidInvoices.jsx"],"names":["React","PropTypes","array","Table","InputNumber","uniqBy","UnPaidInvoices","invoices","setSelectedRows","selectedRows","editAmount","updateCellQuantity","amount","row","id","invoice_number","parseInt","columns","title","dataIndex","key","ellipsis","render","text","toLocaleString","currency","width","push","editable","record","amount_due","quantity","find","y","defaultProps","propTypes","oneOfType","func","isRequired","bool"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes, { array } from 'prop-types';\nimport { Table, InputNumber } from 'antd';\nimport { uniqBy } from 'lodash';\n\nconst UnPaidInvoices = ({\n  invoices,\n  setSelectedRows,\n  selectedRows,\n  editAmount,\n}) => {\n  const updateCellQuantity = (amount, row) => {\n    setSelectedRows(\n      uniqBy(\n        [\n          {\n            id: row.id,\n            invoice_number: row.invoice_number,\n            amount: parseInt(amount, 10),\n          },\n          ...selectedRows,\n        ],\n        'invoice_number'\n      )\n    );\n  };\n  const columns = [\n    {\n      title: 'Code',\n      dataIndex: 'invoice_number',\n      key: 'invoice_number',\n    },\n    {\n      title: 'Description',\n      dataIndex: 'description',\n      key: 'invoice_number',\n    },\n    {\n      title: 'Amount',\n      dataIndex: 'invoice_amount',\n      key: 'invoice_amount',\n      ellipsis: true,\n      render(text, row) {\n        return <>{`${parseInt(text, 10).toLocaleString()} ${row.currency}`}</>;\n      },\n    },\n    {\n      title: 'Paid',\n      dataIndex: 'amount_paid',\n      key: 'amount_paid',\n      render(text, row) {\n        return <>{`${parseInt(text, 10).toLocaleString()} ${row.currency}`}</>;\n      },\n    },\n    {\n      title: 'Amount Due',\n      dataIndex: 'amount_due',\n      key: 'amount_due',\n      width: '150px',\n      render(text, row) {\n        return <>{`${parseInt(text, 10).toLocaleString()} ${row.currency}`}</>;\n      },\n    },\n  ];\n\n  if (editAmount)\n    columns.push({\n      title: 'Amount To Pay',\n      key: 'amount_due',\n      editable: true,\n      width: '150px',\n      render(text, record) {\n        return (\n          <InputNumber\n            min={1}\n            max={record.amount_due}\n            defaultValue={record.amount_due}\n            onChange={(quantity) => updateCellQuantity(quantity, record)}\n            key={selectedRows.find(\n              (row) => row.invoice_number === record.invoice_number\n            )}\n          />\n        );\n      },\n    });\n\n  return (\n    <div>\n      <Table\n        dataSource={invoices}\n        columns={columns}\n        size=\"small\"\n        pagination={false}\n        bordered\n        rowKey=\"invoice_number\"\n        tableLayout=\"auto\"\n        className=\"border-0 text-sm\"\n        scroll={{\n          y: '65vh',\n        }}\n      />\n    </div>\n  );\n};\n\nUnPaidInvoices.defaultProps = {\n  invoices: [],\n  selectedRows: [],\n  editAmount: false,\n};\n\nUnPaidInvoices.propTypes = {\n  invoices: PropTypes.oneOfType([array]),\n  selectedRows: PropTypes.oneOfType([array]),\n  setSelectedRows: PropTypes.func.isRequired,\n  editAmount: PropTypes.bool,\n};\n\nexport default UnPaidInvoices;\n"]},"metadata":{},"sourceType":"module"}