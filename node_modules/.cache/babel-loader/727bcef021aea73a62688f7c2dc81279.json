{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Dashboard/AuthUserLoader.jsx\",\n    _s = $RefreshSig$();\n\nimport { LoadingOutlined, UserOutlined } from '@ant-design/icons';\nimport { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Button, Container } from 'react-bootstrap';\nimport { FaSignInAlt } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AlertMessage from '../../components/common/AlertMessage';\nimport ReloadButton from '../../components/common/ReloadButton';\nimport { appActions, authActions } from '../../config/actions';\nimport { clearToken, getAccessToken } from '../../config/services/storageService';\nimport usePrevious from '../Hooks/usePrevious';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthUserLoader = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    authUser,\n    authUserError,\n    isAuthenticated,\n    gettingAuthUser\n  } = useSelector(state => state.auth);\n  const {\n    institutionStructure,\n    gettingInstitutionStructure\n  } = useSelector(state => state.app);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const prevState = usePrevious({\n    authUserError\n  });\n  const accessToken = getAccessToken();\n  useEffect(() => {\n    if (isEmpty(institutionStructure)) {\n      dispatch(appActions.getInstitutionStructure());\n    }\n\n    if (isEmpty(authUser) && !isEmpty(accessToken) && isAuthenticated === true) {\n      dispatch(authActions.getAuthUser());\n    }\n  }, []);\n\n  const logoutCurrentUser = () => {\n    clearToken();\n    dispatch(authActions.setIsAuthenticated(false));\n  };\n\n  useEffect(() => {\n    setErrorMessage(null);\n\n    if (isEmpty(accessToken)) {\n      logoutCurrentUser();\n    } else if (!isEmpty(prevState) && !isEmpty(authUserError) && prevState.authUserError !== authUserError) {\n      var _authUserError$error, _authUserError$server;\n\n      setErrorMessage((authUserError === null || authUserError === void 0 ? void 0 : (_authUserError$error = authUserError.error) === null || _authUserError$error === void 0 ? void 0 : _authUserError$error.message) || (authUserError === null || authUserError === void 0 ? void 0 : (_authUserError$server = authUserError.server) === null || _authUserError$server === void 0 ? void 0 : _authUserError$server.message));\n    }\n  }, [authUserError, accessToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"vh-100 text-center bg-light d-flex m-0 p-4\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"align-middle my-auto mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(UserOutlined, {\n        className: \"display-2 text-primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), (gettingAuthUser || gettingInstitutionStructure) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center text-sm my-1 text-uppercase text-primary font500\",\n        children: [/*#__PURE__*/_jsxDEV(LoadingOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"font600 d-inline ms-2\",\n          children: \"Loading Your Profile...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"font600 text-uppercase text-sm text-info my-3\",\n          children: \"Oops... We are Unable to Load your Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AlertMessage, {\n          message: errorMessage,\n          className: \"text-sm font500 py-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ReloadButton, {\n          loading: gettingAuthUser,\n          text: \"Reload Profile\",\n          size: \"sm\",\n          className: \"d-inline me-2 py-1 text-sm font600 text-capitalize\",\n          onClick: () => dispatch(authActions.getAuthUser())\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"d-inline py-1 text-sm font600 text-capitalize\",\n          variant: \"danger\",\n          size: \"sm\",\n          onClick: logoutCurrentUser,\n          children: [/*#__PURE__*/_jsxDEV(FaSignInAlt, {\n            className: \"me-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), \"Log Out\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthUserLoader, \"BJaG4ew8L8lAe36OAksV1y4gNys=\", false, function () {\n  return [useDispatch, useSelector, useSelector, usePrevious];\n});\n\n_c = AuthUserLoader;\nexport default AuthUserLoader;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthUserLoader\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Dashboard/AuthUserLoader.jsx"],"names":["LoadingOutlined","UserOutlined","isEmpty","React","useEffect","useState","Button","Container","FaSignInAlt","useDispatch","useSelector","AlertMessage","ReloadButton","appActions","authActions","clearToken","getAccessToken","usePrevious","AuthUserLoader","dispatch","authUser","authUserError","isAuthenticated","gettingAuthUser","state","auth","institutionStructure","gettingInstitutionStructure","app","errorMessage","setErrorMessage","prevState","accessToken","getInstitutionStructure","getAuthUser","logoutCurrentUser","setIsAuthenticated","error","message","server"],"mappings":"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","sourcesContent":["import { LoadingOutlined, UserOutlined } from '@ant-design/icons';\nimport { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Button, Container } from 'react-bootstrap';\nimport { FaSignInAlt } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport  AlertMessage from '../../components/common/AlertMessage';\nimport ReloadButton  from '../../components/common/ReloadButton';\nimport { appActions, authActions } from '../../config/actions';\nimport {\n  clearToken,\n  getAccessToken,\n} from '../../config/services/storageService';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst AuthUserLoader = () => {\n  const dispatch = useDispatch();\n  const { authUser, authUserError, isAuthenticated, gettingAuthUser } =\n    useSelector((state) => state.auth);\n  const { institutionStructure, gettingInstitutionStructure } = useSelector(\n    (state) => state.app\n  );\n  const [errorMessage, setErrorMessage] = useState(null);\n  const prevState = usePrevious({ authUserError });\n  const accessToken = getAccessToken();\n\n  useEffect(() => {\n    if (isEmpty(institutionStructure)) {\n      dispatch(appActions.getInstitutionStructure());\n    }\n    if (\n      isEmpty(authUser) &&\n      !isEmpty(accessToken) &&\n      isAuthenticated === true\n    ) {\n      dispatch(authActions.getAuthUser());\n    }\n  }, []);\n\n  const logoutCurrentUser = () => {\n    clearToken();\n    dispatch(authActions.setIsAuthenticated(false));\n  };\n\n  useEffect(() => {\n    setErrorMessage(null);\n    if (isEmpty(accessToken)) {\n      logoutCurrentUser();\n    } else if (\n      !isEmpty(prevState) &&\n      !isEmpty(authUserError) &&\n      prevState.authUserError !== authUserError\n    ) {\n      setErrorMessage(\n        authUserError?.error?.message || authUserError?.server?.message\n      );\n    }\n  }, [authUserError, accessToken]);\n\n  return (\n    <div className=\"vh-100 text-center bg-light d-flex m-0 p-4\">\n      <Container className=\"align-middle my-auto mx-auto\">\n        <UserOutlined className=\"display-2 text-primary\" />\n\n        {(gettingAuthUser || gettingInstitutionStructure) && (\n          <div className=\"text-center text-sm my-1 text-uppercase text-primary font500\">\n            <LoadingOutlined />\n            <div className=\"font600 d-inline ms-2\">Loading Your Profile...</div>\n          </div>\n        )}\n\n        {errorMessage && (\n          <div className=\"text-center\">\n            <div className=\"font600 text-uppercase text-sm text-info my-3\">\n              Oops... We are Unable to Load your Profile\n            </div>\n            <AlertMessage\n              message={errorMessage}\n              className=\"text-sm font500 py-1\"\n            />\n\n            <ReloadButton\n              loading={gettingAuthUser}\n              text=\"Reload Profile\"\n              size=\"sm\"\n              className=\"d-inline me-2 py-1 text-sm font600 text-capitalize\"\n              onClick={() => dispatch(authActions.getAuthUser())}\n            />\n\n            <Button\n              className=\"d-inline py-1 text-sm font600 text-capitalize\"\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={logoutCurrentUser}\n            >\n              <FaSignInAlt className=\"me-1\" />\n              Log Out\n            </Button>\n          </div>\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default AuthUserLoader;\n"]},"metadata":{},"sourceType":"module"}