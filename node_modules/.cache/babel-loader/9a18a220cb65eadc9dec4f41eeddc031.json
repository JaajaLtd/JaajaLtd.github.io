{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Auth/ResetForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { get, isEmpty } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { Card, Form } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, InputText, SubmitButton } from '../../components/common';\nimport { authActions } from '../../config/actions';\nimport RoutePaths from '../../config/routes/RoutePaths';\nimport usePrevious from '../Hooks/usePrevious';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ResetForm = ({\n  setCurrentPage\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const {\n    requestingToken,\n    resettingPassword\n  } = useSelector(state => state.auth);\n  const [resetSuccess, setResetSuccess] = useState(false);\n  const {\n    resetPasswordError,\n    requestTokenError,\n    resetPasswordSuccess,\n    requestTokenSuccess\n  } = useSelector(state => state.auth);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const previousState = usePrevious({\n    requestTokenError,\n    requestTokenSuccess,\n    resetPasswordError,\n    resetPasswordSuccess\n  });\n  useEffect(() => {\n    setErrorMessage(null);\n    setSuccessMessage(null);\n\n    if (!isEmpty(previousState)) {\n      if (!isEmpty(requestTokenError) && previousState.requestTokenError !== requestTokenError) {\n        var _requestTokenError$se;\n\n        setErrorMessage((requestTokenError === null || requestTokenError === void 0 ? void 0 : requestTokenError.error) || (requestTokenError === null || requestTokenError === void 0 ? void 0 : (_requestTokenError$se = requestTokenError.server) === null || _requestTokenError$se === void 0 ? void 0 : _requestTokenError$se.message));\n      }\n\n      if (previousState.requestTokenSuccess !== requestTokenSuccess && (requestTokenSuccess === null || requestTokenSuccess === void 0 ? void 0 : requestTokenSuccess.server)) {\n        var _requestTokenSuccess$;\n\n        setSuccessMessage(requestTokenSuccess === null || requestTokenSuccess === void 0 ? void 0 : (_requestTokenSuccess$ = requestTokenSuccess.server) === null || _requestTokenSuccess$ === void 0 ? void 0 : _requestTokenSuccess$.message);\n        setResetSuccess(true);\n      }\n    }\n  }, [requestTokenError, requestTokenSuccess]);\n  useEffect(() => {\n    if (!isEmpty(previousState)) {\n      if (!isEmpty(resetPasswordError) && previousState.resetPasswordError !== resetPasswordError) {\n        setErrorMessage((resetPasswordError === null || resetPasswordError === void 0 ? void 0 : resetPasswordError.error) || resetPasswordError.server.message);\n      }\n\n      if (previousState.resetPasswordSuccess !== resetPasswordSuccess && (resetPasswordSuccess === null || resetPasswordSuccess === void 0 ? void 0 : resetPasswordSuccess.server)) {\n        setCurrentPage(RoutePaths.login.path);\n      }\n    }\n  }, [resetPasswordError, resetPasswordSuccess]);\n\n  const onSubmit = data => {\n    setErrorMessage(null);\n\n    if (!isEmpty(data) && resetSuccess) {\n      dispatch(authActions.resetPassword(data));\n    } else {\n      dispatch(authActions.requestToken(data));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"bg-white rounded \",\n    children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n      className: \"py-3 border-0 rounded-top\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-100 text-center text-info font600\",\n        children: \"RESET PASSWORD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      className: \"pt-2\",\n      children: [(errorMessage || successMessage) && /*#__PURE__*/_jsxDEV(AlertMessage, {\n        type: errorMessage ? 'danger' : 'success',\n        message: errorMessage || successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit(onSubmit),\n        children: [/*#__PURE__*/_jsxDEV(InputText, {\n          name: \"username\",\n          label: \"STUDENT NO.\",\n          readOnly: resetSuccess,\n          register: register({\n            required: 'STUDENT NO. required'\n          }),\n          error: get(errors, 'username.message')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), resetSuccess && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(InputText, {\n            name: \"otp_code\",\n            label: \"Reset Token\",\n            register: register({\n              required: 'Reset Token required'\n            }),\n            error: get(errors, 'otp_code.message')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InputText, {\n            name: \"new_password\",\n            label: \"New Password\",\n            type: \"password\",\n            register: register({\n              required: 'Reset Token required',\n              minLength: {\n                value: 6,\n                message: 'Minimum password length should 6 characters'\n              },\n              maxLength: {\n                value: 16,\n                message: 'Maximum password length should 16 characters'\n              }\n            }),\n            error: get(errors, 'reset_token.message')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(InputText, {\n            name: \"confirm_password\",\n            label: \"Confirm New Password\",\n            type: \"password\",\n            register: register({\n              required: 'Reset Token required',\n              minLength: {\n                value: 6,\n                message: 'Minimum password length should 6 characters'\n              },\n              maxLength: {\n                value: 16,\n                message: 'Maximum password length should 16 characters'\n              }\n            }),\n            error: get(errors, 'confirm_password.message')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(SubmitButton, {\n          className: \"text-uppercase text-white text-sm mt-3 w-100 mb-2 font600\",\n          loading: requestingToken || resettingPassword,\n          loadingText: resetSuccess ? 'Resetting Password...' : 'Requesting...',\n          text: resetSuccess ? 'Reset Password' : 'Request Token'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ResetForm, \"6aaJKyBuZJxgWePjK2+ugClDNzs=\", false, function () {\n  return [useDispatch, useForm, useSelector, useSelector, usePrevious];\n});\n\n_c = ResetForm;\nResetForm.propTypes = {\n  setCurrentPage: PropTypes.func.isRequired\n};\nexport default ResetForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetForm\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Auth/ResetForm.jsx"],"names":["get","isEmpty","PropTypes","React","useEffect","useState","Card","Form","useForm","useDispatch","useSelector","AlertMessage","InputText","SubmitButton","authActions","RoutePaths","usePrevious","ResetForm","setCurrentPage","dispatch","register","handleSubmit","errors","requestingToken","resettingPassword","state","auth","resetSuccess","setResetSuccess","resetPasswordError","requestTokenError","resetPasswordSuccess","requestTokenSuccess","errorMessage","setErrorMessage","successMessage","setSuccessMessage","previousState","error","server","message","login","path","onSubmit","data","resetPassword","requestToken","required","minLength","value","maxLength","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import { get, isEmpty } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { Card, Form } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, InputText, SubmitButton } from '../../components/common';\nimport { authActions } from '../../config/actions';\nimport RoutePaths from '../../config/routes/RoutePaths';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst ResetForm = ({ setCurrentPage }) => {\n  const dispatch = useDispatch();\n  const { register, handleSubmit, errors } = useForm();\n  const { requestingToken, resettingPassword } = useSelector(\n    (state) => state.auth\n  );\n  const [resetSuccess, setResetSuccess] = useState(false);\n  const {\n    resetPasswordError,\n    requestTokenError,\n    resetPasswordSuccess,\n    requestTokenSuccess,\n  } = useSelector((state) => state.auth);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const previousState = usePrevious({\n    requestTokenError,\n    requestTokenSuccess,\n    resetPasswordError,\n    resetPasswordSuccess,\n  });\n\n  useEffect(() => {\n    setErrorMessage(null);\n    setSuccessMessage(null);\n    if (!isEmpty(previousState)) {\n      if (\n        !isEmpty(requestTokenError) &&\n        previousState.requestTokenError !== requestTokenError\n      ) {\n        setErrorMessage(\n          requestTokenError?.error || requestTokenError?.server?.message\n        );\n      }\n      if (\n        previousState.requestTokenSuccess !== requestTokenSuccess &&\n        requestTokenSuccess?.server\n      ) {\n        setSuccessMessage(requestTokenSuccess?.server?.message);\n        setResetSuccess(true);\n      }\n    }\n  }, [requestTokenError, requestTokenSuccess]);\n\n  useEffect(() => {\n    if (!isEmpty(previousState)) {\n      if (\n        !isEmpty(resetPasswordError) &&\n        previousState.resetPasswordError !== resetPasswordError\n      ) {\n        setErrorMessage(\n          resetPasswordError?.error || resetPasswordError.server.message\n        );\n      }\n      if (\n        previousState.resetPasswordSuccess !== resetPasswordSuccess &&\n        resetPasswordSuccess?.server\n      ) {\n        setCurrentPage(RoutePaths.login.path);\n      }\n    }\n  }, [resetPasswordError, resetPasswordSuccess]);\n\n  const onSubmit = (data) => {\n    setErrorMessage(null);\n    if (!isEmpty(data) && resetSuccess) {\n      dispatch(authActions.resetPassword(data));\n    } else {\n      dispatch(authActions.requestToken(data));\n    }\n  };\n\n  return (\n    <Card className=\"bg-white rounded \">\n      <Card.Header className=\"py-3 border-0 rounded-top\">\n        <div className=\"w-100 text-center text-info font600\">\n          RESET PASSWORD\n        </div>\n      </Card.Header>\n      <Card.Body className=\"pt-2\">\n        {(errorMessage || successMessage) && (\n          <AlertMessage\n            type={errorMessage ? 'danger' : 'success'}\n            message={errorMessage || successMessage}\n          />\n        )}\n        <Form onSubmit={handleSubmit(onSubmit)}>\n          <InputText\n            name=\"username\"\n            label=\"STUDENT NO.\"\n            readOnly={resetSuccess}\n            register={register({\n              required: 'STUDENT NO. required',\n            })}\n            error={get(errors, 'username.message')}\n          />\n\n          {resetSuccess && (\n            <>\n              <InputText\n                name=\"otp_code\"\n                label=\"Reset Token\"\n                register={register({\n                  required: 'Reset Token required',\n                })}\n                error={get(errors, 'otp_code.message')}\n              />\n\n              <InputText\n                name=\"new_password\"\n                label=\"New Password\"\n                type=\"password\"\n                register={register({\n                  required: 'Reset Token required',\n                  minLength: {\n                    value: 6,\n                    message: 'Minimum password length should 6 characters',\n                  },\n                  maxLength: {\n                    value: 16,\n                    message: 'Maximum password length should 16 characters',\n                  },\n                })}\n                error={get(errors, 'reset_token.message')}\n              />\n\n              <InputText\n                name=\"confirm_password\"\n                label=\"Confirm New Password\"\n                type=\"password\"\n                register={register({\n                  required: 'Reset Token required',\n                  minLength: {\n                    value: 6,\n                    message: 'Minimum password length should 6 characters',\n                  },\n                  maxLength: {\n                    value: 16,\n                    message: 'Maximum password length should 16 characters',\n                  },\n                })}\n                error={get(errors, 'confirm_password.message')}\n              />\n            </>\n          )}\n\n          <SubmitButton\n            className=\"text-uppercase text-white text-sm mt-3 w-100 mb-2 font600\"\n            loading={requestingToken || resettingPassword}\n            loadingText={\n              resetSuccess ? 'Resetting Password...' : 'Requesting...'\n            }\n            text={resetSuccess ? 'Reset Password' : 'Request Token'}\n          />\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n\nResetForm.propTypes = {\n  setCurrentPage: PropTypes.func.isRequired,\n};\n\nexport default ResetForm;\n"]},"metadata":{},"sourceType":"module"}