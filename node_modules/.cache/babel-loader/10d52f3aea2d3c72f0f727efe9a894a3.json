{"ast":null,"code":"import _objectSpread from\"/Users/admin/Documents/react-projects/hesmis/hesmis-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/admin/Documents/react-projects/hesmis/hesmis-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{get,isEmpty}from'lodash';import React,{useEffect,useState}from'react';import{Card,Col,Form,Row}from'react-bootstrap';import{useForm}from'react-hook-form';import{useDispatch,useSelector}from'react-redux';import{AlertMessage,DataNotFound,ReloadButton,SelectInput,SubmitButton}from'../../components/common';import{enrollmentActions,appActions}from'../../config/actions';import{formatMetadata,generalFormatter}from'../../helpers/dataFormatter';import usePrevious from'../Hooks/usePrevious';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var EnrollForm=function EnrollForm(_ref){var enrollmentEvent=_ref.enrollmentEvent,currentStudentProgramme=_ref.currentStudentProgramme,reloadEnrollmentEvent=_ref.reloadEnrollmentEvent;var dispatch=useDispatch();var _useForm=useForm(),register=_useForm.register,handleSubmit=_useForm.handleSubmit,errors=_useForm.errors;var _useSelector=useSelector(function(state){return state.enrollment;}),enrolling=_useSelector.enrolling,enrollError=_useSelector.enrollError,gettingCurrentEvents=_useSelector.gettingCurrentEvents;var _useSelector2=useSelector(function(state){return state.app;}),metadata=_useSelector2.metadata;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),enrollmentStatusOptions=_useState2[0],setEnrollmentOptions=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),studyYearOptions=_useState4[0],setStudyYearOptions=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),errorMessage=_useState6[0],setErrorMessage=_useState6[1];var prevState=usePrevious({enrollError:enrollError});useEffect(function(){if(isEmpty(metadata))dispatch(appActions.getMetadata());},[]);useEffect(function(){if(prevState&&!isEmpty(enrollError)&&enrollError!==prevState.enrollError){var _enrollError$server;setErrorMessage(enrollError===null||enrollError===void 0?void 0:(_enrollError$server=enrollError.server)===null||_enrollError$server===void 0?void 0:_enrollError$server.message);}},[enrollError]);useEffect(function(){if(!isEmpty(metadata)){setEnrollmentOptions(formatMetadata(metadata,'ENROLLMENT STATUSES'));}if(!isEmpty(currentStudentProgramme)){setStudyYearOptions(generalFormatter(currentStudentProgramme.programme_study_years||[],'programme_study_years','id'));}},[metadata]);var onClickEnrollButton=function onClickEnrollButton(data){setErrorMessage(null);if(!isEmpty(data)&&!isEmpty(enrollmentEvent)&&!isEmpty(currentStudentProgramme)){data.event_id=enrollmentEvent===null||enrollmentEvent===void 0?void 0:enrollmentEvent.id;dispatch(enrollmentActions.enrollStudent(_objectSpread(_objectSpread({},data),{},{student_programme_id:currentStudentProgramme.id})));}};return/*#__PURE__*/_jsx(\"div\",{children:isEmpty(enrollmentEvent)?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(DataNotFound,{message:\"There is currently No open Enrollment Event.\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-center\",children:/*#__PURE__*/_jsx(ReloadButton,{loading:gettingCurrentEvents,onClick:reloadEnrollmentEvent})})]}):/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsxs(Card.Header,{className:\"font600 text-muted text-sm py-3\",children:[\"ENROLL FOR\",/*#__PURE__*/_jsx(\"strong\",{className:\"mx-1\",children:\"\".concat(enrollmentEvent===null||enrollmentEvent===void 0?void 0:enrollmentEvent.semester,\", \")}),enrollmentEvent===null||enrollmentEvent===void 0?void 0:enrollmentEvent.academic_year,currentStudentProgramme&&/*#__PURE__*/_jsx(\"div\",{className:\"card-options\",children:/*#__PURE__*/_jsx(\"div\",{className:\"text-xs\",children:\"PROG: \".concat(currentStudentProgramme===null||currentStudentProgramme===void 0?void 0:currentStudentProgramme.programme_code,\" - \").concat(currentStudentProgramme===null||currentStudentProgramme===void 0?void 0:currentStudentProgramme.programme_title)})})]}),/*#__PURE__*/_jsxs(Form,{onSubmit:handleSubmit(onClickEnrollButton),children:[/*#__PURE__*/_jsxs(Card.Body,{children:[errorMessage&&/*#__PURE__*/_jsx(AlertMessage,{message:errorMessage,show:true,className:\"py-1 text-sm\"}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{md:6,children:/*#__PURE__*/_jsx(SelectInput,{name:\"study_year_id\",register:register({required:'Select the year of study you are enrolling for'}),label:\"YEAR OF STUDY\",inline:true,selectOptions:studyYearOptions,error:get(errors,'study_year_id.message')})}),/*#__PURE__*/_jsx(Col,{md:6,children:/*#__PURE__*/_jsx(SelectInput,{name:\"enrollment_status_id\",register:register({required:'Select enrollment type'}),label:\"ENROLLING AS?\",inline:true,selectOptions:enrollmentStatusOptions,error:get(errors,'enrollment_status_id.message')})})]})]}),/*#__PURE__*/_jsx(Card.Footer,{className:\"text-right\",children:/*#__PURE__*/_jsx(SubmitButton,{text:\"Enroll Now\",loading:enrolling,loadingText:\"Enrolling...\"})})]})]})});};export default EnrollForm;","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/EnrollForm.jsx"],"names":["get","isEmpty","React","useEffect","useState","Card","Col","Form","Row","useForm","useDispatch","useSelector","AlertMessage","DataNotFound","ReloadButton","SelectInput","SubmitButton","enrollmentActions","appActions","formatMetadata","generalFormatter","usePrevious","EnrollForm","enrollmentEvent","currentStudentProgramme","reloadEnrollmentEvent","dispatch","register","handleSubmit","errors","state","enrollment","enrolling","enrollError","gettingCurrentEvents","app","metadata","enrollmentStatusOptions","setEnrollmentOptions","studyYearOptions","setStudyYearOptions","errorMessage","setErrorMessage","prevState","getMetadata","server","message","programme_study_years","onClickEnrollButton","data","event_id","id","enrollStudent","student_programme_id","semester","academic_year","programme_code","programme_title","required"],"mappings":"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","sourcesContent":["import { get, isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport PropTypes, { object } from 'prop-types';\nimport { Card, Col, Form, Row } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  AlertMessage,\n  DataNotFound,\n  ReloadButton,\n  SelectInput,\n  SubmitButton,\n} from '../../components/common';\nimport { enrollmentActions, appActions } from '../../config/actions';\nimport { formatMetadata, generalFormatter } from '../../helpers/dataFormatter';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst EnrollForm = ({\n  enrollmentEvent,\n  currentStudentProgramme,\n  reloadEnrollmentEvent,\n}) => {\n  const dispatch = useDispatch();\n  const { register, handleSubmit, errors } = useForm();\n  const { enrolling, enrollError, gettingCurrentEvents } = useSelector(\n    (state) => state.enrollment\n  );\n  const { metadata } = useSelector((state) => state.app);\n\n  const [enrollmentStatusOptions, setEnrollmentOptions] = useState([]);\n  const [studyYearOptions, setStudyYearOptions] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const prevState = usePrevious({ enrollError });\n\n  useEffect(() => {\n    if (isEmpty(metadata)) dispatch(appActions.getMetadata());\n  }, []);\n\n  useEffect(() => {\n    if (\n      prevState &&\n      !isEmpty(enrollError) &&\n      enrollError !== prevState.enrollError\n    ) {\n      setErrorMessage(enrollError?.server?.message);\n    }\n  }, [enrollError]);\n\n  useEffect(() => {\n    if (!isEmpty(metadata)) {\n      setEnrollmentOptions(formatMetadata(metadata, 'ENROLLMENT STATUSES'));\n    }\n    if (!isEmpty(currentStudentProgramme)) {\n      setStudyYearOptions(\n        generalFormatter(\n          currentStudentProgramme.programme_study_years || [],\n          'programme_study_years',\n          'id'\n        )\n      );\n    }\n  }, [metadata]);\n\n  const onClickEnrollButton = (data) => {\n    setErrorMessage(null);\n    if (\n      !isEmpty(data) &&\n      !isEmpty(enrollmentEvent) &&\n      !isEmpty(currentStudentProgramme)\n    ) {\n      data.event_id = enrollmentEvent?.id;\n      dispatch(\n        enrollmentActions.enrollStudent({\n          ...data,\n          student_programme_id: currentStudentProgramme.id,\n        })\n      );\n    }\n  };\n\n  return (\n    <div>\n      {isEmpty(enrollmentEvent) ? (\n        <>\n          <DataNotFound message=\"There is currently No open Enrollment Event.\" />\n          <div className=\"text-center\">\n            <ReloadButton\n              loading={gettingCurrentEvents}\n              onClick={reloadEnrollmentEvent}\n            />\n          </div>\n        </>\n      ) : (\n        <Card>\n          <Card.Header className=\"font600 text-muted text-sm py-3\">\n            ENROLL FOR\n            <strong className=\"mx-1\">{`${enrollmentEvent?.semester}, `}</strong>\n            {enrollmentEvent?.academic_year}\n            {currentStudentProgramme && (\n              <div className=\"card-options\">\n                <div className=\"text-xs\">\n                  {`PROG: ${currentStudentProgramme?.programme_code} - ${currentStudentProgramme?.programme_title}`}\n                </div>\n              </div>\n            )}\n          </Card.Header>\n          <Form onSubmit={handleSubmit(onClickEnrollButton)}>\n            <Card.Body>\n              {errorMessage && (\n                <AlertMessage\n                  message={errorMessage}\n                  show\n                  className=\"py-1 text-sm\"\n                />\n              )}\n              <Row>\n                <Col md={6}>\n                  <SelectInput\n                    name=\"study_year_id\"\n                    register={register({\n                      required:\n                        'Select the year of study you are enrolling for',\n                    })}\n                    label=\"YEAR OF STUDY\"\n                    inline\n                    selectOptions={studyYearOptions}\n                    error={get(errors, 'study_year_id.message')}\n                  />\n                </Col>\n                <Col md={6}>\n                  <SelectInput\n                    name=\"enrollment_status_id\"\n                    register={register({\n                      required: 'Select enrollment type',\n                    })}\n                    label=\"ENROLLING AS?\"\n                    inline\n                    selectOptions={enrollmentStatusOptions}\n                    error={get(errors, 'enrollment_status_id.message')}\n                  />\n                </Col>\n              </Row>\n            </Card.Body>\n            <Card.Footer className=\"text-right\">\n              <SubmitButton\n                text=\"Enroll Now\"\n                loading={enrolling}\n                loadingText=\"Enrolling...\"\n              />\n            </Card.Footer>\n          </Form>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nEnrollForm.propTypes = {\n  reloadEnrollmentEvent: PropTypes.func.isRequired,\n  currentStudentProgramme: PropTypes.oneOfType([object]).isRequired,\n  enrollmentEvent: PropTypes.oneOfType([object]).isRequired,\n};\n\nexport default EnrollForm;\n"]},"metadata":{},"sourceType":"module"}