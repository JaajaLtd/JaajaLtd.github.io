{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/SelectedCourseUnits.jsx\";\nimport { isEmpty } from 'lodash';\nimport PropTypes, { array } from 'prop-types';\nimport React from 'react';\nimport { Button, Card } from 'react-bootstrap';\nimport { FaMinusCircle, FaTrash } from 'react-icons/fa';\nimport { DataNotFound } from '../../components/common';\nimport CourseUnitsTable from './CourseUnitsTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SelectedCourseUnits = ({\n  selectedCourseUnits,\n  setSelectedCourseUnits,\n  setDataAndOpenPopUp\n}) => {\n  const findCourseUnit = rowData => selectedCourseUnits.find(courseUnit => courseUnit.course_unit_id === rowData.course_unit_id);\n\n  const removeSelectedRowData = data => {\n    const courseExists = findCourseUnit(data);\n\n    if (courseExists) {\n      setSelectedCourseUnits(selectedCourseUnits.filter(courseUnit => courseUnit.course_unit_id !== courseExists.course_unit_id));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isEmpty(selectedCourseUnits) ? /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(DataNotFound, {\n        message: \"SELECT COURSES/MODULES TO REGISTER\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        className: \"py-2 text-xs font600 text-info\",\n        children: [\"COURSES/MODULES TO BE REGISTERED\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-options\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            size: \"sm\",\n            variant: \"danger\",\n            onClick: () => setSelectedCourseUnits([]),\n            className: \"text-xs text-uppercase\",\n            children: [/*#__PURE__*/_jsxDEV(FaTrash, {\n              className: \"me-1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this), \"Clear\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        className: \"p-0\",\n        children: /*#__PURE__*/_jsxDEV(CourseUnitsTable, {\n          courseUnits: selectedCourseUnits,\n          onRowClicked: setDataAndOpenPopUp,\n          columnsBefore: [{\n            name: '#',\n\n            cell(rowData, index) {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: index + 1\n              }, void 0, false);\n            },\n\n            width: '30px'\n          }, {\n            name: 'ACTION',\n            width: '100px',\n\n            cell(rowData) {\n              return /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  size: \"sm\",\n                  variant: \"danger\",\n                  onClick: () => removeSelectedRowData(rowData),\n                  className: \"text-xs p-1\",\n                  children: [/*#__PURE__*/_jsxDEV(FaMinusCircle, {\n                    className: \"me-1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 77,\n                    columnNumber: 27\n                  }, this), \"Remove\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false);\n            }\n\n          }, {\n            name: 'STATUS',\n            selector: 'registrationStatus.label',\n            width: '100px',\n            wrap: true\n          }],\n          columnsAfter: [{\n            name: 'STUDY YR',\n            selector: 'study_year',\n            width: '100px'\n          }]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_c = SelectedCourseUnits;\nSelectedCourseUnits.defaultProps = {\n  selectedCourseUnits: []\n};\nSelectedCourseUnits.propTypes = {\n  selectedCourseUnits: PropTypes.oneOfType([array]),\n  setSelectedCourseUnits: PropTypes.func.isRequired,\n  setDataAndOpenPopUp: PropTypes.func.isRequired\n};\nexport default SelectedCourseUnits;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectedCourseUnits\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/SelectedCourseUnits.jsx"],"names":["isEmpty","PropTypes","array","React","Button","Card","FaMinusCircle","FaTrash","DataNotFound","CourseUnitsTable","SelectedCourseUnits","selectedCourseUnits","setSelectedCourseUnits","setDataAndOpenPopUp","findCourseUnit","rowData","find","courseUnit","course_unit_id","removeSelectedRowData","data","courseExists","filter","name","cell","index","width","selector","wrap","defaultProps","propTypes","oneOfType","func","isRequired"],"mappings":"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","sourcesContent":["import { isEmpty } from 'lodash';\nimport PropTypes, { array } from 'prop-types';\nimport React from 'react';\nimport { Button, Card } from 'react-bootstrap';\nimport { FaMinusCircle, FaTrash } from 'react-icons/fa';\nimport { DataNotFound } from '../../components/common';\nimport CourseUnitsTable from './CourseUnitsTable';\n\nconst SelectedCourseUnits = ({\n  selectedCourseUnits,\n  setSelectedCourseUnits,\n  setDataAndOpenPopUp,\n}) => {\n  const findCourseUnit = (rowData) =>\n    selectedCourseUnits.find(\n      (courseUnit) => courseUnit.course_unit_id === rowData.course_unit_id\n    );\n\n  const removeSelectedRowData = (data) => {\n    const courseExists = findCourseUnit(data);\n    if (courseExists) {\n      setSelectedCourseUnits(\n        selectedCourseUnits.filter(\n          (courseUnit) =>\n            courseUnit.course_unit_id !== courseExists.course_unit_id\n        )\n      );\n    }\n  };\n\n  return (\n    <>\n      {isEmpty(selectedCourseUnits) ? (\n        <Card>\n          <DataNotFound message=\"SELECT COURSES/MODULES TO REGISTER\" />\n        </Card>\n      ) : (\n        <Card>\n          <Card.Header className=\"py-2 text-xs font600 text-info\">\n            COURSES/MODULES TO BE REGISTERED\n            <div className=\"card-options\">\n              <Button\n                size=\"sm\"\n                variant=\"danger\"\n                onClick={() => setSelectedCourseUnits([])}\n                className=\"text-xs text-uppercase\"\n              >\n                <FaTrash className=\"me-1\" />\n                Clear\n              </Button>\n            </div>\n          </Card.Header>\n          <Card.Body className=\"p-0\">\n            <CourseUnitsTable\n              courseUnits={selectedCourseUnits}\n              onRowClicked={setDataAndOpenPopUp}\n              columnsBefore={[\n                {\n                  name: '#',\n                  cell(rowData, index) {\n                    return <>{index + 1}</>;\n                  },\n                  width: '30px',\n                },\n                {\n                  name: 'ACTION',\n                  width: '100px',\n                  cell(rowData) {\n                    return (\n                      <>\n                        <Button\n                          size=\"sm\"\n                          variant=\"danger\"\n                          onClick={() => removeSelectedRowData(rowData)}\n                          className=\"text-xs p-1\"\n                        >\n                          <FaMinusCircle className=\"me-1\" />\n                          Remove\n                        </Button>\n                      </>\n                    );\n                  },\n                },\n                {\n                  name: 'STATUS',\n                  selector: 'registrationStatus.label',\n                  width: '100px',\n                  wrap: true,\n                },\n              ]}\n              columnsAfter={[\n                {\n                  name: 'STUDY YR',\n                  selector: 'study_year',\n                  width: '100px',\n                },\n              ]}\n            />\n          </Card.Body>\n        </Card>\n      )}\n    </>\n  );\n};\n\nSelectedCourseUnits.defaultProps = {\n  selectedCourseUnits: [],\n};\n\nSelectedCourseUnits.propTypes = {\n  selectedCourseUnits: PropTypes.oneOfType([array]),\n  setSelectedCourseUnits: PropTypes.func.isRequired,\n  setDataAndOpenPopUp: PropTypes.func.isRequired,\n};\n\nexport default SelectedCourseUnits;\n"]},"metadata":{},"sourceType":"module"}