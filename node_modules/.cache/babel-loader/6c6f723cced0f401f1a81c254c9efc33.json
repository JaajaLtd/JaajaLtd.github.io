{"ast":null,"code":"import { takeLatest, fork, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { authActions, paymentActions, paymentReferenceActions } from '../../actions';\n\nfunction* getMyInvoices(actions) {\n  try {\n    const response = yield axios({\n      url: '/student-portal/invoices',\n      method: 'GET',\n      params: actions.data\n    });\n    yield put({\n      type: paymentActions.GET_MY_INVOICES_SUCCESS,\n      data: response.data\n    });\n    yield put({\n      type: authActions.GET_AUTH_USER_ACCOUNT_BALANCE_REQUEST\n    });\n  } catch (error) {\n    yield put({\n      type: paymentActions.GET_MY_INVOICES_ERROR,\n      error: error.data\n    });\n  }\n}\n\nfunction* getMyTransactions(actions) {\n  try {\n    const response = yield axios({\n      url: '/student-portal/payment-transactions/history',\n      method: 'GET',\n      params: actions.data\n    });\n    delete response.server;\n    yield put({\n      type: paymentActions.GET_MY_TRANSACTIONS_SUCCESS,\n      data: response\n    });\n    yield put({\n      type: authActions.GET_AUTH_USER_ACCOUNT_BALANCE_REQUEST\n    });\n  } catch (error) {\n    yield put({\n      type: paymentActions.GET_MY_TRANSACTIONS_ERROR,\n      error: error.data\n    });\n  }\n}\n\nfunction* searchPayment(actions) {\n  try {\n    const response = yield axios({\n      url: `/student-portal/payment-references/search-prn/${actions.prn}`,\n      method: 'GET'\n    });\n    yield put({\n      type: paymentActions.SEARCH_PAYMENT_SUCCESS,\n      data: response.data\n    });\n    yield put({\n      type: authActions.GET_AUTH_USER_ACCOUNT_BALANCE_REQUEST\n    });\n    yield put({\n      type: paymentReferenceActions.GETTING_PAYMENT_REFERENCES_REQUEST\n    });\n  } catch (error) {\n    yield put({\n      type: paymentActions.SEARCH_PAYMENT_ERROR,\n      error: error.data\n    });\n  }\n}\n\nfunction* watchGetMyInvoices() {\n  yield takeLatest(paymentActions.GET_MY_INVOICES_REQUEST, getMyInvoices);\n}\n\nfunction* watchGetMyTransactions() {\n  yield takeLatest(paymentActions.GET_MY_TRANSACTIONS_REQUEST, getMyTransactions);\n}\n\nfunction* watchGetSearchReference() {\n  yield takeLatest(paymentActions.SEARCH_PAYMENT_REQUEST, searchPayment);\n}\n\nconst forkFunctions = [fork(watchGetMyInvoices), fork(watchGetMyTransactions), fork(watchGetSearchReference)];\nexport default forkFunctions;","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/payment/index.js"],"names":["takeLatest","fork","put","axios","authActions","paymentActions","paymentReferenceActions","getMyInvoices","actions","response","url","method","params","data","type","GET_MY_INVOICES_SUCCESS","GET_AUTH_USER_ACCOUNT_BALANCE_REQUEST","error","GET_MY_INVOICES_ERROR","getMyTransactions","server","GET_MY_TRANSACTIONS_SUCCESS","GET_MY_TRANSACTIONS_ERROR","searchPayment","prn","SEARCH_PAYMENT_SUCCESS","GETTING_PAYMENT_REFERENCES_REQUEST","SEARCH_PAYMENT_ERROR","watchGetMyInvoices","GET_MY_INVOICES_REQUEST","watchGetMyTransactions","GET_MY_TRANSACTIONS_REQUEST","watchGetSearchReference","SEARCH_PAYMENT_REQUEST","forkFunctions"],"mappings":"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","sourcesContent":["import { takeLatest, fork, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n  authActions,\n  paymentActions,\n  paymentReferenceActions,\n} from '../../actions';\n\nfunction* getMyInvoices(actions) {\n  try {\n    const response = yield axios({\n      url: '/student-portal/invoices',\n      method: 'GET',\n      params: actions.data,\n    });\n    yield put({\n      type: paymentActions.GET_MY_INVOICES_SUCCESS,\n      data: response.data,\n    });\n    yield put({\n      type: authActions.GET_AUTH_USER_ACCOUNT_BALANCE_REQUEST,\n    });\n  } catch (error) {\n    yield put({\n      type: paymentActions.GET_MY_INVOICES_ERROR,\n      error: error.data,\n    });\n  }\n}\n\nfunction* getMyTransactions(actions) {\n  try {\n    const response = yield axios({\n      url: '/student-portal/payment-transactions/history',\n      method: 'GET',\n      params: actions.data,\n    });\n    delete response.server;\n    yield put({\n      type: paymentActions.GET_MY_TRANSACTIONS_SUCCESS,\n      data: response,\n    });\n    yield put({\n      type: authActions.GET_AUTH_USER_ACCOUNT_BALANCE_REQUEST,\n    });\n  } catch (error) {\n    yield put({\n      type: paymentActions.GET_MY_TRANSACTIONS_ERROR,\n      error: error.data,\n    });\n  }\n}\n\nfunction* searchPayment(actions) {\n  try {\n    const response = yield axios({\n      url: `/student-portal/payment-references/search-prn/${actions.prn}`,\n      method: 'GET',\n    });\n    yield put({\n      type: paymentActions.SEARCH_PAYMENT_SUCCESS,\n      data: response.data,\n    });\n    yield put({\n      type: authActions.GET_AUTH_USER_ACCOUNT_BALANCE_REQUEST,\n    });\n    yield put({\n      type: paymentReferenceActions.GETTING_PAYMENT_REFERENCES_REQUEST,\n    });\n  } catch (error) {\n    yield put({\n      type: paymentActions.SEARCH_PAYMENT_ERROR,\n      error: error.data,\n    });\n  }\n}\n\nfunction* watchGetMyInvoices() {\n  yield takeLatest(paymentActions.GET_MY_INVOICES_REQUEST, getMyInvoices);\n}\n\nfunction* watchGetMyTransactions() {\n  yield takeLatest(\n    paymentActions.GET_MY_TRANSACTIONS_REQUEST,\n    getMyTransactions\n  );\n}\n\nfunction* watchGetSearchReference() {\n  yield takeLatest(paymentActions.SEARCH_PAYMENT_REQUEST, searchPayment);\n}\n\nconst forkFunctions = [\n  fork(watchGetMyInvoices),\n  fork(watchGetMyTransactions),\n  fork(watchGetSearchReference),\n];\n\nexport default forkFunctions;\n"]},"metadata":{},"sourceType":"module"}