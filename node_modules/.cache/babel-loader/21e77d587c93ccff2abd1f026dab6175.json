{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/RegisterStudent.jsx\",\n    _s = $RefreshSig$();\n\nimport { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport PropTypes, { any } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, DataNotFound, DataSpinner, ReloadButton } from '../../components/common';\nimport { authActions, appActions, registrationActions } from '../../config/actions';\nimport { formatMetadata } from '../../helpers/dataFormatter';\nimport RegistrationForm from './RegistrationForm';\nimport usePrevious from '../Hooks/usePrevious';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RegisterStudent = ({\n  registrationEvent,\n  enrollmentEvent,\n  enrollmentHistory,\n  reloadRegistrationEvent\n}) => {\n  _s();\n\n  var _enrollmentHistory$st;\n\n  const dispatch = useDispatch();\n  const {\n    authUser,\n    currentStudentProgramme\n  } = useSelector(state => state.auth);\n  const {\n    metadata\n  } = useSelector(state => state.app);\n  const {\n    courseUnitsByStudyYear,\n    gettingCourseUnits,\n    registeringStudent,\n    gettingCurrentEvents,\n    registrationError,\n    registrationSuccess\n  } = useSelector(state => state.registration);\n  const [registrationStatusOptions, setRegistrationStatusOptions] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [registrationType, setRegistrationType] = useState(null);\n  const [selectedCourseUnits, setSelectedCourseUnits] = useState([]);\n  const prevState = usePrevious({\n    registrationError,\n    registrationSuccess\n  });\n  useEffect(() => {\n    if (isEmpty(metadata)) dispatch(appActions.getMetadata());\n    if (isEmpty(authUser)) dispatch(authActions.getAuthUser());\n    if (isEmpty(courseUnitsByStudyYear)) dispatch(registrationActions.getCourseUnits(currentStudentProgramme === null || currentStudentProgramme === void 0 ? void 0 : currentStudentProgramme.id));\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(metadata)) {\n      setRegistrationStatusOptions(formatMetadata(metadata, 'REGISTRATION STATUSES'));\n      const registrationTypes = formatMetadata(metadata, 'REGISTRATION TYPES');\n      const findFullRegistration = registrationTypes.find(type => type.label.includes('FULL'));\n      setRegistrationType(findFullRegistration);\n    }\n  }, [metadata]);\n  useEffect(() => {\n    setSuccessMessage(null);\n    setErrorMessage(null);\n\n    if (!isEmpty(prevState)) {\n      if (!isEmpty(registrationError) && prevState.registrationError !== registrationError) {\n        setErrorMessage((registrationError === null || registrationError === void 0 ? void 0 : registrationError.error) || registrationError.server.message);\n      }\n\n      if (!isEmpty(registrationSuccess) && prevState.registrationSuccess !== registrationSuccess) {\n        var _registrationSuccess$;\n\n        setSuccessMessage(registrationSuccess === null || registrationSuccess === void 0 ? void 0 : (_registrationSuccess$ = registrationSuccess.server) === null || _registrationSuccess$ === void 0 ? void 0 : _registrationSuccess$.message);\n      }\n    }\n  }, [registrationError, registrationSuccess]);\n\n  const onClickRegisterButton = () => {\n    if (!isEmpty(registrationEvent)) {\n      const dataToSend = {\n        event_id: registrationEvent === null || registrationEvent === void 0 ? void 0 : registrationEvent.id,\n        enrollment_id: enrollmentHistory === null || enrollmentHistory === void 0 ? void 0 : enrollmentHistory.id,\n        registration_type_id: registrationType ? registrationType.value : null,\n        course_units: selectedCourseUnits.map(courseUnit => {\n          var _courseUnit$registrat;\n\n          return {\n            course_unit_id: courseUnit.course_unit_id,\n            course_unit_status_id: (_courseUnit$registrat = courseUnit.registrationStatus) === null || _courseUnit$registrat === void 0 ? void 0 : _courseUnit$registrat.value\n          };\n        })\n      };\n      dispatch(registrationActions.registerStudent(dataToSend));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isEmpty(registrationEvent) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DataNotFound, {\n        message: \"There is currently No open Registration Event.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(ReloadButton, {\n          loading: gettingCurrentEvents,\n          onClick: reloadRegistrationEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Card, {\n      body: true,\n      className: \"border-0 p-0\",\n      children: [errorMessage && /*#__PURE__*/_jsxDEV(AlertMessage, {\n        message: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 28\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(AlertMessage, {\n        type: \"success\",\n        message: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Card.Header, {\n        className: \"rounded-0 font600 text-danger text-xs mb-3 border\",\n        children: [\"REGISTER COURSES FOR\", /*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"mx-1 font600\",\n          children: enrollmentHistory === null || enrollmentHistory === void 0 ? void 0 : (_enrollmentHistory$st = enrollmentHistory.studyYear) === null || _enrollmentHistory$st === void 0 ? void 0 : _enrollmentHistory$st.programme_study_years\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"me-1 font600\",\n          children: `${enrollmentEvent === null || enrollmentEvent === void 0 ? void 0 : enrollmentEvent.semester} -`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), enrollmentEvent === null || enrollmentEvent === void 0 ? void 0 : enrollmentEvent.academic_year, currentStudentProgramme && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-options\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-info\",\n            children: [\"PROG:\", ` ${currentStudentProgramme === null || currentStudentProgramme === void 0 ? void 0 : currentStudentProgramme.programme_title}`]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), gettingCourseUnits && isEmpty(courseUnitsByStudyYear) ? /*#__PURE__*/_jsxDEV(DataSpinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(RegistrationForm, {\n        registrationStatusOptions: registrationStatusOptions,\n        courseUnitsByStudyYear: courseUnitsByStudyYear,\n        selectedCourseUnits: selectedCourseUnits,\n        setSelectedCourseUnits: setSelectedCourseUnits,\n        onClickRegisterButton: onClickRegisterButton,\n        registeringStudent: registeringStudent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterStudent, \"saUjMDF+004fojz7V01dHIAz8fI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, usePrevious];\n});\n\n_c = RegisterStudent;\nRegisterStudent.propTypes = {\n  reloadRegistrationEvent: PropTypes.func.isRequired,\n  registrationEvent: PropTypes.oneOfType([any]).isRequired,\n  enrollmentHistory: PropTypes.oneOfType([any]).isRequired,\n  enrollmentEvent: PropTypes.oneOfType([any]).isRequired\n};\nexport default RegisterStudent;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterStudent\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/RegisterStudent.jsx"],"names":["isEmpty","React","useEffect","useState","Card","PropTypes","any","useDispatch","useSelector","AlertMessage","DataNotFound","DataSpinner","ReloadButton","authActions","appActions","registrationActions","formatMetadata","RegistrationForm","usePrevious","RegisterStudent","registrationEvent","enrollmentEvent","enrollmentHistory","reloadRegistrationEvent","dispatch","authUser","currentStudentProgramme","state","auth","metadata","app","courseUnitsByStudyYear","gettingCourseUnits","registeringStudent","gettingCurrentEvents","registrationError","registrationSuccess","registration","registrationStatusOptions","setRegistrationStatusOptions","errorMessage","setErrorMessage","successMessage","setSuccessMessage","registrationType","setRegistrationType","selectedCourseUnits","setSelectedCourseUnits","prevState","getMetadata","getAuthUser","getCourseUnits","id","registrationTypes","findFullRegistration","find","type","label","includes","error","server","message","onClickRegisterButton","dataToSend","event_id","enrollment_id","registration_type_id","value","course_units","map","courseUnit","course_unit_id","course_unit_status_id","registrationStatus","registerStudent","studyYear","programme_study_years","semester","academic_year","programme_title","propTypes","func","isRequired","oneOfType"],"mappings":"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","sourcesContent":["import { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport PropTypes, { any } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  AlertMessage,\n  DataNotFound,\n  DataSpinner,\n  ReloadButton,\n} from '../../components/common';\nimport {\n  authActions,\n  appActions,\n  registrationActions,\n} from '../../config/actions';\nimport { formatMetadata } from '../../helpers/dataFormatter';\nimport RegistrationForm from './RegistrationForm';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst RegisterStudent = ({\n  registrationEvent,\n  enrollmentEvent,\n  enrollmentHistory,\n  reloadRegistrationEvent,\n}) => {\n  const dispatch = useDispatch();\n  const { authUser, currentStudentProgramme } = useSelector(\n    (state) => state.auth\n  );\n  const { metadata } = useSelector((state) => state.app);\n  const {\n    courseUnitsByStudyYear,\n    gettingCourseUnits,\n    registeringStudent,\n    gettingCurrentEvents,\n    registrationError,\n    registrationSuccess,\n  } = useSelector((state) => state.registration);\n  const [registrationStatusOptions, setRegistrationStatusOptions] = useState(\n    []\n  );\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [registrationType, setRegistrationType] = useState(null);\n  const [selectedCourseUnits, setSelectedCourseUnits] = useState([]);\n  const prevState = usePrevious({ registrationError, registrationSuccess });\n\n  useEffect(() => {\n    if (isEmpty(metadata)) dispatch(appActions.getMetadata());\n    if (isEmpty(authUser)) dispatch(authActions.getAuthUser());\n    if (isEmpty(courseUnitsByStudyYear))\n      dispatch(registrationActions.getCourseUnits(currentStudentProgramme?.id));\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(metadata)) {\n      setRegistrationStatusOptions(\n        formatMetadata(metadata, 'REGISTRATION STATUSES')\n      );\n      const registrationTypes = formatMetadata(metadata, 'REGISTRATION TYPES');\n      const findFullRegistration = registrationTypes.find((type) =>\n        type.label.includes('FULL')\n      );\n      setRegistrationType(findFullRegistration);\n    }\n  }, [metadata]);\n\n  useEffect(() => {\n    setSuccessMessage(null);\n    setErrorMessage(null);\n    if (!isEmpty(prevState)) {\n      if (\n        !isEmpty(registrationError) &&\n        prevState.registrationError !== registrationError\n      ) {\n        setErrorMessage(\n          registrationError?.error || registrationError.server.message\n        );\n      }\n\n      if (\n        !isEmpty(registrationSuccess) &&\n        prevState.registrationSuccess !== registrationSuccess\n      ) {\n        setSuccessMessage(registrationSuccess?.server?.message);\n      }\n    }\n  }, [registrationError, registrationSuccess]);\n\n  const onClickRegisterButton = () => {\n    if (!isEmpty(registrationEvent)) {\n      const dataToSend = {\n        event_id: registrationEvent?.id,\n        enrollment_id: enrollmentHistory?.id,\n        registration_type_id: registrationType ? registrationType.value : null,\n        course_units: selectedCourseUnits.map((courseUnit) => ({\n          course_unit_id: courseUnit.course_unit_id,\n          course_unit_status_id: courseUnit.registrationStatus?.value,\n        })),\n      };\n      dispatch(registrationActions.registerStudent(dataToSend));\n    }\n  };\n\n  return (\n    <div>\n      {isEmpty(registrationEvent) ? (\n        <>\n          <DataNotFound message=\"There is currently No open Registration Event.\" />\n          <div className=\"text-center\">\n            <ReloadButton\n              loading={gettingCurrentEvents}\n              onClick={reloadRegistrationEvent}\n            />\n          </div>\n        </>\n      ) : (\n        <Card body className=\"border-0 p-0\">\n          {errorMessage && <AlertMessage message={errorMessage} />}\n          {successMessage && (\n            <AlertMessage type=\"success\" message={successMessage} />\n          )}\n          <Card.Header className=\"rounded-0 font600 text-danger text-xs mb-3 border\">\n            REGISTER COURSES FOR\n            <strong className=\"mx-1 font600\">\n              {enrollmentHistory?.studyYear?.programme_study_years}\n            </strong>\n            <strong className=\"me-1 font600\">\n              {`${enrollmentEvent?.semester} -`}\n            </strong>\n            {enrollmentEvent?.academic_year}\n            {currentStudentProgramme && (\n              <div className=\"card-options\">\n                <div className=\"text-info\">\n                  PROG:\n                  {` ${currentStudentProgramme?.programme_title}`}\n                </div>\n              </div>\n            )}\n          </Card.Header>\n          {gettingCourseUnits && isEmpty(courseUnitsByStudyYear) ? (\n            <DataSpinner />\n          ) : (\n            <RegistrationForm\n              registrationStatusOptions={registrationStatusOptions}\n              courseUnitsByStudyYear={courseUnitsByStudyYear}\n              selectedCourseUnits={selectedCourseUnits}\n              setSelectedCourseUnits={setSelectedCourseUnits}\n              onClickRegisterButton={onClickRegisterButton}\n              registeringStudent={registeringStudent}\n            />\n          )}\n        </Card>\n      )}\n    </div>\n  );\n};\n\nRegisterStudent.propTypes = {\n  reloadRegistrationEvent: PropTypes.func.isRequired,\n  registrationEvent: PropTypes.oneOfType([any]).isRequired,\n  enrollmentHistory: PropTypes.oneOfType([any]).isRequired,\n  enrollmentEvent: PropTypes.oneOfType([any]).isRequired,\n};\n\nexport default RegisterStudent;\n"]},"metadata":{},"sourceType":"module"}