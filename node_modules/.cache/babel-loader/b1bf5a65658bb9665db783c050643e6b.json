{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { isEmpty, orderBy } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Accordion, Card } from 'react-bootstrap';\nimport { FaPaperclip } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DataNotFound, DataSpinner, ReloadButton, TabMenu } from '../../components/common';\nimport AccordionHeader from '../../components/common/AccordionHeader';\nimport { paymentReferenceActions } from '../../config/actions';\nimport GeneratePaymentReference from './GeneratePaymentReference';\nimport ReferenceModal from './ReferenceModal';\nimport SinglePaymentReference from './SinglePaymentReference';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PaymentReferences = () => {\n  _s();\n\n  var _paymentReferences$ac, _paymentReferences$in;\n\n  const dispatch = useDispatch();\n  const {\n    paymentReferences,\n    gettingPaymentReferences\n  } = useSelector(state => state.paymentReference);\n  const [activeKey, setActiveKey] = useState(1);\n  const [activeTab, setActiveTab] = useState('generate-reference');\n  const [referenceTab, setReferenceTab] = useState('active');\n\n  const reloadPaymentReferences = () => {\n    dispatch(paymentReferenceActions.getPaymentReferences());\n  };\n\n  useEffect(() => {\n    if (isEmpty(paymentReferences)) reloadPaymentReferences();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(TabMenu, {\n        currentMenu: activeTab,\n        setCurrentMenu: setActiveTab,\n        menus: [{\n          title: 'Get Payment REF',\n          action: 'generate-reference'\n        }, {\n          title: 'My Payment REFs',\n          action: 'references'\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n        className: \"overflow-auto\",\n        children: [activeTab === 'references' && /*#__PURE__*/_jsxDEV(Card, {\n          className: \"border-0\",\n          children: [/*#__PURE__*/_jsxDEV(TabMenu, {\n            className: \"bg-white border\",\n            variant: \"pills\",\n            currentMenu: referenceTab,\n            setCurrentMenu: setReferenceTab,\n            menus: [{\n              title: `Active References (${(paymentReferences === null || paymentReferences === void 0 ? void 0 : (_paymentReferences$ac = paymentReferences.active) === null || _paymentReferences$ac === void 0 ? void 0 : _paymentReferences$ac.length) || 0})`,\n              action: 'active'\n            }, {\n              title: `Expired References (${(paymentReferences === null || paymentReferences === void 0 ? void 0 : (_paymentReferences$in = paymentReferences.inactive) === null || _paymentReferences$in === void 0 ? void 0 : _paymentReferences$in.length) || 0})`,\n              action: 'inactive'\n            }],\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-options\",\n              children: /*#__PURE__*/_jsxDEV(ReloadButton, {\n                loading: gettingPaymentReferences,\n                onClick: reloadPaymentReferences\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), gettingPaymentReferences && isEmpty(paymentReferences[referenceTab]) ? /*#__PURE__*/_jsxDEV(DataSpinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: isEmpty(paymentReferences[referenceTab]) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(DataNotFound, {\n                message: `You have No ${referenceTab} Payment References`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 23\n              }, this)\n            }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(Accordion, {\n                defaultActiveKey: \"1\",\n                activeKey: activeKey,\n                children: orderBy(paymentReferences[referenceTab], ['ura_prn'], 'desc').map(paymentReference => /*#__PURE__*/_jsxDEV(Accordion.Item, {\n                  className: \"mb-0\",\n                  eventKey: paymentReference === null || paymentReference === void 0 ? void 0 : paymentReference.id,\n                  children: [/*#__PURE__*/_jsxDEV(AccordionHeader, {\n                    activeKey: activeKey,\n                    eventKey: paymentReference === null || paymentReference === void 0 ? void 0 : paymentReference.id,\n                    setActiveKey: setActiveKey,\n                    children: [/*#__PURE__*/_jsxDEV(FaPaperclip, {\n                      className: \"me-2\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 112,\n                      columnNumber: 31\n                    }, this), \"REFERENCE:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"text-danger ms-1\",\n                      children: paymentReference.ura_prn\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 114,\n                      columnNumber: 31\n                    }, this), \", AMOUNT TO PAY:\", /*#__PURE__*/_jsxDEV(\"strong\", {\n                      className: \"text-danger mx-1\",\n                      children: parseInt(paymentReference.amount, 10).toLocaleString()\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 118,\n                      columnNumber: 31\n                    }, this), \"UGX, EXPIRY DATE:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"mx-1 text-danger\",\n                      children: `${paymentReference.expiry_date}`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 125,\n                      columnNumber: 31\n                    }, this), \", GENERATED BY:\", /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"ms-1 text-danger\",\n                      children: `${paymentReference.generated_by === 'STUDENT' ? 'SELF' : paymentReference.generated_by}`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 129,\n                      columnNumber: 31\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 107,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(Accordion.Body, {\n                    children: /*#__PURE__*/_jsxDEV(SinglePaymentReference, {\n                      paymentReference: paymentReference\n                    }, paymentReference.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 138,\n                      columnNumber: 31\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 137,\n                    columnNumber: 29\n                  }, this)]\n                }, paymentReference.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 27\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 23\n              }, this)\n            }, void 0, false)\n          }, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), activeTab === 'generate-reference' && /*#__PURE__*/_jsxDEV(GeneratePaymentReference, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 50\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ReferenceModal, {\n      switchTab: () => setActiveTab('references')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PaymentReferences, \"ihOSF024siIY4YVoIPancVE54O4=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = PaymentReferences;\nexport default PaymentReferences;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentReferences\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/index.jsx"],"names":["isEmpty","orderBy","React","useEffect","useState","Accordion","Card","FaPaperclip","useDispatch","useSelector","DataNotFound","DataSpinner","ReloadButton","TabMenu","AccordionHeader","paymentReferenceActions","GeneratePaymentReference","ReferenceModal","SinglePaymentReference","PaymentReferences","dispatch","paymentReferences","gettingPaymentReferences","state","paymentReference","activeKey","setActiveKey","activeTab","setActiveTab","referenceTab","setReferenceTab","reloadPaymentReferences","getPaymentReferences","title","action","active","length","inactive","map","id","ura_prn","parseInt","amount","toLocaleString","expiry_date","generated_by"],"mappings":"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","sourcesContent":["import { isEmpty, orderBy } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Accordion, Card } from 'react-bootstrap';\nimport { FaPaperclip } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  DataNotFound,\n  DataSpinner,\n  ReloadButton,\n  TabMenu,\n} from '../../components/common';\nimport AccordionHeader from '../../components/common/AccordionHeader';\nimport { paymentReferenceActions } from '../../config/actions';\nimport GeneratePaymentReference from './GeneratePaymentReference';\nimport ReferenceModal from './ReferenceModal';\nimport SinglePaymentReference from './SinglePaymentReference';\n\nconst PaymentReferences = () => {\n  const dispatch = useDispatch();\n  const { paymentReferences, gettingPaymentReferences } = useSelector(\n    (state) => state.paymentReference\n  );\n  const [activeKey, setActiveKey] = useState(1);\n  const [activeTab, setActiveTab] = useState('generate-reference');\n  const [referenceTab, setReferenceTab] = useState('active');\n\n  const reloadPaymentReferences = () => {\n    dispatch(paymentReferenceActions.getPaymentReferences());\n  };\n\n  useEffect(() => {\n    if (isEmpty(paymentReferences)) reloadPaymentReferences();\n  }, []);\n\n  return (\n    <>\n      <Card>\n        <TabMenu\n          currentMenu={activeTab}\n          setCurrentMenu={setActiveTab}\n          menus={[\n            {\n              title: 'Get Payment REF',\n              action: 'generate-reference',\n            },\n            {\n              title: 'My Payment REFs',\n              action: 'references',\n            },\n          ]}\n        />\n        <Card.Body className=\"overflow-auto\">\n          {activeTab === 'references' && (\n            <Card className=\"border-0\">\n              <TabMenu\n                className=\"bg-white border\"\n                variant=\"pills\"\n                currentMenu={referenceTab}\n                setCurrentMenu={setReferenceTab}\n                menus={[\n                  {\n                    title: `Active References (${\n                      paymentReferences?.active?.length || 0\n                    })`,\n                    action: 'active',\n                  },\n                  {\n                    title: `Expired References (${\n                      paymentReferences?.inactive?.length || 0\n                    })`,\n                    action: 'inactive',\n                  },\n                ]}\n              >\n                <div className=\"card-options\">\n                  <ReloadButton\n                    loading={gettingPaymentReferences}\n                    onClick={reloadPaymentReferences}\n                  />\n                </div>\n              </TabMenu>\n\n              {gettingPaymentReferences &&\n              isEmpty(paymentReferences[referenceTab]) ? (\n                <DataSpinner />\n              ) : (\n                <>\n                  {isEmpty(paymentReferences[referenceTab]) ? (\n                    <>\n                      <DataNotFound\n                        message={`You have No ${referenceTab} Payment References`}\n                      />\n                    </>\n                  ) : (\n                    <>\n                      <Accordion defaultActiveKey=\"1\" activeKey={activeKey}>\n                        {orderBy(\n                          paymentReferences[referenceTab],\n                          ['ura_prn'],\n                          'desc'\n                        ).map((paymentReference) => (\n                          <Accordion.Item\n                            className=\"mb-0\"\n                            key={paymentReference.id}\n                            eventKey={paymentReference?.id}\n                          >\n                            <AccordionHeader\n                              activeKey={activeKey}\n                              eventKey={paymentReference?.id}\n                              setActiveKey={setActiveKey}\n                            >\n                              <FaPaperclip className=\"me-2\" />\n                              REFERENCE:\n                              <span className=\"text-danger ms-1\">\n                                {paymentReference.ura_prn}\n                              </span>\n                              , AMOUNT TO PAY:\n                              <strong className=\"text-danger mx-1\">\n                                {parseInt(\n                                  paymentReference.amount,\n                                  10\n                                ).toLocaleString()}\n                              </strong>\n                              UGX, EXPIRY DATE:\n                              <span className=\"mx-1 text-danger\">\n                                {`${paymentReference.expiry_date}`}\n                              </span>\n                              , GENERATED BY:\n                              <span className=\"ms-1 text-danger\">\n                                {`${\n                                  paymentReference.generated_by === 'STUDENT'\n                                    ? 'SELF'\n                                    : paymentReference.generated_by\n                                }`}\n                              </span>\n                            </AccordionHeader>\n                            <Accordion.Body>\n                              <SinglePaymentReference\n                                paymentReference={paymentReference}\n                                key={paymentReference.id}\n                              />\n                            </Accordion.Body>\n                          </Accordion.Item>\n                        ))}\n                      </Accordion>\n                    </>\n                  )}\n                </>\n              )}\n            </Card>\n          )}\n          {activeTab === 'generate-reference' && <GeneratePaymentReference />}\n        </Card.Body>\n      </Card>\n      <ReferenceModal switchTab={() => setActiveTab('references')} />\n    </>\n  );\n};\n\nexport default PaymentReferences;\n"]},"metadata":{},"sourceType":"module"}