{"ast":null,"code":"import { takeLatest, fork, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { resultActions } from '../../actions';\n\nfunction* getMyResult(actions) {\n  try {\n    const response = yield axios({\n      url: `/student-portal/result/${actions.studentProgrammeId}`,\n      method: 'GET',\n      params: actions.data\n    });\n    yield put({\n      type: resultActions.GET_MY_RESULT_SUCCESS,\n      data: response.data\n    });\n  } catch (error) {\n    yield put({\n      type: resultActions.GET_MY_RESULT_ERROR,\n      error: error.data\n    });\n  }\n}\n\nfunction* watchGetMyResult() {\n  yield takeLatest(resultActions.GET_MY_RESULT_REQUEST, getMyResult);\n}\n\nconst forkFunctions = [fork(watchGetMyResult)];\nexport default forkFunctions;","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis-front/src/config/saga/result/index.js"],"names":["takeLatest","fork","put","axios","resultActions","getMyResult","actions","response","url","studentProgrammeId","method","params","data","type","GET_MY_RESULT_SUCCESS","error","GET_MY_RESULT_ERROR","watchGetMyResult","GET_MY_RESULT_REQUEST","forkFunctions"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,eAA9B;;AAEA,UAAUC,WAAV,CAAsBC,OAAtB,EAA+B;AAC7B,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAAC;AAC3BK,MAAAA,GAAG,EAAG,0BAAyBF,OAAO,CAACG,kBAAmB,EAD/B;AAE3BC,MAAAA,MAAM,EAAE,KAFmB;AAG3BC,MAAAA,MAAM,EAAEL,OAAO,CAACM;AAHW,KAAD,CAA5B;AAKA,UAAMV,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAET,aAAa,CAACU,qBADZ;AAERF,MAAAA,IAAI,EAAEL,QAAQ,CAACK;AAFP,KAAD,CAAT;AAID,GAVD,CAUE,OAAOG,KAAP,EAAc;AACd,UAAMb,GAAG,CAAC;AACRW,MAAAA,IAAI,EAAET,aAAa,CAACY,mBADZ;AAERD,MAAAA,KAAK,EAAEA,KAAK,CAACH;AAFL,KAAD,CAAT;AAID;AACF;;AAED,UAAUK,gBAAV,GAA6B;AAC3B,QAAMjB,UAAU,CAACI,aAAa,CAACc,qBAAf,EAAsCb,WAAtC,CAAhB;AACD;;AAED,MAAMc,aAAa,GAAG,CAAClB,IAAI,CAACgB,gBAAD,CAAL,CAAtB;AAEA,eAAeE,aAAf","sourcesContent":["import { takeLatest, fork, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { resultActions } from '../../actions';\n\nfunction* getMyResult(actions) {\n  try {\n    const response = yield axios({\n      url: `/student-portal/result/${actions.studentProgrammeId}`,\n      method: 'GET',\n      params: actions.data,\n    });\n    yield put({\n      type: resultActions.GET_MY_RESULT_SUCCESS,\n      data: response.data,\n    });\n  } catch (error) {\n    yield put({\n      type: resultActions.GET_MY_RESULT_ERROR,\n      error: error.data,\n    });\n  }\n}\n\nfunction* watchGetMyResult() {\n  yield takeLatest(resultActions.GET_MY_RESULT_REQUEST, getMyResult);\n}\n\nconst forkFunctions = [fork(watchGetMyResult)];\n\nexport default forkFunctions;\n"]},"metadata":{},"sourceType":"module"}