{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/MainHeader.jsx\",\n    _s = $RefreshSig$();\n\nimport { LoadingOutlined, LogoutOutlined, MenuFoldOutlined, MenuUnfoldOutlined, UserOutlined } from '@ant-design/icons';\nimport { Layout, Menu } from 'antd';\nimport { isEmpty } from 'lodash';\nimport React from 'react';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { authActions, settingActions } from '../../config/actions';\nimport MenuList from '../../config/routes/MenuList';\nimport Avatar from '../../containers/MyProfile/Avatar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst {\n  Header\n} = Layout;\nconst {\n  SubMenu\n} = Menu;\n\nconst MainHeader = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    authUser,\n    loggingOut,\n    gettingAuthUser\n  } = useSelector(state => state.auth);\n  const {\n    selectedMenu,\n    isToggled\n  } = useSelector(state => state.setting);\n  const isMobileDevice = useMediaQuery({\n    maxWidth: 767\n  });\n\n  const setSelectedMenu = menu => {\n    dispatch(settingActions.setSelectedMenu(menu));\n  };\n\n  const actionButtons = [{\n    title: 'ACADEMIC CALENDAR',\n    action: MenuList.AcademicCalendar,\n    id: 1\n  }, {\n    title: 'GET PAYMENT REF',\n    action: MenuList.PaymentReference,\n    id: 2\n  }];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Header, {\n      theme: \"light\",\n      className: \"bg-white border-bottom ps-0 pe-3\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        className: \"d-inline button\",\n        variant: \"link\",\n        onClick: () => dispatch(settingActions.setIsToggled(!isToggled)),\n        children: isToggled ? /*#__PURE__*/_jsxDEV(MenuUnfoldOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 24\n        }, this) : /*#__PURE__*/_jsxDEV(MenuFoldOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), !isMobileDevice && /*#__PURE__*/_jsxDEV(ButtonGroup, {\n        children: actionButtons.map(button => /*#__PURE__*/_jsxDEV(Button, {\n          size: \"sm\",\n          variant: selectedMenu.action === button.action.action ? 'primary' : 'outline-primary',\n          className: \"me-1 text-sm font500\",\n          onClick: () => setSelectedMenu(button.action),\n          children: button.title\n        }, button.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rightContainer d-inline\",\n        children: /*#__PURE__*/_jsxDEV(Menu, {\n          mode: \"horizontal\",\n          inlineCollapsed: false,\n          children: [/*#__PURE__*/_jsxDEV(SubMenu, {\n            title: /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: loggingOut || gettingAuthUser && isEmpty(authUser) ? /*#__PURE__*/_jsxDEV(LoadingOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"my-auto\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    color: '#999',\n                    marginRight: 4\n                  },\n                  children: \"Hi,\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"text-uppercase text-primary text-sm font600 me-2\",\n                  children: authUser.lastname\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(Avatar, {\n                  width: 24,\n                  height: 24,\n                  className: \"my-auto d-inline rounded-circle\",\n                  preview: false\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 21\n              }, this)\n            }, void 0, false),\n            className: \"px-0\",\n            children: [/*#__PURE__*/_jsxDEV(Menu.Item, {\n              icon: /*#__PURE__*/_jsxDEV(UserOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 23\n              }, this),\n              onClick: () => setSelectedMenu(MenuList.ProfileData),\n              children: \"My Profile\"\n            }, \"my-profile\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Menu.Item, {\n              icon: loggingOut ? /*#__PURE__*/_jsxDEV(LoadingOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 36\n              }, this) : /*#__PURE__*/_jsxDEV(LogoutOutlined, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 58\n              }, this),\n              onClick: () => dispatch(authActions.logoutUser()),\n              className: \"font600\",\n              danger: true,\n              children: \"Log out\"\n            }, \"SignOut\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 15\n            }, this)]\n          }, \"profile\", true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Menu.Item, {\n            icon: loggingOut ? /*#__PURE__*/_jsxDEV(LoadingOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 34\n            }, this) : /*#__PURE__*/_jsxDEV(LogoutOutlined, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 56\n            }, this),\n            onClick: () => dispatch(authActions.logoutUser()),\n            className: \"font600 px-2\",\n            danger: true,\n            children: \"Log out\"\n          }, \"SignOut\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this)]\n        }, MenuList.ProfileData.action, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(MainHeader, \"HFxKnwwDoCHmKSI3f4Ecc3bE8vQ=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useMediaQuery];\n});\n\n_c = MainHeader;\nexport default MainHeader;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainHeader\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/MainHeader.jsx"],"names":["LoadingOutlined","LogoutOutlined","MenuFoldOutlined","MenuUnfoldOutlined","UserOutlined","Layout","Menu","isEmpty","React","Button","ButtonGroup","useDispatch","useSelector","useMediaQuery","authActions","settingActions","MenuList","Avatar","Header","SubMenu","MainHeader","dispatch","authUser","loggingOut","gettingAuthUser","state","auth","selectedMenu","isToggled","setting","isMobileDevice","maxWidth","setSelectedMenu","menu","actionButtons","title","action","AcademicCalendar","id","PaymentReference","setIsToggled","map","button","color","marginRight","lastname","ProfileData","logoutUser"],"mappings":";;;AAAA,SACEA,eADF,EAEEC,cAFF,EAGEC,gBAHF,EAIEC,kBAJF,EAKEC,YALF,QAMO,mBANP;AAOA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,MAA7B;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,iBAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,sBAA5C;AACA,OAAOC,QAAP,MAAqB,8BAArB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAab,MAAnB;AACA,MAAM;AAAEc,EAAAA;AAAF,IAAcb,IAApB;;AAEA,MAAMc,UAAU,GAAG,MAAM;AAAA;;AACvB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM;AAAEW,IAAAA,QAAF;AAAYC,IAAAA,UAAZ;AAAwBC,IAAAA;AAAxB,MAA4CZ,WAAW,CAC1Da,KAAD,IAAWA,KAAK,CAACC,IAD0C,CAA7D;AAGA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA8BhB,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACI,OAAlB,CAA/C;AACA,QAAMC,cAAc,GAAGjB,aAAa,CAAC;AAAEkB,IAAAA,QAAQ,EAAE;AAAZ,GAAD,CAApC;;AAEA,QAAMC,eAAe,GAAIC,IAAD,IAAU;AAChCZ,IAAAA,QAAQ,CAACN,cAAc,CAACiB,eAAf,CAA+BC,IAA/B,CAAD,CAAR;AACD,GAFD;;AAIA,QAAMC,aAAa,GAAG,CACpB;AACEC,IAAAA,KAAK,EAAE,mBADT;AAEEC,IAAAA,MAAM,EAAEpB,QAAQ,CAACqB,gBAFnB;AAGEC,IAAAA,EAAE,EAAE;AAHN,GADoB,EAMpB;AACEH,IAAAA,KAAK,EAAE,iBADT;AAEEC,IAAAA,MAAM,EAAEpB,QAAQ,CAACuB,gBAFnB;AAGED,IAAAA,EAAE,EAAE;AAHN,GANoB,CAAtB;AAaA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,OAAd;AAAsB,MAAA,SAAS,EAAC,kCAAhC;AAAA,8BACE,QAAC,MAAD;AACE,QAAA,SAAS,EAAC,iBADZ;AAEE,QAAA,OAAO,EAAC,MAFV;AAGE,QAAA,OAAO,EAAE,MAAMjB,QAAQ,CAACN,cAAc,CAACyB,YAAf,CAA4B,CAACZ,SAA7B,CAAD,CAHzB;AAAA,kBAKGA,SAAS,gBAAG,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,gBAAH,gBAA4B,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AALxC;AAAA;AAAA;AAAA;AAAA,cADF,EAQG,CAACE,cAAD,iBACC,QAAC,WAAD;AAAA,kBACGI,aAAa,CAACO,GAAd,CAAmBC,MAAD,iBACjB,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,IADP;AAEE,UAAA,OAAO,EACLf,YAAY,CAACS,MAAb,KAAwBM,MAAM,CAACN,MAAP,CAAcA,MAAtC,GACI,SADJ,GAEI,iBALR;AAOE,UAAA,SAAS,EAAC,sBAPZ;AAQE,UAAA,OAAO,EAAE,MAAMJ,eAAe,CAACU,MAAM,CAACN,MAAR,CARhC;AAAA,oBAWGM,MAAM,CAACP;AAXV,WASOO,MAAM,CAACJ,EATd;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cATJ,eA4BE;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA,+BACE,QAAC,IAAD;AAEE,UAAA,IAAI,EAAC,YAFP;AAGE,UAAA,eAAe,EAAE,KAHnB;AAAA,kCAKE,QAAC,OAAD;AACE,YAAA,KAAK,eACH;AAAA,wBACGf,UAAU,IAAKC,eAAe,IAAIjB,OAAO,CAACe,QAAD,CAAzC,gBACC,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,sBADD,gBAGC;AAAM,gBAAA,SAAS,EAAC,SAAhB;AAAA,wCACE;AAAM,kBAAA,KAAK,EAAE;AAAEqB,oBAAAA,KAAK,EAAE,MAAT;AAAiBC,oBAAAA,WAAW,EAAE;AAA9B,mBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAM,kBAAA,SAAS,EAAC,kDAAhB;AAAA,4BACGtB,QAAQ,CAACuB;AADZ;AAAA;AAAA;AAAA;AAAA,wBAFF,eAKE,QAAC,MAAD;AACE,kBAAA,KAAK,EAAE,EADT;AAEE,kBAAA,MAAM,EAAE,EAFV;AAGE,kBAAA,SAAS,EAAC,iCAHZ;AAIE,kBAAA,OAAO,EAAE;AAJX;AAAA;AAAA;AAAA;AAAA,wBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ,6BAFJ;AAsBE,YAAA,SAAS,EAAC,MAtBZ;AAAA,oCAwBE,QAAC,IAAD,CAAM,IAAN;AAEE,cAAA,IAAI,eAAE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,sBAFR;AAGE,cAAA,OAAO,EAAE,MAAMb,eAAe,CAAChB,QAAQ,CAAC8B,WAAV,CAHhC;AAAA;AAAA,eACM,YADN;AAAA;AAAA;AAAA;AAAA,oBAxBF,eA+BE,QAAC,IAAD,CAAM,IAAN;AAEE,cAAA,IAAI,EAAEvB,UAAU,gBAAG,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,sBAAH,gBAAyB,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,sBAF3C;AAGE,cAAA,OAAO,EAAE,MAAMF,QAAQ,CAACP,WAAW,CAACiC,UAAZ,EAAD,CAHzB;AAIE,cAAA,SAAS,EAAC,SAJZ;AAKE,cAAA,MAAM,MALR;AAAA;AAAA,eACM,SADN;AAAA;AAAA;AAAA;AAAA,oBA/BF;AAAA,aAqBM,SArBN;AAAA;AAAA;AAAA;AAAA,kBALF,eA8CE,QAAC,IAAD,CAAM,IAAN;AAEE,YAAA,IAAI,EAAExB,UAAU,gBAAG,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,oBAAH,gBAAyB,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,oBAF3C;AAGE,YAAA,OAAO,EAAE,MAAMF,QAAQ,CAACP,WAAW,CAACiC,UAAZ,EAAD,CAHzB;AAIE,YAAA,SAAS,EAAC,cAJZ;AAKE,YAAA,MAAM,MALR;AAAA;AAAA,aACM,SADN;AAAA;AAAA;AAAA;AAAA,kBA9CF;AAAA,WACO/B,QAAQ,CAAC8B,WAAT,CAAqBV,MAD5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA5BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA2FD,CApHD;;GAAMhB,U;UACaT,W,EACiCC,W,EAGdA,W,EACbC,a;;;KANnBO,U;AAsHN,eAAeA,UAAf","sourcesContent":["import {\n  LoadingOutlined,\n  LogoutOutlined,\n  MenuFoldOutlined,\n  MenuUnfoldOutlined,\n  UserOutlined,\n} from '@ant-design/icons';\nimport { Layout, Menu } from 'antd';\nimport { isEmpty } from 'lodash';\nimport React from 'react';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { authActions, settingActions } from '../../config/actions';\nimport MenuList from '../../config/routes/MenuList';\nimport Avatar from '../../containers/MyProfile/Avatar';\n\nconst { Header } = Layout;\nconst { SubMenu } = Menu;\n\nconst MainHeader = () => {\n  const dispatch = useDispatch();\n  const { authUser, loggingOut, gettingAuthUser } = useSelector(\n    (state) => state.auth\n  );\n  const { selectedMenu, isToggled } = useSelector((state) => state.setting);\n  const isMobileDevice = useMediaQuery({ maxWidth: 767 });\n\n  const setSelectedMenu = (menu) => {\n    dispatch(settingActions.setSelectedMenu(menu));\n  };\n\n  const actionButtons = [\n    {\n      title: 'ACADEMIC CALENDAR',\n      action: MenuList.AcademicCalendar,\n      id: 1,\n    },\n    {\n      title: 'GET PAYMENT REF',\n      action: MenuList.PaymentReference,\n      id: 2,\n    },\n  ];\n\n  return (\n    <>\n      <Header theme=\"light\" className=\"bg-white border-bottom ps-0 pe-3\">\n        <Button\n          className=\"d-inline button\"\n          variant=\"link\"\n          onClick={() => dispatch(settingActions.setIsToggled(!isToggled))}\n        >\n          {isToggled ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}\n        </Button>\n        {!isMobileDevice && (\n          <ButtonGroup>\n            {actionButtons.map((button) => (\n              <Button\n                size=\"sm\"\n                variant={\n                  selectedMenu.action === button.action.action\n                    ? 'primary'\n                    : 'outline-primary'\n                }\n                className=\"me-1 text-sm font500\"\n                onClick={() => setSelectedMenu(button.action)}\n                key={button.id}\n              >\n                {button.title}\n              </Button>\n            ))}\n          </ButtonGroup>\n        )}\n\n        <div className=\"rightContainer d-inline\">\n          <Menu\n            key={MenuList.ProfileData.action}\n            mode=\"horizontal\"\n            inlineCollapsed={false}\n          >\n            <SubMenu\n              title={\n                <>\n                  {loggingOut || (gettingAuthUser && isEmpty(authUser)) ? (\n                    <LoadingOutlined />\n                  ) : (\n                    <span className=\"my-auto\">\n                      <span style={{ color: '#999', marginRight: 4 }}>Hi,</span>\n                      <span className=\"text-uppercase text-primary text-sm font600 me-2\">\n                        {authUser.lastname}\n                      </span>\n                      <Avatar\n                        width={24}\n                        height={24}\n                        className=\"my-auto d-inline rounded-circle\"\n                        preview={false}\n                      />\n                    </span>\n                  )}\n                </>\n              }\n              key=\"profile\"\n              className=\"px-0\"\n            >\n              <Menu.Item\n                key=\"my-profile\"\n                icon={<UserOutlined />}\n                onClick={() => setSelectedMenu(MenuList.ProfileData)}\n              >\n                My Profile\n              </Menu.Item>\n              <Menu.Item\n                key=\"SignOut\"\n                icon={loggingOut ? <LoadingOutlined /> : <LogoutOutlined />}\n                onClick={() => dispatch(authActions.logoutUser())}\n                className=\"font600\"\n                danger\n              >\n                Log out\n              </Menu.Item>\n            </SubMenu>\n            <Menu.Item\n              key=\"SignOut\"\n              icon={loggingOut ? <LoadingOutlined /> : <LogoutOutlined />}\n              onClick={() => dispatch(authActions.logoutUser())}\n              className=\"font600 px-2\"\n              danger\n            >\n              Log out\n            </Menu.Item>\n          </Menu>\n        </div>\n      </Header>\n    </>\n  );\n};\n\nexport default MainHeader;\n"]},"metadata":{},"sourceType":"module"}