{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis-front/src/containers/Auth/Login.jsx\",\n    _s = $RefreshSig$();\n\nimport { isEmpty } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useCookies } from 'react-cookie';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage } from '../../components/common';\nimport { authActions } from '../../config/actions';\nimport RoutePaths from '../../config/routes/RoutePaths';\nimport { removeEmptyOrNullObject } from '../../helpers/dataFormatter';\nimport usePrevious from '../Hooks/usePrevious';\nimport LoginForm from './LoginForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Login = ({\n  setCurrentPage\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [error, setError] = useState(null);\n  const [cookies, setCookie] = useCookies();\n  const {\n    loginError,\n    loginData,\n    isAuthenticated\n  } = useSelector(state => state.auth);\n  const previousState = usePrevious({\n    loginError,\n    loginData\n  });\n  const accessToken = cookies.auth_access;\n  useEffect(() => {\n    if (!isEmpty(accessToken === null || accessToken === void 0 ? void 0 : accessToken.token) && isAuthenticated === true) {\n      dispatch(authActions.setIsAuthenticated(true));\n    }\n  }, []);\n  useEffect(() => {\n    if (!isEmpty(previousState) && !isEmpty(loginData) && previousState.loginData !== loginData) {\n      var _loginData$server;\n\n      if (((_loginData$server = loginData.server) === null || _loginData$server === void 0 ? void 0 : _loginData$server.status) === true) {\n        setCookie('auth_access', loginData.access_token, {\n          path: '/',\n          sameSite: true\n        });\n        dispatch(authActions.setIsAuthenticated(true));\n      }\n    }\n  }, [loginData]);\n  useEffect(() => {\n    if (!isEmpty(previousState) && !isEmpty(loginError) && previousState.loginError !== loginError) {\n      var _loginError$error;\n\n      const message = ((_loginError$error = loginError.error) === null || _loginError$error === void 0 ? void 0 : _loginError$error.message) || loginError.error || loginError.server.message;\n      setError(message);\n\n      if (message === 'Please change your default password before login in.') {\n        setTimeout(() => {\n          setCurrentPage(RoutePaths.resetPassword.path);\n        }, 2000);\n      }\n    }\n  }, [loginError]);\n\n  const onSubmit = data => {\n    setError(null);\n\n    if (!isEmpty(data)) {\n      dispatch(authActions.loginStudent(removeEmptyOrNullObject(data)));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!isEmpty(error) && /*#__PURE__*/_jsxDEV(AlertMessage, {\n      message: error,\n      className: \"p-1 px-3 text-sm rounded-sm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(LoginForm, {\n      onSubmit: onSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-3 mb-2 text-center text-sm font600\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"link\",\n        className: \"text-sm\",\n        onClick: () => setCurrentPage(RoutePaths.resetPassword.path),\n        children: \"Reset My Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Login, \"kPLIablen6gah+gJ8cwZW8J0vE8=\", false, function () {\n  return [useDispatch, useCookies, useSelector, usePrevious];\n});\n\n_c = Login;\nLogin.propTypes = {\n  setCurrentPage: PropTypes.func.isRequired\n};\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis-front/src/containers/Auth/Login.jsx"],"names":["isEmpty","PropTypes","React","useEffect","useState","Button","useCookies","useDispatch","useSelector","AlertMessage","authActions","RoutePaths","removeEmptyOrNullObject","usePrevious","LoginForm","Login","setCurrentPage","dispatch","error","setError","cookies","setCookie","loginError","loginData","isAuthenticated","state","auth","previousState","accessToken","auth_access","token","setIsAuthenticated","server","status","access_token","path","sameSite","message","setTimeout","resetPassword","onSubmit","data","loginStudent","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import { isEmpty } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useCookies } from 'react-cookie';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage } from '../../components/common';\nimport { authActions } from '../../config/actions';\nimport RoutePaths from '../../config/routes/RoutePaths';\nimport { removeEmptyOrNullObject } from '../../helpers/dataFormatter';\nimport usePrevious from '../Hooks/usePrevious';\nimport LoginForm from './LoginForm';\n\nconst Login = ({ setCurrentPage }) => {\n  const dispatch = useDispatch();\n  const [error, setError] = useState(null);\n  const [cookies, setCookie] = useCookies();\n  const { loginError, loginData, isAuthenticated } = useSelector(\n    (state) => state.auth\n  );\n  const previousState = usePrevious({ loginError, loginData });\n  const accessToken = cookies.auth_access;\n\n  useEffect(() => {\n    if (!isEmpty(accessToken?.token) && isAuthenticated === true) {\n      dispatch(authActions.setIsAuthenticated(true));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (\n      !isEmpty(previousState) &&\n      !isEmpty(loginData) &&\n      previousState.loginData !== loginData\n    ) {\n      if (loginData.server?.status === true) {\n        setCookie('auth_access', loginData.access_token, {\n          path: '/',\n          sameSite: true,\n        });\n        dispatch(authActions.setIsAuthenticated(true));\n      }\n    }\n  }, [loginData]);\n\n  useEffect(() => {\n    if (\n      !isEmpty(previousState) &&\n      !isEmpty(loginError) &&\n      previousState.loginError !== loginError\n    ) {\n      const message =\n        loginError.error?.message ||\n        loginError.error ||\n        loginError.server.message;\n      setError(message);\n\n      if (message === 'Please change your default password before login in.') {\n        setTimeout(() => {\n          setCurrentPage(RoutePaths.resetPassword.path);\n        }, 2000);\n      }\n    }\n  }, [loginError]);\n\n  const onSubmit = (data) => {\n    setError(null);\n    if (!isEmpty(data)) {\n      dispatch(authActions.loginStudent(removeEmptyOrNullObject(data)));\n    }\n  };\n\n  return (\n    <>\n      {!isEmpty(error) && (\n        <AlertMessage message={error} className=\"p-1 px-3 text-sm rounded-sm\" />\n      )}\n      <LoginForm onSubmit={onSubmit} />\n      <div className=\"mt-3 mb-2 text-center text-sm font600\">\n        <Button\n          variant=\"link\"\n          className=\"text-sm\"\n          onClick={() => setCurrentPage(RoutePaths.resetPassword.path)}\n        >\n          Reset My Password\n        </Button>\n      </div>\n    </>\n  );\n};\n\nLogin.propTypes = {\n  setCurrentPage: PropTypes.func.isRequired,\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}