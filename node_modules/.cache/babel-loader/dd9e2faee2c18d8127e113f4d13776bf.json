{"ast":null,"code":"import _slicedToArray from\"/Users/admin/Documents/react-projects/hesmis/hesmis-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{get,isEmpty}from'lodash';import React,{useEffect,useState}from'react';import{Card,Form}from'react-bootstrap';import{useForm}from'react-hook-form';import{FaUserLock}from'react-icons/fa';import{useDispatch,useSelector}from'react-redux';import{AlertMessage,InputText,SubmitButton}from'../../components/common';import{authActions}from'../../config/actions';import usePrevious from'../Hooks/usePrevious';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var ChangePassword=function ChangePassword(){var dispatch=useDispatch();var _useForm=useForm(),register=_useForm.register,handleSubmit=_useForm.handleSubmit,errors=_useForm.errors,reset=_useForm.reset;var changingPassword=useSelector(function(state){return state.auth.changingPassword;});var changePasswordError=useSelector(function(state){return state.auth.changePasswordError;});var changePasswordSuccess=useSelector(function(state){return state.auth.changePasswordSuccess;});var _useState=useState(null),_useState2=_slicedToArray(_useState,2),errorMessage=_useState2[0],setErrorMessage=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),successMessage=_useState4[0],setSuccessMessage=_useState4[1];var previousState=usePrevious({changePasswordError:changePasswordError,changePasswordSuccess:changePasswordSuccess});useEffect(function(){setErrorMessage(null);setSuccessMessage(null);if(!isEmpty(previousState)){if(previousState.changePasswordError!==changePasswordError&&(changePasswordError===null||changePasswordError===void 0?void 0:changePasswordError.server)){setErrorMessage(changePasswordError.server.message);}if(previousState.changePasswordSuccess!==changePasswordSuccess&&(changePasswordSuccess===null||changePasswordSuccess===void 0?void 0:changePasswordSuccess.server)){setSuccessMessage(changePasswordSuccess.server.message);reset();}}},[changePasswordError,changePasswordSuccess]);var onChangePasswordFormSubmit=function onChangePasswordFormSubmit(data){if(!isEmpty(data)){dispatch(authActions.changePassword(data));}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Card.Header,{className:\"text-primary font600 py-3 text-sm\",children:[/*#__PURE__*/_jsx(FaUserLock,{className:\"me-1\"}),\"CHANGE PASSWORD\"]}),/*#__PURE__*/_jsxs(Card.Body,{children:[(errorMessage||successMessage)&&/*#__PURE__*/_jsx(AlertMessage,{type:errorMessage?'danger':'success',message:errorMessage||successMessage}),/*#__PURE__*/_jsxs(Form,{onSubmit:handleSubmit(onChangePasswordFormSubmit),children:[/*#__PURE__*/_jsx(InputText,{label:\"Old Password\",type:\"password\",name:\"old_password\",inline:true,register:register({required:'Your old password is Required'}),error:get(errors,'old_password.message')}),/*#__PURE__*/_jsx(InputText,{label:\"New Password\",type:\"password\",name:\"new_password\",inline:true,register:register({required:'Your New password is Required',minLength:{value:8,message:'Password should be at least 8 characters'},maxLength:{value:16,message:'Password should be less than 16 characters'}}),error:get(errors,'new_password.message')}),/*#__PURE__*/_jsx(InputText,{label:\"Confirm New Password\",type:\"password\",name:\"confirm_new_password\",inline:true,register:register({required:'Confirm your New password.',minLength:{value:8,message:'Password should be at least 8 characters'},maxLength:{value:16,message:'Password should be less than 16 characters'}}),error:get(errors,'confirm_new_password.message')}),/*#__PURE__*/_jsx(SubmitButton,{size:\"sm\",loading:changingPassword,text:\"Change Password\",loadingText:\"Updating Password...\",className:\"float-right font600 text-uppercase\"})]})]})]});};export default ChangePassword;","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/ChangePassword.jsx"],"names":["get","isEmpty","React","useEffect","useState","Card","Form","useForm","FaUserLock","useDispatch","useSelector","AlertMessage","InputText","SubmitButton","authActions","usePrevious","ChangePassword","dispatch","register","handleSubmit","errors","reset","changingPassword","state","auth","changePasswordError","changePasswordSuccess","errorMessage","setErrorMessage","successMessage","setSuccessMessage","previousState","server","message","onChangePasswordFormSubmit","data","changePassword","required","minLength","value","maxLength"],"mappings":"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","sourcesContent":["import { get, isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card, Form } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { FaUserLock } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, InputText, SubmitButton } from '../../components/common';\nimport { authActions } from '../../config/actions';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst ChangePassword = () => {\n  const dispatch = useDispatch();\n  const { register, handleSubmit, errors, reset } = useForm();\n  const changingPassword = useSelector((state) => state.auth.changingPassword);\n  const changePasswordError = useSelector(\n    (state) => state.auth.changePasswordError\n  );\n  const changePasswordSuccess = useSelector(\n    (state) => state.auth.changePasswordSuccess\n  );\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const previousState = usePrevious({\n    changePasswordError,\n    changePasswordSuccess,\n  });\n\n  useEffect(() => {\n    setErrorMessage(null);\n    setSuccessMessage(null);\n    if (!isEmpty(previousState)) {\n      if (\n        previousState.changePasswordError !== changePasswordError &&\n        changePasswordError?.server\n      ) {\n        setErrorMessage(changePasswordError.server.message);\n      }\n      if (\n        previousState.changePasswordSuccess !== changePasswordSuccess &&\n        changePasswordSuccess?.server\n      ) {\n        setSuccessMessage(changePasswordSuccess.server.message);\n        reset();\n      }\n    }\n  }, [changePasswordError, changePasswordSuccess]);\n\n  const onChangePasswordFormSubmit = (data) => {\n    if (!isEmpty(data)) {\n      dispatch(authActions.changePassword(data));\n    }\n  };\n  return (\n    <>\n      <Card.Header className=\"text-primary font600 py-3 text-sm\">\n        <FaUserLock className=\"me-1\" />\n        CHANGE PASSWORD\n      </Card.Header>\n      <Card.Body>\n        {(errorMessage || successMessage) && (\n          <AlertMessage\n            type={errorMessage ? 'danger' : 'success'}\n            message={errorMessage || successMessage}\n          />\n        )}\n        <Form onSubmit={handleSubmit(onChangePasswordFormSubmit)}>\n          <InputText\n            label=\"Old Password\"\n            type=\"password\"\n            name=\"old_password\"\n            inline\n            register={register({\n              required: 'Your old password is Required',\n            })}\n            error={get(errors, 'old_password.message')}\n          />\n          <InputText\n            label=\"New Password\"\n            type=\"password\"\n            name=\"new_password\"\n            inline\n            register={register({\n              required: 'Your New password is Required',\n              minLength: {\n                value: 8,\n                message: 'Password should be at least 8 characters',\n              },\n              maxLength: {\n                value: 16,\n                message: 'Password should be less than 16 characters',\n              },\n            })}\n            error={get(errors, 'new_password.message')}\n          />\n          <InputText\n            label=\"Confirm New Password\"\n            type=\"password\"\n            name=\"confirm_new_password\"\n            inline\n            register={register({\n              required: 'Confirm your New password.',\n              minLength: {\n                value: 8,\n                message: 'Password should be at least 8 characters',\n              },\n              maxLength: {\n                value: 16,\n                message: 'Password should be less than 16 characters',\n              },\n            })}\n            error={get(errors, 'confirm_new_password.message')}\n          />\n\n          <SubmitButton\n            size=\"sm\"\n            loading={changingPassword}\n            text=\"Change Password\"\n            loadingText=\"Updating Password...\"\n            className=\"float-right font600 text-uppercase\"\n          />\n        </Form>\n      </Card.Body>\n    </>\n  );\n};\n\nexport default ChangePassword;\n"]},"metadata":{},"sourceType":"module"}