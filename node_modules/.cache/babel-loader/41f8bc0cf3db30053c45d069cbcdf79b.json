{"ast":null,"code":"import axios from 'axios';\nimport { isEmpty } from 'lodash';\nimport { get } from 'react-hook-form';\nimport { authActions, serverActions } from '../actions';\nimport { getAccessToken, clearToken } from './storageService';\nconst path = new RegExp(`/login$`);\nconst httpService = {\n  setupInterceptors: store => {\n    const {\n      dispatch\n    } = store;\n    axios.interceptors.request.use(async config => {\n      const token = await getAccessToken();\n      const localConfig = config;\n\n      if (!localConfig.thirdParty) {\n        if (token) {\n          if (!localConfig.headers) {\n            localConfig.headers = {};\n          }\n\n          if (token && !path.test(config.url)) {\n            localConfig.headers.Authorization = `Bearer ${token}`;\n          }\n        }\n\n        if (!localConfig.headers['Content-type']) {\n          localConfig.headers['Content-type'] = 'application/json';\n        }\n\n        localConfig.headers.Accept = 'application/json';\n        localConfig.timeout = 60000;\n        localConfig.baseURL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3123';\n      }\n\n      dispatch(serverActions.serverRequest());\n      return localConfig;\n    }, error => Promise.reject(error));\n    axios.interceptors.response.use(response => {\n      const data = get(response, 'data', {});\n      const config = get(response, 'config', {});\n\n      if (config && config.method !== 'get' && !config.hideMessage) {\n        if (data) {\n          dispatch(serverActions.serverSuccess(data));\n        }\n      } // Return entire response if response type blob\n\n\n      if (config && config.responseType === 'blob') return response;\n      return data;\n    }, error => {\n      const codeError = get(error, 'code', '');\n      let errorResponse = get(error, 'response', {});\n\n      if (!isEmpty(errorResponse)) {\n        if (errorResponse.status === 401) {\n          clearToken();\n          dispatch(authActions.setIsAuthenticated(false));\n          dispatch(authActions.setAuthUser(null));\n          errorResponse = {\n            data: {\n              server: {\n                message: 'Session Expired!'\n              }\n            }\n          };\n        } else if (errorResponse.status === 404) {\n          var _errorResponse$data;\n\n          errorResponse = {\n            data: {\n              server: {\n                message: ((_errorResponse$data = errorResponse.data) === null || _errorResponse$data === void 0 ? void 0 : _errorResponse$data.message) || errorResponse.statusText\n              }\n            }\n          };\n        }\n      } else if (codeError === 'ECONNABORTED') {\n        errorResponse = {\n          data: {\n            server: {\n              message: 'Sorry... Connection time out, Please try again!'\n            }\n          }\n        };\n      } else {\n        errorResponse = {\n          data: {\n            server: {\n              message: 'Connection Failed, Please check your Internet connection and try again.'\n            }\n          }\n        };\n      }\n\n      dispatch(serverActions.serverError(errorResponse));\n      return Promise.reject(errorResponse);\n    });\n  }\n};\nexport default httpService;","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis-front/src/config/services/httpService.js"],"names":["axios","isEmpty","get","authActions","serverActions","getAccessToken","clearToken","path","RegExp","httpService","setupInterceptors","store","dispatch","interceptors","request","use","config","token","localConfig","thirdParty","headers","test","url","Authorization","Accept","timeout","baseURL","process","env","REACT_APP_API_BASE_URL","serverRequest","error","Promise","reject","response","data","method","hideMessage","serverSuccess","responseType","codeError","errorResponse","status","setIsAuthenticated","setAuthUser","server","message","statusText","serverError"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { isEmpty } from 'lodash';\nimport { get } from 'react-hook-form';\nimport { authActions, serverActions } from '../actions';\nimport { getAccessToken, clearToken } from './storageService';\n\nconst path = new RegExp(`/login$`);\n\nconst httpService = {\n  setupInterceptors: (store) => {\n    const { dispatch } = store;\n\n    axios.interceptors.request.use(\n      async (config) => {\n        const token = await getAccessToken();\n        const localConfig = config;\n        if (!localConfig.thirdParty) {\n          if (token) {\n            if (!localConfig.headers) {\n              localConfig.headers = {};\n            }\n            if (token && !path.test(config.url)) {\n              localConfig.headers.Authorization = `Bearer ${token}`;\n            }\n          }\n          if (!localConfig.headers['Content-type']) {\n            localConfig.headers['Content-type'] = 'application/json';\n          }\n          localConfig.headers.Accept = 'application/json';\n          localConfig.timeout = 60000;\n          localConfig.baseURL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:3123';\n        }\n        dispatch(serverActions.serverRequest());\n        return localConfig;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    axios.interceptors.response.use(\n      (response) => {\n        const data = get(response, 'data', {});\n        const config = get(response, 'config', {});\n        if (config && config.method !== 'get' && !config.hideMessage) {\n          if (data) {\n            dispatch(serverActions.serverSuccess(data));\n          }\n        }\n        // Return entire response if response type blob\n        if (config && config.responseType === 'blob') return response;\n        return data;\n      },\n      (error) => {\n        const codeError = get(error, 'code', '');\n        let errorResponse = get(error, 'response', {});\n\n        if (!isEmpty(errorResponse)) {\n          if (errorResponse.status === 401) {\n            clearToken();\n            dispatch(authActions.setIsAuthenticated(false));\n            dispatch(authActions.setAuthUser(null));\n            errorResponse = {\n              data: { server: { message: 'Session Expired!' } },\n            };\n          } else if (errorResponse.status === 404) {\n            errorResponse = {\n              data: {\n                server: {\n                  message:\n                    errorResponse.data?.message || errorResponse.statusText,\n                },\n              },\n            };\n          }\n        } else if (codeError === 'ECONNABORTED') {\n          errorResponse = {\n            data: {\n              server: {\n                message: 'Sorry... Connection time out, Please try again!',\n              },\n            },\n          };\n        } else {\n          errorResponse = {\n            data: {\n              server: {\n                message:\n                  'Connection Failed, Please check your Internet connection and try again.',\n              },\n            },\n          };\n        }\n        dispatch(serverActions.serverError(errorResponse));\n        return Promise.reject(errorResponse);\n      }\n    );\n  },\n};\n\nexport default httpService;\n"]},"metadata":{},"sourceType":"module"}