{"ast":null,"code":"import _slicedToArray from\"/Users/admin/Documents/react-projects/hesmis/hesmis-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{isEmpty}from'lodash';import React,{useEffect,useState}from'react';import{Card}from'react-bootstrap';import{FaUserEdit,FaUserGraduate}from'react-icons/fa';import{useDispatch,useSelector}from'react-redux';import{DataNotFound,DataSpinner,ReloadButton,TabMenu}from'../../components/common';import{enrollmentActions,registrationActions}from'../../config/actions';import EnrolledStudent from'../EnrollmentHistory/EnrolledStudent';import EnrollForm from'../EnrollmentHistory/EnrollForm';import Registration from'../RegistrationHistory/Registration';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CurrentEvents=function CurrentEvents(){var dispatch=useDispatch();var _useSelector=useSelector(function(state){return state.enrollment;}),currentEvents=_useSelector.currentEvents,gettingCurrentEvents=_useSelector.gettingCurrentEvents;var _useSelector2=useSelector(function(state){return state.auth;}),currentStudentProgramme=_useSelector2.currentStudentProgramme;var _useState=useState('enrollment'),_useState2=_slicedToArray(_useState,2),selectedKey=_useState2[0],setSelectedKey=_useState2[1];var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),semesterEvent=_useState4[0],setSemesterEvent=_useState4[1];var reloadEnrollmentEvent=function reloadEnrollmentEvent(){if(currentStudentProgramme===null||currentStudentProgramme===void 0?void 0:currentStudentProgramme.id){dispatch(enrollmentActions.getCurrentEvents(currentStudentProgramme.id));}if(isEmpty(currentEvents.studentRegistration)&&!isEmpty(currentEvents.registrationEvent)){dispatch(registrationActions.getCourseUnits(currentStudentProgramme.id));}};useEffect(function(){if(isEmpty(semesterEvent))reloadEnrollmentEvent();},[]);useEffect(function(){if(!isEmpty(currentEvents)){var findEvent=currentEvents.find(function(event){return parseInt(event.programme_id,10)===parseInt(currentStudentProgramme.id,10);});setSemesterEvent(findEvent?findEvent.event:{});}},[currentEvents,currentStudentProgramme]);return/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(TabMenu,{menus:[{title:'Enrollemnt',icon:/*#__PURE__*/_jsx(FaUserGraduate,{className:\"me-1\"}),action:'enrollment'},{title:'Registration',icon:/*#__PURE__*/_jsx(FaUserEdit,{className:\"me-1\"}),action:'registration',hidden:isEmpty(semesterEvent.studentEnrollment)||isEmpty(semesterEvent.registrationEvent)}],currentMenu:selectedKey,setCurrentMenu:setSelectedKey,children:/*#__PURE__*/_jsx(\"div\",{className:\"card-options\",children:/*#__PURE__*/_jsx(ReloadButton,{loading:gettingCurrentEvents,onClick:reloadEnrollmentEvent})})}),/*#__PURE__*/_jsxs(Card.Body,{children:[selectedKey==='enrollment'&&/*#__PURE__*/_jsx(_Fragment,{children:gettingCurrentEvents&&isEmpty(semesterEvent)?/*#__PURE__*/_jsx(DataSpinner,{}):/*#__PURE__*/_jsx(_Fragment,{children:isEmpty(semesterEvent.enrollmentEvent)||isEmpty(currentStudentProgramme)?/*#__PURE__*/_jsx(DataNotFound,{message:\"There is no Enrollment event available\",className:\"text-xl text-uppercase\"}):/*#__PURE__*/_jsx(_Fragment,{children:!isEmpty(semesterEvent.studentEnrollment)?/*#__PURE__*/_jsx(EnrolledStudent,{studentEnrollment:semesterEvent.studentEnrollment||{},event:semesterEvent.enrollmentEvent}):/*#__PURE__*/_jsx(EnrollForm,{enrollmentEvent:semesterEvent.enrollmentEvent,currentStudentProgramme:currentStudentProgramme,reloadEnrollmentEvent:reloadEnrollmentEvent})})})}),selectedKey==='registration'&&/*#__PURE__*/_jsx(Registration,{registrationEvent:semesterEvent.registrationEvent,registrationHistory:semesterEvent.studentRegistration,enrollmentEvent:semesterEvent.enrollmentEvent,enrollmentHistory:semesterEvent.studentEnrollment,reloadEnrollmentEvent:reloadEnrollmentEvent})]})]},semesterEvent===null||semesterEvent===void 0?void 0:semesterEvent.id);};export default CurrentEvents;","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Events/CurrentEvents.jsx"],"names":["isEmpty","React","useEffect","useState","Card","FaUserEdit","FaUserGraduate","useDispatch","useSelector","DataNotFound","DataSpinner","ReloadButton","TabMenu","enrollmentActions","registrationActions","EnrolledStudent","EnrollForm","Registration","CurrentEvents","dispatch","state","enrollment","currentEvents","gettingCurrentEvents","auth","currentStudentProgramme","selectedKey","setSelectedKey","semesterEvent","setSemesterEvent","reloadEnrollmentEvent","id","getCurrentEvents","studentRegistration","registrationEvent","getCourseUnits","findEvent","find","event","parseInt","programme_id","title","icon","action","hidden","studentEnrollment","enrollmentEvent"],"mappings":"gLAAA,OAASA,OAAT,KAAwB,QAAxB,CACA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,OAASC,IAAT,KAAqB,iBAArB,CACA,OAASC,UAAT,CAAqBC,cAArB,KAA2C,gBAA3C,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OACEC,YADF,CAEEC,WAFF,CAGEC,YAHF,CAIEC,OAJF,KAKO,yBALP,CAMA,OAASC,iBAAT,CAA4BC,mBAA5B,KAAuD,sBAAvD,CACA,MAAOC,CAAAA,eAAP,KAA4B,sCAA5B,CACA,MAAOC,CAAAA,UAAP,KAAuB,iCAAvB,CACA,MAAOC,CAAAA,YAAP,KAAyB,qCAAzB,C,6IAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,GAAMC,CAAAA,QAAQ,CAAGZ,WAAW,EAA5B,CACA,iBAAgDC,WAAW,CACzD,SAACY,KAAD,QAAWA,CAAAA,KAAK,CAACC,UAAjB,EADyD,CAA3D,CAAQC,aAAR,cAAQA,aAAR,CAAuBC,oBAAvB,cAAuBA,oBAAvB,CAGA,kBAAoCf,WAAW,CAAC,SAACY,KAAD,QAAWA,CAAAA,KAAK,CAACI,IAAjB,EAAD,CAA/C,CAAQC,uBAAR,eAAQA,uBAAR,CACA,cAAsCtB,QAAQ,CAAC,YAAD,CAA9C,wCAAOuB,WAAP,eAAoBC,cAApB,eACA,eAA0CxB,QAAQ,CAAC,EAAD,CAAlD,yCAAOyB,aAAP,eAAsBC,gBAAtB,eAEA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,EAAM,CAClC,GAAIL,uBAAJ,SAAIA,uBAAJ,iBAAIA,uBAAuB,CAAEM,EAA7B,CAAiC,CAC/BZ,QAAQ,CAACN,iBAAiB,CAACmB,gBAAlB,CAAmCP,uBAAuB,CAACM,EAA3D,CAAD,CAAR,CACD,CACD,GACE/B,OAAO,CAACsB,aAAa,CAACW,mBAAf,CAAP,EACA,CAACjC,OAAO,CAACsB,aAAa,CAACY,iBAAf,CAFV,CAGE,CACAf,QAAQ,CAACL,mBAAmB,CAACqB,cAApB,CAAmCV,uBAAuB,CAACM,EAA3D,CAAD,CAAR,CACD,CACF,CAVD,CAYA7B,SAAS,CAAC,UAAM,CACd,GAAIF,OAAO,CAAC4B,aAAD,CAAX,CAA4BE,qBAAqB,GAClD,CAFQ,CAEN,EAFM,CAAT,CAIA5B,SAAS,CAAC,UAAM,CACd,GAAI,CAACF,OAAO,CAACsB,aAAD,CAAZ,CAA6B,CAC3B,GAAMc,CAAAA,SAAS,CAAGd,aAAa,CAACe,IAAd,CAChB,SAACC,KAAD,QACEC,CAAAA,QAAQ,CAACD,KAAK,CAACE,YAAP,CAAqB,EAArB,CAAR,GACAD,QAAQ,CAACd,uBAAuB,CAACM,EAAzB,CAA6B,EAA7B,CAFV,EADgB,CAAlB,CAKAF,gBAAgB,CAACO,SAAS,CAAGA,SAAS,CAACE,KAAb,CAAqB,EAA/B,CAAhB,CACD,CACF,CATQ,CASN,CAAChB,aAAD,CAAgBG,uBAAhB,CATM,CAAT,CAWA,mBACE,MAAC,IAAD,yBACE,KAAC,OAAD,EACE,KAAK,CAAE,CACL,CACEgB,KAAK,CAAE,YADT,CAEEC,IAAI,cAAE,KAAC,cAAD,EAAgB,SAAS,CAAC,MAA1B,EAFR,CAGEC,MAAM,CAAE,YAHV,CADK,CAML,CACEF,KAAK,CAAE,cADT,CAEEC,IAAI,cAAE,KAAC,UAAD,EAAY,SAAS,CAAC,MAAtB,EAFR,CAGEC,MAAM,CAAE,cAHV,CAIEC,MAAM,CACJ5C,OAAO,CAAC4B,aAAa,CAACiB,iBAAf,CAAP,EACA7C,OAAO,CAAC4B,aAAa,CAACM,iBAAf,CANX,CANK,CADT,CAgBE,WAAW,CAAER,WAhBf,CAiBE,cAAc,CAAEC,cAjBlB,uBAmBE,YAAK,SAAS,CAAC,cAAf,uBACE,KAAC,YAAD,EACE,OAAO,CAAEJ,oBADX,CAEE,OAAO,CAAEO,qBAFX,EADF,EAnBF,EADF,cA4BE,MAAC,IAAD,CAAM,IAAN,YACGJ,WAAW,GAAK,YAAhB,eACC,yBACGH,oBAAoB,EAAIvB,OAAO,CAAC4B,aAAD,CAA/B,cACC,KAAC,WAAD,IADD,cAGC,yBACG5B,OAAO,CAAC4B,aAAa,CAACkB,eAAf,CAAP,EACD9C,OAAO,CAACyB,uBAAD,CADN,cAEC,KAAC,YAAD,EACE,OAAO,CAAC,wCADV,CAEE,SAAS,CAAC,wBAFZ,EAFD,cAOC,yBACG,CAACzB,OAAO,CAAC4B,aAAa,CAACiB,iBAAf,CAAR,cACC,KAAC,eAAD,EACE,iBAAiB,CACfjB,aAAa,CAACiB,iBAAd,EAAmC,EAFvC,CAIE,KAAK,CAAEjB,aAAa,CAACkB,eAJvB,EADD,cAQC,KAAC,UAAD,EACE,eAAe,CAAElB,aAAa,CAACkB,eADjC,CAEE,uBAAuB,CAAErB,uBAF3B,CAGE,qBAAqB,CAAEK,qBAHzB,EATJ,EARJ,EAJJ,EAFJ,CAmCGJ,WAAW,GAAK,cAAhB,eACC,KAAC,YAAD,EACE,iBAAiB,CAAEE,aAAa,CAACM,iBADnC,CAEE,mBAAmB,CAAEN,aAAa,CAACK,mBAFrC,CAGE,eAAe,CAAEL,aAAa,CAACkB,eAHjC,CAIE,iBAAiB,CAAElB,aAAa,CAACiB,iBAJnC,CAKE,qBAAqB,CAAEf,qBALzB,EApCJ,GA5BF,GAAWF,aAAX,SAAWA,aAAX,iBAAWA,aAAa,CAAEG,EAA1B,CADF,CA4ED,CAhHD,CAkHA,cAAeb,CAAAA,aAAf","sourcesContent":["import { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { FaUserEdit, FaUserGraduate } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  DataNotFound,\n  DataSpinner,\n  ReloadButton,\n  TabMenu,\n} from '../../components/common';\nimport { enrollmentActions, registrationActions } from '../../config/actions';\nimport EnrolledStudent from '../EnrollmentHistory/EnrolledStudent';\nimport EnrollForm from '../EnrollmentHistory/EnrollForm';\nimport Registration from '../RegistrationHistory/Registration';\n\nconst CurrentEvents = () => {\n  const dispatch = useDispatch();\n  const { currentEvents, gettingCurrentEvents } = useSelector(\n    (state) => state.enrollment\n  );\n  const { currentStudentProgramme } = useSelector((state) => state.auth);\n  const [selectedKey, setSelectedKey] = useState('enrollment');\n  const [semesterEvent, setSemesterEvent] = useState({});\n\n  const reloadEnrollmentEvent = () => {\n    if (currentStudentProgramme?.id) {\n      dispatch(enrollmentActions.getCurrentEvents(currentStudentProgramme.id));\n    }\n    if (\n      isEmpty(currentEvents.studentRegistration) &&\n      !isEmpty(currentEvents.registrationEvent)\n    ) {\n      dispatch(registrationActions.getCourseUnits(currentStudentProgramme.id));\n    }\n  };\n\n  useEffect(() => {\n    if (isEmpty(semesterEvent)) reloadEnrollmentEvent();\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(currentEvents)) {\n      const findEvent = currentEvents.find(\n        (event) =>\n          parseInt(event.programme_id, 10) ===\n          parseInt(currentStudentProgramme.id, 10)\n      );\n      setSemesterEvent(findEvent ? findEvent.event : {});\n    }\n  }, [currentEvents, currentStudentProgramme]);\n\n  return (\n    <Card key={semesterEvent?.id}>\n      <TabMenu\n        menus={[\n          {\n            title: 'Enrollemnt',\n            icon: <FaUserGraduate className=\"me-1\" />,\n            action: 'enrollment',\n          },\n          {\n            title: 'Registration',\n            icon: <FaUserEdit className=\"me-1\" />,\n            action: 'registration',\n            hidden:\n              isEmpty(semesterEvent.studentEnrollment) ||\n              isEmpty(semesterEvent.registrationEvent),\n          },\n        ]}\n        currentMenu={selectedKey}\n        setCurrentMenu={setSelectedKey}\n      >\n        <div className=\"card-options\">\n          <ReloadButton\n            loading={gettingCurrentEvents}\n            onClick={reloadEnrollmentEvent}\n          />\n        </div>\n      </TabMenu>\n\n      <Card.Body>\n        {selectedKey === 'enrollment' && (\n          <>\n            {gettingCurrentEvents && isEmpty(semesterEvent) ? (\n              <DataSpinner />\n            ) : (\n              <>\n                {isEmpty(semesterEvent.enrollmentEvent) ||\n                isEmpty(currentStudentProgramme) ? (\n                  <DataNotFound\n                    message=\"There is no Enrollment event available\"\n                    className=\"text-xl text-uppercase\"\n                  />\n                ) : (\n                  <>\n                    {!isEmpty(semesterEvent.studentEnrollment) ? (\n                      <EnrolledStudent\n                        studentEnrollment={\n                          semesterEvent.studentEnrollment || {}\n                        }\n                        event={semesterEvent.enrollmentEvent}\n                      />\n                    ) : (\n                      <EnrollForm\n                        enrollmentEvent={semesterEvent.enrollmentEvent}\n                        currentStudentProgramme={currentStudentProgramme}\n                        reloadEnrollmentEvent={reloadEnrollmentEvent}\n                      />\n                    )}\n                  </>\n                )}\n              </>\n            )}\n          </>\n        )}\n        {selectedKey === 'registration' && (\n          <Registration\n            registrationEvent={semesterEvent.registrationEvent}\n            registrationHistory={semesterEvent.studentRegistration}\n            enrollmentEvent={semesterEvent.enrollmentEvent}\n            enrollmentHistory={semesterEvent.studentEnrollment}\n            reloadEnrollmentEvent={reloadEnrollmentEvent}\n          />\n        )}\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default CurrentEvents;\n"]},"metadata":{},"sourceType":"module"}