{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Documents/react-projects/hesmis-front/src/containers/EnrollmentHistory/EnrollForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { get, isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport PropTypes, { object } from 'prop-types';\nimport { Card, Col, Form, Row } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, DataNotFound, ReloadButton, SelectInput, SubmitButton } from '../../components/common';\nimport { enrollmentActions, appActions } from '../../config/actions';\nimport { formatMetadata, generalFormatter } from '../../helpers/dataFormatter';\nimport usePrevious from '../Hooks/usePrevious';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EnrollForm = ({\n  enrollmentEvent,\n  currentStudentProgramme,\n  reloadEnrollmentEvent\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    errors\n  } = useForm();\n  const {\n    enrolling,\n    enrollError,\n    gettingCurrentEvents\n  } = useSelector(state => state.enrollment);\n  const {\n    metadata\n  } = useSelector(state => state.app);\n  const [enrollmentStatusOptions, setEnrollmentOptions] = useState([]);\n  const [studyYearOptions, setStudyYearOptions] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const prevState = usePrevious({\n    enrollError\n  });\n  useEffect(() => {\n    if (isEmpty(metadata)) dispatch(appActions.getMetadata());\n  }, []);\n  useEffect(() => {\n    if (prevState && !isEmpty(enrollError) && enrollError !== prevState.enrollError) {\n      var _enrollError$server;\n\n      setErrorMessage(enrollError === null || enrollError === void 0 ? void 0 : (_enrollError$server = enrollError.server) === null || _enrollError$server === void 0 ? void 0 : _enrollError$server.message);\n    }\n  }, [enrollError]);\n  useEffect(() => {\n    if (!isEmpty(metadata)) {\n      setEnrollmentOptions(formatMetadata(metadata, 'ENROLLMENT STATUSES'));\n    }\n\n    if (!isEmpty(currentStudentProgramme)) {\n      setStudyYearOptions(generalFormatter(currentStudentProgramme.programme_study_years || [], 'programme_study_years', 'id'));\n    }\n  }, [metadata]);\n\n  const onClickEnrollButton = data => {\n    setErrorMessage(null);\n\n    if (!isEmpty(data) && !isEmpty(enrollmentEvent) && !isEmpty(currentStudentProgramme)) {\n      data.event_id = enrollmentEvent === null || enrollmentEvent === void 0 ? void 0 : enrollmentEvent.id;\n      dispatch(enrollmentActions.enrollStudent({ ...data,\n        student_programme_id: currentStudentProgramme.id\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isEmpty(enrollmentEvent) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DataNotFound, {\n        message: \"There is currently No open Enrollment Event.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(ReloadButton, {\n          loading: gettingCurrentEvents,\n          onClick: reloadEnrollmentEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n        className: \"font600 text-muted text-sm py-3\",\n        children: [\"ENROLL FOR\", /*#__PURE__*/_jsxDEV(\"strong\", {\n          className: \"mx-1\",\n          children: `${enrollmentEvent === null || enrollmentEvent === void 0 ? void 0 : enrollmentEvent.semester}, `\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), enrollmentEvent === null || enrollmentEvent === void 0 ? void 0 : enrollmentEvent.academic_year, currentStudentProgramme && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-options\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-xs\",\n            children: `PROG: ${currentStudentProgramme === null || currentStudentProgramme === void 0 ? void 0 : currentStudentProgramme.programme_code} - ${currentStudentProgramme === null || currentStudentProgramme === void 0 ? void 0 : currentStudentProgramme.programme_title}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: handleSubmit(onClickEnrollButton),\n        children: [/*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [errorMessage && /*#__PURE__*/_jsxDEV(AlertMessage, {\n            message: errorMessage,\n            show: true,\n            className: \"py-1 text-sm\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(SelectInput, {\n                name: \"study_year_id\",\n                register: register({\n                  required: 'Select the year of study you are enrolling for'\n                }),\n                label: \"YEAR OF STUDY\",\n                inline: true,\n                selectOptions: studyYearOptions,\n                error: get(errors, 'study_year_id.message')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(SelectInput, {\n                name: \"enrollment_status_id\",\n                register: register({\n                  required: 'Select enrollment type'\n                }),\n                label: \"ENROLLING AS?\",\n                inline: true,\n                selectOptions: enrollmentStatusOptions,\n                error: get(errors, 'enrollment_status_id.message')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n          className: \"text-right\",\n          children: /*#__PURE__*/_jsxDEV(SubmitButton, {\n            text: \"Enroll Now\",\n            loading: enrolling,\n            loadingText: \"Enrolling...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EnrollForm, \"43Rpt+Aa8rftmxHkGAo3oejcIpc=\", false, function () {\n  return [useDispatch, useForm, useSelector, useSelector, usePrevious];\n});\n\n_c = EnrollForm;\nEnrollForm.propTypes = {\n  reloadEnrollmentEvent: PropTypes.func.isRequired,\n  currentStudentProgramme: PropTypes.oneOfType([object]).isRequired,\n  enrollmentEvent: PropTypes.oneOfType([object]).isRequired\n};\nexport default EnrollForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EnrollForm\");","map":{"version":3,"sources":["/Users/admin/Documents/react-projects/hesmis-front/src/containers/EnrollmentHistory/EnrollForm.jsx"],"names":["get","isEmpty","React","useEffect","useState","PropTypes","object","Card","Col","Form","Row","useForm","useDispatch","useSelector","AlertMessage","DataNotFound","ReloadButton","SelectInput","SubmitButton","enrollmentActions","appActions","formatMetadata","generalFormatter","usePrevious","EnrollForm","enrollmentEvent","currentStudentProgramme","reloadEnrollmentEvent","dispatch","register","handleSubmit","errors","enrolling","enrollError","gettingCurrentEvents","state","enrollment","metadata","app","enrollmentStatusOptions","setEnrollmentOptions","studyYearOptions","setStudyYearOptions","errorMessage","setErrorMessage","prevState","getMetadata","server","message","programme_study_years","onClickEnrollButton","data","event_id","id","enrollStudent","student_programme_id","semester","academic_year","programme_code","programme_title","required","propTypes","func","isRequired","oneOfType"],"mappings":"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","sourcesContent":["import { get, isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport PropTypes, { object } from 'prop-types';\nimport { Card, Col, Form, Row } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  AlertMessage,\n  DataNotFound,\n  ReloadButton,\n  SelectInput,\n  SubmitButton,\n} from '../../components/common';\nimport { enrollmentActions, appActions } from '../../config/actions';\nimport { formatMetadata, generalFormatter } from '../../helpers/dataFormatter';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst EnrollForm = ({\n  enrollmentEvent,\n  currentStudentProgramme,\n  reloadEnrollmentEvent,\n}) => {\n  const dispatch = useDispatch();\n  const { register, handleSubmit, errors } = useForm();\n  const { enrolling, enrollError, gettingCurrentEvents } = useSelector(\n    (state) => state.enrollment\n  );\n  const { metadata } = useSelector((state) => state.app);\n\n  const [enrollmentStatusOptions, setEnrollmentOptions] = useState([]);\n  const [studyYearOptions, setStudyYearOptions] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const prevState = usePrevious({ enrollError });\n\n  useEffect(() => {\n    if (isEmpty(metadata)) dispatch(appActions.getMetadata());\n  }, []);\n\n  useEffect(() => {\n    if (\n      prevState &&\n      !isEmpty(enrollError) &&\n      enrollError !== prevState.enrollError\n    ) {\n      setErrorMessage(enrollError?.server?.message);\n    }\n  }, [enrollError]);\n\n  useEffect(() => {\n    if (!isEmpty(metadata)) {\n      setEnrollmentOptions(formatMetadata(metadata, 'ENROLLMENT STATUSES'));\n    }\n    if (!isEmpty(currentStudentProgramme)) {\n      setStudyYearOptions(\n        generalFormatter(\n          currentStudentProgramme.programme_study_years || [],\n          'programme_study_years',\n          'id'\n        )\n      );\n    }\n  }, [metadata]);\n\n  const onClickEnrollButton = (data) => {\n    setErrorMessage(null);\n    if (\n      !isEmpty(data) &&\n      !isEmpty(enrollmentEvent) &&\n      !isEmpty(currentStudentProgramme)\n    ) {\n      data.event_id = enrollmentEvent?.id;\n      dispatch(\n        enrollmentActions.enrollStudent({\n          ...data,\n          student_programme_id: currentStudentProgramme.id,\n        })\n      );\n    }\n  };\n\n  return (\n    <div>\n      {isEmpty(enrollmentEvent) ? (\n        <>\n          <DataNotFound message=\"There is currently No open Enrollment Event.\" />\n          <div className=\"text-center\">\n            <ReloadButton\n              loading={gettingCurrentEvents}\n              onClick={reloadEnrollmentEvent}\n            />\n          </div>\n        </>\n      ) : (\n        <Card>\n          <Card.Header className=\"font600 text-muted text-sm py-3\">\n            ENROLL FOR\n            <strong className=\"mx-1\">{`${enrollmentEvent?.semester}, `}</strong>\n            {enrollmentEvent?.academic_year}\n            {currentStudentProgramme && (\n              <div className=\"card-options\">\n                <div className=\"text-xs\">\n                  {`PROG: ${currentStudentProgramme?.programme_code} - ${currentStudentProgramme?.programme_title}`}\n                </div>\n              </div>\n            )}\n          </Card.Header>\n          <Form onSubmit={handleSubmit(onClickEnrollButton)}>\n            <Card.Body>\n              {errorMessage && (\n                <AlertMessage\n                  message={errorMessage}\n                  show\n                  className=\"py-1 text-sm\"\n                />\n              )}\n              <Row>\n                <Col md={6}>\n                  <SelectInput\n                    name=\"study_year_id\"\n                    register={register({\n                      required:\n                        'Select the year of study you are enrolling for',\n                    })}\n                    label=\"YEAR OF STUDY\"\n                    inline\n                    selectOptions={studyYearOptions}\n                    error={get(errors, 'study_year_id.message')}\n                  />\n                </Col>\n                <Col md={6}>\n                  <SelectInput\n                    name=\"enrollment_status_id\"\n                    register={register({\n                      required: 'Select enrollment type',\n                    })}\n                    label=\"ENROLLING AS?\"\n                    inline\n                    selectOptions={enrollmentStatusOptions}\n                    error={get(errors, 'enrollment_status_id.message')}\n                  />\n                </Col>\n              </Row>\n            </Card.Body>\n            <Card.Footer className=\"text-right\">\n              <SubmitButton\n                text=\"Enroll Now\"\n                loading={enrolling}\n                loadingText=\"Enrolling...\"\n              />\n            </Card.Footer>\n          </Form>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nEnrollForm.propTypes = {\n  reloadEnrollmentEvent: PropTypes.func.isRequired,\n  currentStudentProgramme: PropTypes.oneOfType([object]).isRequired,\n  enrollmentEvent: PropTypes.oneOfType([object]).isRequired,\n};\n\nexport default EnrollForm;\n"]},"metadata":{},"sourceType":"module"}