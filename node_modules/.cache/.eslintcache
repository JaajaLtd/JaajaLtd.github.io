[{"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/index.js":"1","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/reportWebVitals.js":"2","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/App.js":"3","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/services/historyService.js":"4","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/services/httpService.js":"5","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/index.js":"6","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/store/index.js":"7","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/routes/RoutePaths.js":"8","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/services/storageService.js":"9","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/index.jsx":"10","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Errors/PageNotFound.jsx":"11","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Hooks/usePrevious.jsx":"12","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/index.js":"13","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/payment/paymentReference.js":"14","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/index.jsx":"15","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Dashboard/index.jsx":"16","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/SidebarMenu.js":"17","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/SideTitle.jsx":"18","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/MainHeader.jsx":"19","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/SideBar.jsx":"20","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/SnackBar.jsx":"21","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/MainLayout.jsx":"22","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/AuthLayout.jsx":"23","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/payment/index.js":"24","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/enrollment/index.js":"25","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/index.js":"26","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/auth/index.js":"27","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/result/index.js":"28","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/registration/index.js":"29","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/app/index.js":"30","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/payment/paymentReference.js":"31","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/app/server.js":"32","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/routes/MenuList.js":"33","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/InputSelectField.jsx":"34","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/AlertMessage.jsx":"35","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/InputText.jsx":"36","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/DataNotFound.jsx":"37","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/AccordionHeader.jsx":"38","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/ReloadButton.jsx":"39","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/DataSpinner.jsx":"40","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/CustomModal.jsx":"41","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/PageLoader.jsx":"42","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/SubmitButton.jsx":"43","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/TabMenu.jsx":"44","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/SelectInput.jsx":"45","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Dashboard/AuthUserLoader.jsx":"46","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Errors/ErrorBoundary.jsx":"47","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/app/index.js":"48","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/payment/index.js":"49","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/auth/index.js":"50","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/result/index.js":"51","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/registration/index.js":"52","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/setting/index.js":"53","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/enrollment/index.js":"54","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Dashboard/Header.jsx":"55","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/payment/paymentReference.js":"56","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/payment/myInvoice.js":"57","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/Avatar.jsx":"58","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Pages/ComingSoon.jsx":"59","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/payment/myTransaction.js":"60","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/app/server.js":"61","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Auth/ResetPassword.jsx":"62","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Auth/Login.jsx":"63","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/app/index.js":"64","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/auth/index.js":"65","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/enrollment/index.js":"66","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/setting/index.js":"67","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/result/index.js":"68","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/registration/index.js":"69","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Dashboard/ProgrammeTab.jsx":"70","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/helpers/dataFormatter.js":"71","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Auth/LoginForm.jsx":"72","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Auth/ResetForm.jsx":"73","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Services/index.jsx":"74","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Results/index.jsx":"75","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/index.js":"76","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Services/Refund.jsx":"77","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Services/ChangeOfProgramme.jsx":"78","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Results/MyResult.jsx":"79","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/result.js":"80","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/registration.js":"81","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/payment.js":"82","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/enrollment.js":"83","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/auth.js":"84","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/paymentReference.js":"85","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/setting.js":"86","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/app.js":"87","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Payments/MyInvoices.jsx":"88","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Payments/MyTransactions.jsx":"89","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Payments/SearchPayment.jsx":"90","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/index.jsx":"91","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Payments/TransactionTables.jsx":"92","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Payments/Invoice.jsx":"93","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/SingleRegistrationHistory.jsx":"94","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/helpers/dataTableCustomStyle.js":"95","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Events/CurrentEvents.jsx":"96","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/CourseUnitsTable.jsx":"97","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/index.jsx":"98","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/index.jsx":"99","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/NewUser/index.jsx":"100","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/index.jsx":"101","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/AcademicCalender/index.jsx":"102","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/Registration.jsx":"103","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/EnrollForm.jsx":"104","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/EnrolledStudent.jsx":"105","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/AcademicDetail.jsx":"106","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/NextOfKin.jsx":"107","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/GuardianDetail.jsx":"108","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/ChangePassword.jsx":"109","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/ProfileData.jsx":"110","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/Enrollments.jsx":"111","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/SinglePaymentReference.jsx":"112","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/ReferenceModal.jsx":"113","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/GeneratePaymentReference.jsx":"114","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/RegisterStudent.jsx":"115","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/RegisteredStudent.jsx":"116","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/SingleEnrollment.jsx":"117","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/helper.js":"118","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/UnPaidInvoices.jsx":"119","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/RegistrationForm.jsx":"120","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/GeneratePaymentReference.jsx":"121","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/SelectedCourseUnits.jsx":"122","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/StudyYearCourseUnits.jsx":"123","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/InvoiceCard.jsx":"124","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/RegistrationStatusPopUp.jsx":"125","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/InvoiceForm.jsx":"126"},{"size":1365,"mtime":1657098043610,"results":"127","hashOfConfig":"128"},{"size":362,"mtime":1657098043610,"results":"129","hashOfConfig":"128"},{"size":2050,"mtime":1657098043595,"results":"130","hashOfConfig":"128"},{"size":88,"mtime":1657098043604,"results":"131","hashOfConfig":"128"},{"size":3177,"mtime":1657098043605,"results":"132","hashOfConfig":"128"},{"size":506,"mtime":1657098043604,"results":"133","hashOfConfig":"128"},{"size":676,"mtime":1657098043605,"results":"134","hashOfConfig":"128"},{"size":332,"mtime":1657098043603,"results":"135","hashOfConfig":"128"},{"size":256,"mtime":1657098043605,"results":"136","hashOfConfig":"128"},{"size":373,"mtime":1657098043600,"results":"137","hashOfConfig":"128"},{"size":902,"mtime":1657098043607,"results":"138","hashOfConfig":"128"},{"size":631,"mtime":1657098043607,"results":"139","hashOfConfig":"128"},{"size":888,"mtime":1657098043601,"results":"140","hashOfConfig":"128"},{"size":2189,"mtime":1657098043604,"results":"141","hashOfConfig":"128"},{"size":693,"mtime":1657098043600,"results":"142","hashOfConfig":"128"},{"size":1088,"mtime":1657098043606,"results":"143","hashOfConfig":"128"},{"size":2180,"mtime":1657098043600,"results":"144","hashOfConfig":"128"},{"size":939,"mtime":1657098043600,"results":"145","hashOfConfig":"128"},{"size":4251,"mtime":1657098043600,"results":"146","hashOfConfig":"128"},{"size":3029,"mtime":1657098043600,"results":"147","hashOfConfig":"128"},{"size":346,"mtime":1657098043600,"results":"148","hashOfConfig":"128"},{"size":3805,"mtime":1657098043600,"results":"149","hashOfConfig":"128"},{"size":2317,"mtime":1657098043600,"results":"150","hashOfConfig":"128"},{"size":2320,"mtime":1657098043604,"results":"151","hashOfConfig":"128"},{"size":2261,"mtime":1657098043604,"results":"152","hashOfConfig":"128"},{"size":865,"mtime":1657098043602,"results":"153","hashOfConfig":"128"},{"size":5056,"mtime":1657098043604,"results":"154","hashOfConfig":"128"},{"size":741,"mtime":1657098043604,"results":"155","hashOfConfig":"128"},{"size":2790,"mtime":1657098043604,"results":"156","hashOfConfig":"128"},{"size":1893,"mtime":1657098043603,"results":"157","hashOfConfig":"128"},{"size":797,"mtime":1657098043601,"results":"158","hashOfConfig":"128"},{"size":372,"mtime":1657098043601,"results":"159","hashOfConfig":"128"},{"size":2562,"mtime":1657098043603,"results":"160","hashOfConfig":"128"},{"size":3106,"mtime":1657098043599,"results":"161","hashOfConfig":"128"},{"size":710,"mtime":1657098043599,"results":"162","hashOfConfig":"128"},{"size":5589,"mtime":1657098043599,"results":"163","hashOfConfig":"128"},{"size":546,"mtime":1657098043599,"results":"164","hashOfConfig":"128"},{"size":1076,"mtime":1657098043599,"results":"165","hashOfConfig":"128"},{"size":487,"mtime":1657098043599,"results":"166","hashOfConfig":"128"},{"size":680,"mtime":1657098043599,"results":"167","hashOfConfig":"128"},{"size":1567,"mtime":1657098043599,"results":"168","hashOfConfig":"128"},{"size":669,"mtime":1657098043599,"results":"169","hashOfConfig":"128"},{"size":1161,"mtime":1657098043600,"results":"170","hashOfConfig":"128"},{"size":1366,"mtime":1657098043600,"results":"171","hashOfConfig":"128"},{"size":2245,"mtime":1657098043599,"results":"172","hashOfConfig":"128"},{"size":3375,"mtime":1657098043605,"results":"173","hashOfConfig":"128"},{"size":2137,"mtime":1657098043606,"results":"174","hashOfConfig":"128"},{"size":834,"mtime":1657098043601,"results":"175","hashOfConfig":"128"},{"size":815,"mtime":1657098043601,"results":"176","hashOfConfig":"128"},{"size":2570,"mtime":1657098043601,"results":"177","hashOfConfig":"128"},{"size":303,"mtime":1657098043601,"results":"178","hashOfConfig":"128"},{"size":1258,"mtime":1657098043601,"results":"179","hashOfConfig":"128"},{"size":372,"mtime":1657098043601,"results":"180","hashOfConfig":"128"},{"size":964,"mtime":1657098043601,"results":"181","hashOfConfig":"128"},{"size":2162,"mtime":1657098043606,"results":"182","hashOfConfig":"128"},{"size":1394,"mtime":1657098043603,"results":"183","hashOfConfig":"128"},{"size":712,"mtime":1657098043603,"results":"184","hashOfConfig":"128"},{"size":595,"mtime":1657098043607,"results":"185","hashOfConfig":"128"},{"size":701,"mtime":1657098043608,"results":"186","hashOfConfig":"128"},{"size":1195,"mtime":1657098043603,"results":"187","hashOfConfig":"128"},{"size":622,"mtime":1657098043602,"results":"188","hashOfConfig":"128"},{"size":1025,"mtime":1657098043605,"results":"189","hashOfConfig":"128"},{"size":2741,"mtime":1657098043605,"results":"190","hashOfConfig":"128"},{"size":1751,"mtime":1657098043602,"results":"191","hashOfConfig":"128"},{"size":5188,"mtime":1657098043602,"results":"192","hashOfConfig":"128"},{"size":2003,"mtime":1657098043602,"results":"193","hashOfConfig":"128"},{"size":630,"mtime":1657098043603,"results":"194","hashOfConfig":"128"},{"size":741,"mtime":1657098043603,"results":"195","hashOfConfig":"128"},{"size":2415,"mtime":1657098043603,"results":"196","hashOfConfig":"128"},{"size":2598,"mtime":1657098043606,"results":"197","hashOfConfig":"128"},{"size":13765,"mtime":1657098043610,"results":"198","hashOfConfig":"128"},{"size":1781,"mtime":1657098043605,"results":"199","hashOfConfig":"128"},{"size":5552,"mtime":1657098043605,"results":"200","hashOfConfig":"128"},{"size":1757,"mtime":1657098043610,"results":"201","hashOfConfig":"128"},{"size":2609,"mtime":1657098043609,"results":"202","hashOfConfig":"128"},{"size":462,"mtime":1657098043602,"results":"203","hashOfConfig":"128"},{"size":890,"mtime":1657098043610,"results":"204","hashOfConfig":"128"},{"size":936,"mtime":1657098043610,"results":"205","hashOfConfig":"128"},{"size":7144,"mtime":1657098043609,"results":"206","hashOfConfig":"128"},{"size":117,"mtime":1657098043602,"results":"207","hashOfConfig":"128"},{"size":570,"mtime":1657098043602,"results":"208","hashOfConfig":"128"},{"size":289,"mtime":1657098043602,"results":"209","hashOfConfig":"128"},{"size":331,"mtime":1657098043602,"results":"210","hashOfConfig":"128"},{"size":823,"mtime":1657098043602,"results":"211","hashOfConfig":"128"},{"size":324,"mtime":1657098043602,"results":"212","hashOfConfig":"128"},{"size":241,"mtime":1657098043602,"results":"213","hashOfConfig":"128"},{"size":421,"mtime":1657098043601,"results":"214","hashOfConfig":"128"},{"size":6710,"mtime":1657098043608,"results":"215","hashOfConfig":"128"},{"size":2983,"mtime":1657098043608,"results":"216","hashOfConfig":"128"},{"size":5167,"mtime":1657098043608,"results":"217","hashOfConfig":"128"},{"size":3508,"mtime":1657098043609,"results":"218","hashOfConfig":"128"},{"size":1786,"mtime":1657098043608,"results":"219","hashOfConfig":"128"},{"size":6244,"mtime":1657098043608,"results":"220","hashOfConfig":"128"},{"size":3428,"mtime":1657098043609,"results":"221","hashOfConfig":"128"},{"size":839,"mtime":1657098043610,"results":"222","hashOfConfig":"128"},{"size":4332,"mtime":1657098043607,"results":"223","hashOfConfig":"128"},{"size":1748,"mtime":1657098043609,"results":"224","hashOfConfig":"128"},{"size":5144,"mtime":1657098043607,"results":"225","hashOfConfig":"128"},{"size":5986,"mtime":1657098043608,"results":"226","hashOfConfig":"128"},{"size":1682,"mtime":1657098043607,"results":"227","hashOfConfig":"128"},{"size":1915,"mtime":1657098043606,"results":"228","hashOfConfig":"128"},{"size":450,"mtime":1657098043605,"results":"229","hashOfConfig":"128"},{"size":1350,"mtime":1657098043609,"results":"230","hashOfConfig":"128"},{"size":5107,"mtime":1657098043606,"results":"231","hashOfConfig":"128"},{"size":1068,"mtime":1657098043606,"results":"232","hashOfConfig":"128"},{"size":6276,"mtime":1657098043607,"results":"233","hashOfConfig":"128"},{"size":706,"mtime":1657098043607,"results":"234","hashOfConfig":"128"},{"size":1742,"mtime":1657098043607,"results":"235","hashOfConfig":"128"},{"size":4090,"mtime":1657098043607,"results":"236","hashOfConfig":"128"},{"size":2461,"mtime":1657098043607,"results":"237","hashOfConfig":"128"},{"size":1832,"mtime":1657098043606,"results":"238","hashOfConfig":"128"},{"size":2420,"mtime":1657098043608,"results":"239","hashOfConfig":"128"},{"size":3463,"mtime":1657098043608,"results":"240","hashOfConfig":"128"},{"size":9091,"mtime":1657098043608,"results":"241","hashOfConfig":"128"},{"size":5576,"mtime":1657098043609,"results":"242","hashOfConfig":"128"},{"size":2409,"mtime":1657098043609,"results":"243","hashOfConfig":"128"},{"size":2476,"mtime":1657098043606,"results":"244","hashOfConfig":"128"},{"size":2346,"mtime":1657098043608,"results":"245","hashOfConfig":"128"},{"size":2656,"mtime":1657098043608,"results":"246","hashOfConfig":"128"},{"size":4111,"mtime":1657098043609,"results":"247","hashOfConfig":"128"},{"size":6766,"mtime":1657098043606,"results":"248","hashOfConfig":"128"},{"size":3411,"mtime":1657098043609,"results":"249","hashOfConfig":"128"},{"size":2207,"mtime":1657098043609,"results":"250","hashOfConfig":"128"},{"size":2571,"mtime":1657098043606,"results":"251","hashOfConfig":"128"},{"size":3410,"mtime":1657098043609,"results":"252","hashOfConfig":"128"},{"size":2005,"mtime":1657098043606,"results":"253","hashOfConfig":"128"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"155wg30",{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410"},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467"},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473"},{"filePath":"474","messages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476"},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494"},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"503"},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506"},{"filePath":"507","messages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"518","messages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522"},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/reportWebVitals.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/App.js",["533","534"],"import { isEmpty } from 'lodash';\nimport React, { Suspense, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { useToasts } from 'react-toast-notifications';\nimport { PageLoader } from './components/common';\nimport { appActions } from './config/actions';\nimport RoutePaths from './config/routes/RoutePaths';\nimport Dashboard from './containers/Dashboard';\nimport PageNotFound from './containers/Errors/PageNotFound';\nimport usePrevious from './containers/Hooks/usePrevious';\nimport './custom.scss';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const { addToast, removeAllToasts } = useToasts();\n  const { serverSuccess, serverError } = useSelector((state) => state.server);\n  const { metadata, institutionStructure } = useSelector((state) => state.app);\n  const prevState = usePrevious({ serverSuccess, serverError });\n\n  useEffect(() => {\n    if (isEmpty(institutionStructure)) {\n      dispatch(appActions.getInstitutionStructure());\n    }\n    if (isEmpty(metadata)) {\n      dispatch(appActions.getMetadata());\n    }\n  }, []); \n\n  useEffect(() => {\n    if (!isEmpty(prevState)) {\n      if (!isEmpty(serverError) && serverError !== prevState.serverError) {\n        removeAllToasts();\n        addToast(serverError?.server?.message, {\n          autoDismiss: true,\n          appearance: 'error',\n          autoDismissTimeout: 6000,\n        });\n      }\n      if (\n        !isEmpty(serverSuccess) &&\n        serverSuccess !== prevState.serverSuccess\n      ) {\n        addToast(serverSuccess?.server?.message, {\n          autoDismiss: true,\n          appearance: 'success',\n        });\n      }\n    }\n  }, [serverError, serverSuccess]);\n\n  return (\n    <Suspense fallback={<PageLoader />}>\n      <Router>\n        <Switch>\n          <Route exact path={RoutePaths.dashboard.path} component={Dashboard} />\n          <Route path=\"*\" component={PageNotFound} />\n        </Switch>\n      </Router>\n    </Suspense>\n  );\n}\n\nexport default App;","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/services/historyService.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/services/httpService.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/store/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/routes/RoutePaths.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/services/storageService.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/index.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Errors/PageNotFound.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Hooks/usePrevious.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/payment/paymentReference.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/index.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Dashboard/index.jsx",["535"],"import { isEmpty } from 'lodash';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AuthLayout } from '../../components/shared';\nimport MainLayout from '../../components/shared/MainLayout';\nimport { authActions } from '../../config/actions';\nimport { getAccessToken } from '../../config/services/storageService';\nimport ErrorBoundary from '../Errors/ErrorBoundary';\nimport AuthUserLoader from './AuthUserLoader';\n\nconst Dashboard = () => {\n  const dispatch = useDispatch();\n  const { authUser, isAuthenticated } = useSelector((state) => state.auth);\n  const { selectedMenu } = useSelector((state) => state.setting);\n\n  const accessToken = getAccessToken();\n\n  useEffect(() => {\n    if (!isEmpty(accessToken)) dispatch(authActions.setIsAuthenticated(true));\n  }, [accessToken, selectedMenu]);\n\n  return (\n    <ErrorBoundary>\n      {isAuthenticated === true ? (\n        <>{isEmpty(authUser) ? <AuthUserLoader /> : <MainLayout />}</>\n      ) : (\n        <AuthLayout />\n      )}\n    </ErrorBoundary>\n  );\n};\n\nexport default Dashboard;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/SidebarMenu.js",["536"],"/* eslint-disable react/react-in-jsx-scope */\nimport {\n  CalendarOutlined,\n  FieldBinaryOutlined,\n  EditOutlined,\n  FileDoneOutlined,\n  ReconciliationOutlined,\n  DollarCircleOutlined,\n  UserOutlined,\n  FileProtectOutlined,\n} from '@ant-design/icons';\nimport {\n  FaClipboardList,\n  FaPaperclip,\n  FaRegCopy,\n  FaRegEdit,\n  FaSearchDollar,\n  FaTasks,\n  FaUserEdit,\n  FaUserGraduate,\n  FaUser,\n} from 'react-icons/fa';\nimport MenuList from '../../config/routes/MenuList';\n\nconst sideBarMenu = [\n  {\n    title: 'Payments & Invoices',\n    key: 'payments',\n    icon: <DollarCircleOutlined />,\n    routes: [\n      {\n        ...MenuList.MyInvoice,\n        icon: <FaPaperclip />,\n      },\n      {\n        ...MenuList.MyTransaction,\n        icon: <FileProtectOutlined />,\n      },\n    ],\n  },\n  {\n    ...MenuList.SearchPayment,\n    icon: <FaSearchDollar />,\n  },\n  {\n    ...MenuList.PaymentReference,\n    icon: <FieldBinaryOutlined />,\n  },\n  {\n    title: 'Enrollment & Registration',\n    key: 'registration-and-enrollment',\n    icon: <EditOutlined />,\n    routes: [\n      {\n        ...MenuList.SelfEnrollment,\n        icon: <FaUserEdit />,\n      },\n      {\n        ...MenuList.EnrollmentHistory,\n        icon: <FileDoneOutlined />,\n      },\n      {\n        ...MenuList.RegistrationHistory,\n        icon: <FileDoneOutlined />,\n      },\n    ],\n  },\n  {\n    title: 'My Programme',\n    key: 'my-programmes',\n    icon: <FaUserGraduate />,\n    routes: [\n      {\n        ...MenuList.MyResults,\n        icon: <FaTasks />,\n      },\n    ],\n  },\n  {\n    title: 'Services',\n    key: 'services',\n    icon: <ReconciliationOutlined />,\n    routes: [\n      {\n        ...MenuList.Services,\n        icon: <FaRegEdit />,\n      },\n      {\n        title: 'Service History',\n        action: 'service-history',\n        icon: <FaClipboardList />,\n      },\n      {\n        title: 'Complaints',\n        action: 'complaints',\n        icon: <FaRegCopy />,\n      },\n    ],\n  },\n  {\n    ...MenuList.ProfileData,\n    icon: <UserOutlined />,\n  },\n  {\n    ...MenuList.UserRegister,\n    icon: <UserOutlined />,\n  },\n  {\n    ...MenuList.AcademicCalendar,\n    icon: <CalendarOutlined />,\n  },\n];\n\nexport default sideBarMenu;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/SideTitle.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/MainHeader.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/SideBar.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/SnackBar.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/MainLayout.jsx",["537","538"],"import { Drawer, Layout } from 'antd';\nimport { isEmpty } from 'lodash';\nimport React, { useEffect } from 'react';\nimport Helmet from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { appActions, authActions, settingActions } from '../../config/actions';\nimport MenuList from '../../config/routes/MenuList';\nimport HeaderComponent from '../../containers/Dashboard/Header';\nimport ComingSoon from '../../containers/Pages/ComingSoon';\nimport MainHeader from './MainHeader';\nimport SideBar from './SideBar';\nimport SideTitle from './SideTitle';\n\nconst { Sider, Content, Footer } = Layout;\n\nconst MainLayout = () => {\n  const dispatch = useDispatch();\n  const { selectedMenu, isToggled } = useSelector((state) => state.setting);\n  const { authUser, currentStudentProgramme } = useSelector(\n    (state) => state.auth\n  );\n  const { institutionStructure } = useSelector((state) => state.app);\n  const isMobileDevice = useMediaQuery({ maxWidth: 767 });\n\n  useEffect(() => {\n    if (isEmpty(authUser)) {\n      dispatch(authActions.getAuthUser());\n    }\n    if (isEmpty(institutionStructure))\n      dispatch(appActions.getInstitutionStructure());\n  }, []);\n\n  useEffect(() => {\n    if (isEmpty(selectedMenu)) {\n      dispatch(settingActions.setSelectedMenu(MenuList.SelfEnrollment));\n    }\n  }, [selectedMenu]);\n\n  const renderSwitchStatement = () => {\n    let component = ComingSoon;\n    const findMenuKey = Object.keys(MenuList).find(\n      (menu) => MenuList[menu].action === selectedMenu.action\n    );\n\n    if (findMenuKey) {\n      component = MenuList[findMenuKey].Component;\n    }\n    return React.createElement(component);\n  };\n\n  const hideOrShowSideBar = () => {\n    dispatch(settingActions.setIsToggled(!isToggled));\n  };\n\n  const getToggleMargin = () => {\n    if (isMobileDevice) return 0;\n\n    return isToggled ? 0 : 260;\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>{selectedMenu?.title}</title>\n      </Helmet>\n\n      <Layout style={{ minHeight: '100vh' }} key={currentStudentProgramme.id}>\n        {isMobileDevice ? (\n          <Drawer\n            title={<SideTitle />}\n            placement=\"left\"\n            closable={false}\n            onClose={hideOrShowSideBar}\n            visible={isToggled}\n            getContainer={false}\n            className=\"p-0\"\n            bodyStyle={{ padding: 0 }}\n            headerStyle={{ padding: '10px 10px' }}\n            style={{\n              overflow: 'auto',\n              height: '100vh',\n              position: 'fixed',\n              left: 0,\n            }}\n          >\n            <SideBar />\n          </Drawer>\n        ) : (\n          <Sider\n            theme=\"light\"\n            breakpoint=\"md\"\n            className=\"border-end\"\n            width={260}\n            collapsible\n            reverseArrow\n            collapsedWidth={0}\n            collapsed={isToggled}\n            onCollapse={hideOrShowSideBar}\n            style={{\n              overflow: 'auto',\n              height: '100vh',\n              position: 'fixed',\n              left: 0,\n            }}\n          >\n            <div className=\"bg-white font600 p-2\">\n              <SideTitle />\n            </div>\n            <SideBar />\n          </Sider>\n        )}\n\n        <Layout\n          style={{\n            marginLeft: getToggleMargin(),\n            transition: 'all 0.2s',\n          }}\n        >\n          <MainHeader />\n          <Content>\n            <HeaderComponent />\n            <div className=\"p-3\">{renderSwitchStatement()}</div>\n          </Content>\n          <Footer className=\"bg-white text-sm text-muted font600 py-3 border-top text-center\">\n            &copy; School System\n          </Footer>\n        </Layout>\n      </Layout>\n    </>\n  );\n};\n\nexport default MainLayout;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/shared/AuthLayout.jsx",["539"],"import { Image } from 'antd';\nimport { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Logo from '../../assets/img/default.png';\nimport { appActions } from '../../config/actions';\nimport RoutePaths from '../../config/routes/RoutePaths';\nimport Login from '../../containers/Auth/Login';\nimport ResetPassword from '../../containers/Auth/ResetPassword';\nimport DataSpinner from '../common/DataSpinner';\n\nconst AuthLayout = () => {\n  const dispatch = useDispatch();\n  const { institutionStructure, gettingInstitutionStructure } = useSelector(\n    (state) => state.app\n  );\n  const [currentPage, setCurrentPage] = useState('login');\n\n  useEffect(() => {\n    if (isEmpty(institutionStructure))\n      dispatch(appActions.getInstitutionStructure());\n  }, []);\n\n  return (\n    <div className=\"text-primary overflow-auto\">\n      <Container fluid>\n        <Row className=\"min-vh-100 justify-content-center py-4 g-0\">\n          <Col md={4} lg={3} sm={6} className=\"my-auto mx-center\">\n            <div className=\"mx-auto text-center\">\n              {gettingInstitutionStructure ? (\n                <DataSpinner text=\"\" />\n              ) : (\n                <Image\n                  src={`${process.env.REACT_APP_INSTITUTION_LOGO_PATH}/${institutionStructure?.institution_logo}`}\n                  alt=\"University Logo\"\n                  style={{ maxWidth: '200px' }}\n                  className=\"text-center\"\n                  fallback={Logo}\n                  preview={false}\n                  draggable={false}\n                />\n              )}\n            </div>\n            {!gettingInstitutionStructure && (\n              <div className=\"align-centre mt-1 font600 text-uppercase text-md mb-4 mt-3\">\n                STUDENT PORTAL\n              </div>\n            )}\n            {(currentPage === RoutePaths.login.path && (\n              <Login setCurrentPage={setCurrentPage} />\n            )) ||\n              (currentPage === RoutePaths.resetPassword.path && (\n                <ResetPassword setCurrentPage={setCurrentPage} />\n              )) || <div>PAGE NOT FOUND</div>}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default AuthLayout;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/payment/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/enrollment/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/auth/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/result/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/registration/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/saga/app/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/payment/paymentReference.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/app/server.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/routes/MenuList.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/InputSelectField.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/AlertMessage.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/InputText.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/DataNotFound.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/AccordionHeader.jsx",["540"],"import React from 'react';\nimport PropTypes, { any } from 'prop-types';\nimport { Accordion } from 'react-bootstrap';\n//import { useAccordionButton } from 'react-bootstrap/AccordionButton';\n\nconst AccordionHeader = ({\n  activeKey,\n  setActiveKey,\n  eventKey,\n  children,\n  ...props\n}) => {\n  const handleActiveKeyState = () => {\n    if (activeKey === eventKey) {\n      setActiveKey(null);\n    } else {\n      setActiveKey(eventKey);\n    }\n  };/*\n  const handleOnToggleClick = useAccordionButton(eventKey, () => {\n    handleActiveKeyState();\n  });*/\n\n  return (\n    <>\n      <Accordion.Header\n        className=\"text-info bg-white\"\n        {...props}\n      >\n        <div className=\"text-sm font600\">{children}</div>\n      </Accordion.Header>\n    </>\n  );\n};\n\nAccordionHeader.defaultProps = {\n  activeKey: 1,\n  eventKey: null,\n  children: null,\n};\n\nAccordionHeader.propTypes = {\n  activeKey: PropTypes.oneOfType([any]),\n  setActiveKey: PropTypes.func.isRequired,\n  eventKey: PropTypes.oneOfType([any]),\n  children: PropTypes.oneOfType([any]),\n};\n\nexport default AccordionHeader;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/ReloadButton.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/DataSpinner.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/CustomModal.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/PageLoader.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/SubmitButton.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/TabMenu.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/components/common/SelectInput.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Dashboard/AuthUserLoader.jsx",["541","542"],"import { LoadingOutlined, UserOutlined } from '@ant-design/icons';\nimport { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Button, Container } from 'react-bootstrap';\nimport { FaSignInAlt } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport  AlertMessage from '../../components/common/AlertMessage';\nimport ReloadButton  from '../../components/common/ReloadButton';\nimport { appActions, authActions } from '../../config/actions';\nimport {\n  clearToken,\n  getAccessToken,\n} from '../../config/services/storageService';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst AuthUserLoader = () => {\n  const dispatch = useDispatch();\n  const { authUser, authUserError, isAuthenticated, gettingAuthUser } =\n    useSelector((state) => state.auth);\n  const { institutionStructure, gettingInstitutionStructure } = useSelector(\n    (state) => state.app\n  );\n  const [errorMessage, setErrorMessage] = useState(null);\n  const prevState = usePrevious({ authUserError });\n  const accessToken = getAccessToken();\n\n  useEffect(() => {\n    if (isEmpty(institutionStructure)) {\n      dispatch(appActions.getInstitutionStructure());\n    }\n    if (\n      isEmpty(authUser) &&\n      !isEmpty(accessToken) &&\n      isAuthenticated === true\n    ) {\n      dispatch(authActions.getAuthUser());\n    }\n  }, []);\n\n  const logoutCurrentUser = () => {\n    clearToken();\n    dispatch(authActions.setIsAuthenticated(false));\n  };\n\n  useEffect(() => {\n    setErrorMessage(null);\n    if (isEmpty(accessToken)) {\n      logoutCurrentUser();\n    } else if (\n      !isEmpty(prevState) &&\n      !isEmpty(authUserError) &&\n      prevState.authUserError !== authUserError\n    ) {\n      setErrorMessage(\n        authUserError?.error?.message || authUserError?.server?.message\n      );\n    }\n  }, [authUserError, accessToken]);\n\n  return (\n    <div className=\"vh-100 text-center bg-light d-flex m-0 p-4\">\n      <Container className=\"align-middle my-auto mx-auto\">\n        <UserOutlined className=\"display-2 text-primary\" />\n\n        {(gettingAuthUser || gettingInstitutionStructure) && (\n          <div className=\"text-center text-sm my-1 text-uppercase text-primary font500\">\n            <LoadingOutlined />\n            <div className=\"font600 d-inline ms-2\">Loading Your Profile...</div>\n          </div>\n        )}\n\n        {errorMessage && (\n          <div className=\"text-center\">\n            <div className=\"font600 text-uppercase text-sm text-info my-3\">\n              Oops... We are Unable to Load your Profile\n            </div>\n            <AlertMessage\n              message={errorMessage}\n              className=\"text-sm font500 py-1\"\n            />\n\n            <ReloadButton\n              loading={gettingAuthUser}\n              text=\"Reload Profile\"\n              size=\"sm\"\n              className=\"d-inline me-2 py-1 text-sm font600 text-capitalize\"\n              onClick={() => dispatch(authActions.getAuthUser())}\n            />\n\n            <Button\n              className=\"d-inline py-1 text-sm font600 text-capitalize\"\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={logoutCurrentUser}\n            >\n              <FaSignInAlt className=\"me-1\" />\n              Log Out\n            </Button>\n          </div>\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default AuthUserLoader;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Errors/ErrorBoundary.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/app/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/payment/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/auth/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/result/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/registration/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/setting/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/actions/enrollment/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Dashboard/Header.jsx",["543","544","545","546","547","548","549","550"],"import { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { ButtonGroup, Card, Button } from 'react-bootstrap';\nimport { FaUserCheck, FaUserTimes } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, DataSpinner } from '../../components/common';\nimport { appActions, enrollmentActions } from '../../config/actions';\nimport ProgrammeTab from './ProgrammeTab';\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const { gettingCurrentSemester, currentEvents } = useSelector(\n    (state) => state.enrollment\n  );\n  const { currentStudentProgramme, accountBalance } = useSelector(\n    (state) => state.auth\n  );\n  const { currentSemester } = useSelector((state) => state.app);\n  const [isRegistered, setIsRegistered] = useState(false);\n\n  const reloadCurrentSemester = () => {\n    dispatch(appActions.getCurrentSemester());\n    if (!isEmpty(currentStudentProgramme))\n      dispatch(enrollmentActions.getCurrentEvents(currentStudentProgramme?.id));\n  };\n\n  useEffect(() => {\n    if (isEmpty(currentSemester)) {\n      reloadCurrentSemester();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(currentEvents)) {\n      setIsRegistered(!isEmpty(currentEvents.studentRegistration));\n    }\n  }, [currentEvents]);\n\n  const buttonOptions = [\n    {\n      id: 1,\n      title: 'Current Yr',\n      value: currentSemester?.academicYear?.academicYear?.metadata_value,\n      color: 'info',\n    },\n    {\n      id: 2,\n      title: 'Current Sem',\n      value: currentSemester?.semester?.metadata_value,\n      color: 'info',\n    },\n    {\n      id: 3,\n      title: 'Reg. Status',\n      value: isRegistered ? 'REGISTERED' : 'NOT REGISTERED',\n      color: isRegistered ? 'success' : 'danger',\n      icon: isRegistered ? (\n        <FaUserCheck className=\"me-1\" />\n      ) : (\n        <FaUserTimes className=\"me-1\" />\n      ),\n    },\n  ];\n  return (\n    <>\n      <ProgrammeTab />\n      <Card className=\"border-top border-bottom border-start-0 border-end-0\">\n        <Card.Header className=\"py-2 px-3 border-0 mb-0\">\n        </Card.Header>\n      </Card>\n    </>\n  );\n};\n\nexport default Header;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/payment/paymentReference.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/payment/myInvoice.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/Avatar.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Pages/ComingSoon.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/payment/myTransaction.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/app/server.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Auth/ResetPassword.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Auth/Login.jsx",["551","552","553"],"import { isEmpty } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useCookies } from 'react-cookie';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage } from '../../components/common';\nimport { authActions } from '../../config/actions';\nimport RoutePaths from '../../config/routes/RoutePaths';\nimport { removeEmptyOrNullObject } from '../../helpers/dataFormatter';\nimport usePrevious from '../Hooks/usePrevious';\nimport LoginForm from './LoginForm';\n\nconst Login = ({ setCurrentPage }) => {\n  const dispatch = useDispatch();\n  const [error, setError] = useState(null);\n  const [cookies, setCookie] = useCookies();\n  const { loginError, loginData, isAuthenticated } = useSelector(\n    (state) => state.auth\n  );\n  const previousState = usePrevious({ loginError, loginData });\n  const accessToken = cookies.auth_access;\n\n  useEffect(() => {\n    if (!isEmpty(accessToken?.token) && isAuthenticated === true) {\n      dispatch(authActions.setIsAuthenticated(true));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (\n      !isEmpty(previousState) &&\n      !isEmpty(loginData) &&\n      previousState.loginData !== loginData\n    ) {\n      if (loginData.server?.status === true) {\n        setCookie('auth_access', loginData.access_token, {\n          path: '/',\n          sameSite: true,\n        });\n        dispatch(authActions.setIsAuthenticated(true));\n      }\n    }\n  }, [loginData]);\n\n  useEffect(() => {\n    if (\n      !isEmpty(previousState) &&\n      !isEmpty(loginError) &&\n      previousState.loginError !== loginError\n    ) {\n      const message =\n        loginError.error?.message ||\n        loginError.error ||\n        loginError.server.message;\n      setError(message);\n\n      if (message === 'Please change your default password before login in.') {\n        setTimeout(() => {\n          setCurrentPage(RoutePaths.resetPassword.path);\n        }, 2000);\n      }\n    }\n  }, [loginError]);\n\n  const onSubmit = (data) => {\n    setError(null);\n    if (!isEmpty(data)) {\n      dispatch(authActions.loginStudent(removeEmptyOrNullObject(data)));\n    }\n  };\n\n  return (\n    <>\n      {!isEmpty(error) && (\n        <AlertMessage message={error} className=\"p-1 px-3 text-sm rounded-sm\" />\n      )}\n      <LoginForm onSubmit={onSubmit} />\n      <div className=\"mt-3 mb-2 text-center text-sm font600\">\n        <Button\n          variant=\"link\"\n          className=\"text-sm\"\n          onClick={() => setCurrentPage(RoutePaths.resetPassword.path)}\n        >\n          Reset My Password\n        </Button>\n      </div>\n    </>\n  );\n};\n\nLogin.propTypes = {\n  setCurrentPage: PropTypes.func.isRequired,\n};\n\nexport default Login;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/app/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/auth/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/enrollment/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/setting/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/result/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/reducers/registration/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Dashboard/ProgrammeTab.jsx",["554","555"],"import { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SelectInput } from '../../components/common';\nimport { authActions } from '../../config/actions';\nimport { formatProgrammes } from '../../helpers/dataFormatter';\n\nconst ProgrammeTab = () => {\n  const dispatch = useDispatch();\n  const { authUser, currentStudentProgramme } = useSelector(\n    (state) => state.auth\n  );\n  const [programmeOptions, setProgrammeOption] = useState([]);\n  const [selectedProgramme, setSelectedProgramme] = useState(\n    currentStudentProgramme.id\n  );\n\n  useEffect(() => {\n    dispatch(authActions.getStudentProgrammes());\n  }, []);\n\n  const setCurrentStudentProgramme = (programme) => {\n    dispatch(authActions.setCurrentStudentProgramme(programme, 'programme_id'));\n  };\n\n  useEffect(() => {\n    if (authUser) {\n      setProgrammeOption(formatProgrammes(authUser.academic_records || []));\n      if (!isEmpty(authUser.academic_records)) {\n        const findCurrentProgramme = authUser.academic_records.find(\n          (programme) => programme.is_current_programme === true\n        );\n        const programme = findCurrentProgramme || authUser.academic_records[0];\n        setCurrentStudentProgramme(programme);\n        setSelectedProgramme(programme.programme_id);\n      }\n    }\n  }, [authUser]);\n\n  const handleChangeProgramme = (e) => {\n    const { value } = e.target;\n    if (value && !isEmpty(authUser.academic_records)) {\n      setSelectedProgramme(value);\n      const findProgramme = authUser.academic_records.find(\n        (programme) =>\n          parseInt(programme.programme_id, 10) === parseInt(value, 10)\n      );\n      if (findProgramme) setCurrentStudentProgramme(findProgramme);\n    }\n  };\n\n  return (\n    <>\n      <Card.Header className=\"py-2 px-3 border-0 bg-light\">\n        {programmeOptions.length > 1 ? (\n          <>\n            <SelectInput\n              type=\"select\"\n              selectOptions={programmeOptions}\n              onChange={handleChangeProgramme}\n              value={selectedProgramme}\n              name=\"current_programme\"\n              label=\"PROGRAMME:\"\n              inline\n            />\n          </>\n        ) : (\n          <div className=\"text-sm font500 my-auto\">\n            <span className=\"text-primary me-1\">PROGRAMME:</span>\n            {`(${currentStudentProgramme.programme_code}) - ${currentStudentProgramme.programme_title}`}\n          </div>\n        )}\n      </Card.Header>\n    </>\n  );\n};\n\nexport default ProgrammeTab;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/helpers/dataFormatter.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Auth/LoginForm.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Auth/ResetForm.jsx",["556","557"],"import { get, isEmpty } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { Card, Form } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, InputText, SubmitButton } from '../../components/common';\nimport { authActions } from '../../config/actions';\nimport RoutePaths from '../../config/routes/RoutePaths';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst ResetForm = ({ setCurrentPage }) => {\n  const dispatch = useDispatch();\n  const { register, handleSubmit, errors } = useForm();\n  const { requestingToken, resettingPassword } = useSelector(\n    (state) => state.auth\n  );\n  const [resetSuccess, setResetSuccess] = useState(false);\n  const {\n    resetPasswordError,\n    requestTokenError,\n    resetPasswordSuccess,\n    requestTokenSuccess,\n  } = useSelector((state) => state.auth);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const previousState = usePrevious({\n    requestTokenError,\n    requestTokenSuccess,\n    resetPasswordError,\n    resetPasswordSuccess,\n  });\n\n  useEffect(() => {\n    setErrorMessage(null);\n    setSuccessMessage(null);\n    if (!isEmpty(previousState)) {\n      if (\n        !isEmpty(requestTokenError) &&\n        previousState.requestTokenError !== requestTokenError\n      ) {\n        setErrorMessage(\n          requestTokenError?.error || requestTokenError?.server?.message\n        );\n      }\n      if (\n        previousState.requestTokenSuccess !== requestTokenSuccess &&\n        requestTokenSuccess?.server\n      ) {\n        setSuccessMessage(requestTokenSuccess?.server?.message);\n        setResetSuccess(true);\n      }\n    }\n  }, [requestTokenError, requestTokenSuccess]);\n\n  useEffect(() => {\n    if (!isEmpty(previousState)) {\n      if (\n        !isEmpty(resetPasswordError) &&\n        previousState.resetPasswordError !== resetPasswordError\n      ) {\n        setErrorMessage(\n          resetPasswordError?.error || resetPasswordError.server.message\n        );\n      }\n      if (\n        previousState.resetPasswordSuccess !== resetPasswordSuccess &&\n        resetPasswordSuccess?.server\n      ) {\n        setCurrentPage(RoutePaths.login.path);\n      }\n    }\n  }, [resetPasswordError, resetPasswordSuccess]);\n\n  const onSubmit = (data) => {\n    setErrorMessage(null);\n    if (!isEmpty(data) && resetSuccess) {\n      dispatch(authActions.resetPassword(data));\n    } else {\n      dispatch(authActions.requestToken(data));\n    }\n  };\n\n  return (\n    <Card className=\"bg-white rounded \">\n      <Card.Header className=\"py-3 border-0 rounded-top\">\n        <div className=\"w-100 text-center text-info font600\">\n          RESET PASSWORD\n        </div>\n      </Card.Header>\n      <Card.Body className=\"pt-2\">\n        {(errorMessage || successMessage) && (\n          <AlertMessage\n            type={errorMessage ? 'danger' : 'success'}\n            message={errorMessage || successMessage}\n          />\n        )}\n        <Form onSubmit={handleSubmit(onSubmit)}>\n          <InputText\n            name=\"username\"\n            label=\"STUDENT NO.\"\n            readOnly={resetSuccess}\n            register={register({\n              required: 'STUDENT NO. required',\n            })}\n            error={get(errors, 'username.message')}\n          />\n\n          {resetSuccess && (\n            <>\n              <InputText\n                name=\"otp_code\"\n                label=\"Reset Token\"\n                register={register({\n                  required: 'Reset Token required',\n                })}\n                error={get(errors, 'otp_code.message')}\n              />\n\n              <InputText\n                name=\"new_password\"\n                label=\"New Password\"\n                type=\"password\"\n                register={register({\n                  required: 'Reset Token required',\n                  minLength: {\n                    value: 6,\n                    message: 'Minimum password length should 6 characters',\n                  },\n                  maxLength: {\n                    value: 16,\n                    message: 'Maximum password length should 16 characters',\n                  },\n                })}\n                error={get(errors, 'reset_token.message')}\n              />\n\n              <InputText\n                name=\"confirm_password\"\n                label=\"Confirm New Password\"\n                type=\"password\"\n                register={register({\n                  required: 'Reset Token required',\n                  minLength: {\n                    value: 6,\n                    message: 'Minimum password length should 6 characters',\n                  },\n                  maxLength: {\n                    value: 16,\n                    message: 'Maximum password length should 16 characters',\n                  },\n                })}\n                error={get(errors, 'confirm_password.message')}\n              />\n            </>\n          )}\n\n          <SubmitButton\n            className=\"text-uppercase text-white text-sm mt-3 w-100 mb-2 font600\"\n            loading={requestingToken || resettingPassword}\n            loadingText={\n              resetSuccess ? 'Resetting Password...' : 'Requesting...'\n            }\n            text={resetSuccess ? 'Reset Password' : 'Request Token'}\n          />\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n\nResetForm.propTypes = {\n  setCurrentPage: PropTypes.func.isRequired,\n};\n\nexport default ResetForm;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Services/index.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Results/index.jsx",["558","559","560"],"import { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  AlertMessage,\n  DataNotFound,\n  DataSpinner,\n  ReloadButton,\n} from '../../components/common';\nimport { resultActions } from '../../config/actions';\nimport usePrevious from '../Hooks/usePrevious';\nimport MyResult from './MyResult';\n\nconst Result = () => {\n  const dispatch = useDispatch();\n  const { results, loading, loadError } = useSelector((state) => state.result);\n  const { currentStudentProgramme } = useSelector((state) => state.auth);\n  const [myResult, setMyResult] = useState({});\n  const [errorMessage, setErrorMessage] = useState(null);\n  const prevState = usePrevious({ loadError });\n\n  const getMyResult = () => {\n    setErrorMessage(null);\n    dispatch(resultActions.getMyResult(currentStudentProgramme?.id));\n  };\n\n  useEffect(() => {\n    if (results) {\n      const findResult = results.find(\n        (result) =>\n          result.programme_code === currentStudentProgramme.programme_code\n      );\n      if (findResult) setMyResult(findResult);\n      else getMyResult();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(results)) {\n      const findResult = results.find(\n        (result) =>\n          result?.programme_code === currentStudentProgramme?.programme_code\n      );\n      if (findResult) setMyResult(findResult);\n      else {\n        setMyResult({});\n        setErrorMessage(null);\n      }\n    }\n  }, [results, loading]);\n\n  useEffect(() => {\n    if (\n      !isEmpty(prevState) &&\n      !isEmpty(loadError) &&\n      loadError !== prevState.loadError\n    ) {\n      setErrorMessage(loadError?.error?.message || loadError?.server?.message);\n    }\n  }, [loadError]);\n\n  return (\n    <div>\n      <Card>\n        <Card.Header className=\"py-2\">\n          <div className=\"font600 text-uppercase text-sm\">My Result</div>\n          <div className=\"card-options\">\n            <ReloadButton loading={loading} onClick={getMyResult} />\n          </div>\n        </Card.Header>\n        <Card.Body>\n          {errorMessage && <AlertMessage message={errorMessage} />}\n          {loading && isEmpty(myResult) ? (\n            <DataSpinner />\n          ) : (\n            <>\n              {isEmpty(myResult) ? (\n                <DataNotFound message=\"You have No Results\" />\n              ) : (\n                <>\n                  <MyResult result={myResult} />\n                </>\n              )}\n            </>\n          )}\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default Result;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/index.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Services/Refund.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Services/ChangeOfProgramme.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Results/MyResult.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/result.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/registration.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/payment.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/enrollment.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/auth.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/paymentReference.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/setting.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/config/initialState/app.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Payments/MyInvoices.jsx",["561"],"import { isEmpty, sum, sumBy } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card, Col, Row } from 'react-bootstrap';\nimport DataTable from 'react-data-table-component';\nimport { FaMinus, FaPaperclip, FaPlus } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  DataNotFound,\n  DataSpinner,\n  ReloadButton,\n} from '../../components/common';\nimport { paymentActions } from '../../config/actions';\nimport Invoice from './Invoice';\n\nconst MyInvoices = () => {\n  const dispatch = useDispatch();\n  const { invoices, loading } = useSelector((state) => state.myInvoice);\n  const [invoiceGrandTotalAmount, setInvoiceGrandTotalAmount] = useState(0);\n  const [invoiceGrandAmountPaid, seInvoiceGrandAmountPaid] = useState(0);\n  const [invoiceGrandAmountDue, seInvoiceGrandAmountDue] = useState(0);\n\n  const getInvoices = () => {\n    dispatch(paymentActions.getMyInvoices());\n  };\n\n  useEffect(() => {\n    if (isEmpty(invoices)) getInvoices();\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(invoices)) {\n      let invoiceAmounts = 0;\n      let invoiceAmountsDue = 0;\n      let invoiceAmountsPaid = 0;\n\n      invoices.forEach((invoice) => {\n        const tuitionAmounts = sumBy(\n          invoice.tuition_invoices,\n          'invoice_amount'\n        );\n        const tuitionDue = sumBy(invoice.tuition_invoices, 'amount_due');\n        const tuitionPaid = sumBy(invoice.tuition_invoices, 'amount_paid');\n        const functionalAmounts = sumBy(\n          invoice.functional_fees_invoices,\n          'invoice_amount'\n        );\n        const functionalDue = sumBy(\n          invoice.functional_fees_invoices,\n          'amount_due'\n        );\n        const functionalPaid = sumBy(\n          invoice.functional_fees_invoices,\n          'amount_paid'\n        );\n        const otherAmounts = sumBy(\n          invoice.other_fees_invoices,\n          'invoice_amount'\n        );\n        const otherFeesDue = sumBy(invoice.other_fees_invoices, 'amount_due');\n        const otherFeesPaid = sumBy(invoice.other_fees_invoices, 'amount_paid');\n        const manualAmounts = sumBy(invoice.manual_invoices, 'invoice_amount');\n        const manualsDue = sumBy(invoice.manual_invoices, 'amount_due');\n        const manualsPaid = sumBy(invoice.manual_invoices, 'amount_paid');\n\n        invoiceAmounts += sum([\n          tuitionAmounts,\n          functionalAmounts,\n          otherAmounts,\n          manualAmounts,\n        ]);\n        invoiceAmountsDue += sum([\n          tuitionDue,\n          functionalDue,\n          otherFeesDue,\n          manualsDue,\n        ]);\n        invoiceAmountsPaid += sum([\n          tuitionPaid,\n          functionalPaid,\n          otherFeesPaid,\n          manualsPaid,\n        ]);\n      });\n      setInvoiceGrandTotalAmount(invoiceAmounts);\n      seInvoiceGrandAmountDue(invoiceAmountsDue);\n      seInvoiceGrandAmountPaid(invoiceAmountsPaid);\n    }\n  }, [invoices]);\n\n  return (\n    <>\n      <Row className=\"text-center text-muted\">\n        <Col md={3} className=\"mb-2\">\n          <Card>\n            <Card.Body>\n              <Card.Text className=\"text-xs font600 mb-2\">\n                TOTAL INVOICE AMOUNT\n              </Card.Text>\n              <span className=\"text-info font600 mx-1\">\n                {`${invoiceGrandTotalAmount.toLocaleString()} UGX`}\n              </span>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col md={3} className=\"mb-2\">\n          <Card>\n            <Card.Body>\n              <Card.Text className=\"text-xs font600 mb-2\">\n                TOTAL INVOICE AMOUNT PAID\n              </Card.Text>\n              <span className=\"text-success font600 mx-1\">\n                {`${invoiceGrandAmountPaid.toLocaleString()} UGX`}\n              </span>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col md={3} className=\"mb-2\">\n          <Card>\n            <Card.Body>\n              <Card.Text className=\"text-xs font600 mb-2\">\n                TOTAL INVOICE AMOUNT DUE\n              </Card.Text>\n              <span className=\"text-danger font600 mx-1\">\n                {`${invoiceGrandAmountDue.toLocaleString()} UGX`}\n              </span>\n            </Card.Body>\n          </Card>\n        </Col>\n        <Col md={3} className=\"mb-2\">\n          <Card>\n            <Card.Body>\n              <Card.Text className=\"text-xs font600 mb-2\">\n                PERCENTAGE COMPLETION\n              </Card.Text>\n              <span\n                className={`mx-1 font600 ${\n                  (invoiceGrandAmountPaid / invoiceGrandTotalAmount) * 100 > 70\n                    ? 'text-success'\n                    : 'text-danger'\n                }`}\n              >\n                {`${\n                  invoiceGrandTotalAmount !== 0\n                    ? parseInt(\n                        invoiceGrandAmountPaid / invoiceGrandTotalAmount,\n                        10\n                      ) * 100\n                    : 0\n                } %`}\n              </span>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <div className=\"border mt-2\">\n        <Card.Header className=\"py-2  text-secondary text-sm font600\">\n          MY INVOICES/BILLS\n          <div className=\"card-options\">\n            <ReloadButton loading={loading} onClick={() => getInvoices()} />\n          </div>\n        </Card.Header>\n        <DataTable\n          data={invoices}\n          noHeader\n          noTableHead\n          progressPending={loading && isEmpty(invoices)}\n          progressComponent={<DataSpinner />}\n          expandableRows\n          columns={[\n            {\n              name: 'ACADEMIC YEAR',\n              wrap: true,\n              cell(transaction) {\n                const {\n                  semester,\n                  academic_year: academicYear,\n                  programme_study_years: studyYear,\n                } = transaction;\n                return (\n                  <>\n                    <span className=\"font600 text-info\">\n                      <FaPaperclip className=\"me-1\" />\n                      {`${studyYear} - ${semester} - ${academicYear}`}\n                    </span>\n                  </>\n                );\n              },\n            },\n          ]}\n          noDataComponent={\n            <DataNotFound message=\"YOU HAVE NO INVOICE HISTORY\" />\n          }\n          expandableRowsComponent={<Invoice />}\n          expandableRowExpanded={(row, index) => index === 1}\n          expandOnRowClicked\n          striped\n          expandableIcon={{\n            expanded: <FaMinus className=\"text-info\" />,\n            collapsed: <FaPlus className=\"text-info\" />,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default MyInvoices;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Payments/MyTransactions.jsx",["562"],"import { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport DataTable from 'react-data-table-component';\nimport { FaMinus, FaPlus, FaPaperclip } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  DataNotFound,\n  DataSpinner,\n  ReloadButton,\n  TabMenu,\n} from '../../components/common';\nimport { paymentActions } from '../../config/actions';\nimport TransactionTables from './TransactionTables';\n\nconst MyTransactions = () => {\n  const dispatch = useDispatch();\n  const { transactions, loading } = useSelector((state) => state.myTransaction);\n  const [currentMenu, setCurrentMenu] = useState('data');\n\n  const getTransactions = () => dispatch(paymentActions.getMyTransactions());\n\n  useEffect(() => {\n    if (isEmpty(transactions)) getTransactions();\n  }, []);\n\n  let columns = [\n    {\n      name: 'ACADEMIC YEAR',\n      cell(transaction) {\n        const {\n          semester,\n          academic_year: academicYear,\n          programme_study_years: studyYear,\n        } = transaction;\n        return (\n          <span className=\"font600 text-info\">\n            <FaPaperclip className=\"me-1\" />\n            {`${studyYear} - ${semester} - ${academicYear}`}\n          </span>\n        );\n      },\n    },\n  ];\n\n  if (currentMenu === 'deposits') {\n    columns = [\n      {\n        name: 'Invoice No',\n        sortable: true,\n        cell(row) {\n          const { transaction_date: txnDate } = row;\n          return (\n            <span className=\"font500 text-uppercase text-info\">\n              {`${txnDate} Fees Deposits`}\n            </span>\n          );\n        },\n      },\n    ];\n  }\n\n  return (\n    <Card>\n      <TabMenu\n        currentMenu={currentMenu}\n        setCurrentMenu={setCurrentMenu}\n        menus={[\n          {\n            title: 'Invoice Payments',\n            action: 'data',\n          },\n          {\n            title: 'Fees Deposits',\n            action: 'deposits',\n          },\n        ]}\n      >\n        <div className=\"card-options\">\n          <ReloadButton loading={loading} onClick={() => getTransactions()} />\n        </div>\n      </TabMenu>\n\n      <Card.Body className=\"p-0\">\n        <DataTable\n          data={transactions[currentMenu]}\n          noHeader\n          noTableHead\n          progressPending={loading && isEmpty(transactions[currentMenu])}\n          progressComponent={<DataSpinner />}\n          expandableRows\n          columns={columns}\n          noDataComponent={\n            <DataNotFound message=\"YOU HAVE NO TRANSACTION HISTORY\" />\n          }\n          expandableRowsComponent={<TransactionTables />}\n          expandableRowExpanded={() => true}\n          expandOnRowClicked\n          striped\n          expandableIcon={{\n            expanded: <FaMinus className=\"text-info\" />,\n            collapsed: <FaPlus className=\"text-info\" />,\n          }}\n        />\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default MyTransactions;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Payments/SearchPayment.jsx",["563"],"import { Result } from 'antd';\nimport { get, isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card, Col, Form, Row, Table } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { FaSearchDollar } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, InputText, SubmitButton } from '../../components/common';\nimport { paymentActions } from '../../config/actions';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst SearchPayment = () => {\n  const dispatch = useDispatch();\n  const { register, handleSubmit, errors } = useForm();\n  const { searchingPayment, searchPayment, searchPaymentError } = useSelector(\n    (state) => state.myTransaction\n  );\n  const [searchSuccess, setSearchSuccess] = useState({});\n  const [searchError, setSearchError] = useState(null);\n  const prevState = usePrevious({ searchPayment, searchPaymentError });\n\n  useEffect(() => {\n    if (!isEmpty(prevState)) {\n      if (\n        !isEmpty(searchPayment) &&\n        searchPayment !== prevState.searchPayment\n      ) {\n        setSearchSuccess(searchPayment);\n      }\n      if (\n        !isEmpty(searchPaymentError) &&\n        searchPaymentError !== prevState.searchPaymentError\n      ) {\n        setSearchError(\n          searchPaymentError?.error?.message ||\n            searchPaymentError?.server?.message\n        );\n      }\n    }\n  }, [searchPayment, searchPaymentError]);\n\n  const onSearchPayment = (data) => {\n    setSearchError(null);\n    setSearchSuccess({});\n    if (data?.searchKey) {\n      dispatch(paymentActions.searchPayment(data.searchKey));\n    }\n  };\n\n  return (\n    <>\n      <Card>\n        <Card.Header className=\"py-3 font600 text-sm text-uppercase text-muted\">\n          CHECK PAYMENT REFERENCE NUMBER STATUS\n        </Card.Header>\n        <Card.Body>\n          <Form onSubmit={handleSubmit(onSearchPayment)}>\n            <Row className=\"g-0\">\n              <Col md={{ offset: 3, span: 4 }}>\n                <InputText\n                  name=\"searchKey\"\n                  type=\"search\"\n                  placeholder=\"Enter Payment Reference Number\"\n                  register={register({\n                    required: 'Enter Payment Reference',\n                    minLength: {\n                      value: 13,\n                      message: 'Invalid Reference Number',\n                    },\n                    maxLength: {\n                      value: 13,\n                      message: 'Invalid Reference Number',\n                    },\n                  })}\n                  error={get(errors, 'searchKey.message')}\n                />\n              </Col>\n              <Col md={2}>\n                <SubmitButton\n                  className=\"text-uppercase text-sm font600 text-white w-100\"\n                  text=\"Search\"\n                  loadingText=\"Searching...\"\n                  loading={searchingPayment}\n                  iconBefore={<FaSearchDollar className=\"me-2\" />}\n                />\n              </Col>\n            </Row>\n\n            {searchError && <Result status=\"error\" title={searchError} />}\n\n            {!isEmpty(searchSuccess) && (\n              <Card body className=\"shadow-none rounded my-4\">\n                <AlertMessage\n                  type={searchSuccess.code === 'T' ? 'success' : 'info'}\n                  message={`Status: ${searchSuccess?.description}`}\n                  className=\"font600 text-sm\"\n                />\n\n                <Table\n                  size=\"md\"\n                  bordered\n                  striped\n                  responsive\n                  className=\"text-sm text-muted font600\"\n                >\n                  <tbody>\n                    <tr>\n                      <td>PRN</td>\n                      <td>{searchSuccess.PRN}</td>\n                    </tr>\n                    <tr>\n                      <td>Amount</td>\n                      <td>\n                        {`${parseInt(\n                          searchSuccess.AmountPaid,\n                          10\n                        ).toLocaleString()} ${searchSuccess?.Currency}`}\n                      </td>\n                    </tr>\n                    <tr>\n                      <td>PAYMENT STATUS</td>\n                      <td>{searchSuccess.StatusDesc}</td>\n                    </tr>\n                    <tr>\n                      <td>Generated By</td>\n                      <td>{searchSuccess.TaxPayerName}</td>\n                    </tr>\n                    <tr>\n                      <td>Expiry Date</td>\n                      <td>{searchSuccess.PaymentExpiryDate}</td>\n                    </tr>\n                    <tr>\n                      <td>Payment Date</td>\n                      <td>{searchSuccess.DatePaid || '-- -- ----'}</td>\n                    </tr>\n                    <tr>\n                      <td>Payment Bank</td>\n                      <td>{searchSuccess.PaymentBank || '---------'}</td>\n                    </tr>\n                  </tbody>\n                </Table>\n              </Card>\n            )}\n          </Form>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nexport default SearchPayment;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/index.jsx",["564"],"import { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Accordion, Card } from 'react-bootstrap';\nimport { FaUserEdit } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { DataNotFound, ReloadButton } from '../../components/common';\nimport AccordionHeader from '../../components/common/AccordionHeader';\nimport { registrationActions } from '../../config/actions';\nimport SingleRegistrationHistory from './SingleRegistrationHistory';\n\nconst RegistrationHistory = () => {\n  const dispatch = useDispatch();\n  const { registrationHistories, gettingRegistrationHistory } = useSelector(\n    (state) => state.registration\n  );\n  const { currentStudentProgramme } = useSelector((state) => state.auth);\n  const [activeKey, setActiveKey] = useState(1);\n\n  const reloadRegistrationHistory = () => {\n    dispatch(\n      registrationActions.getRegistrationHistory(currentStudentProgramme?.id)\n    );\n  };\n\n  useEffect(() => {\n    if (isEmpty(registrationHistories)) reloadRegistrationHistory();\n  }, []);\n\n  return (\n    <>\n      <Card.Header className=\"py-2  text-secondary text-sm mb-2 font600\">\n        MY REGISTRATION HISTORY\n        <div className=\"card-options\">\n          <ReloadButton\n            loading={gettingRegistrationHistory}\n            onClick={reloadRegistrationHistory}\n          />\n        </div>\n      </Card.Header>\n      {isEmpty(registrationHistories) ? (\n        <>\n          <DataNotFound message=\"You have No Registration History.\" />\n          <div className=\"text-center\">\n            <ReloadButton\n              loading={gettingRegistrationHistory}\n              onClick={reloadRegistrationHistory}\n            />\n          </div>\n        </>\n      ) : (\n        <>\n          <Accordion defaultActiveKey=\"1\" activeKey={activeKey}>\n            {registrationHistories.map((registrationHistory, index) => (\n              <Accordion.Item\n                eventKey={index + 1}\n                className=\"mb-2\"\n                key={registrationHistory.event_id}\n              >\n                <AccordionHeader\n                  activeKey={activeKey}\n                  eventKey={index + 1}\n                  setActiveKey={setActiveKey}\n                  className={\n                    registrationHistory.is_active === false\n                      ? 'text-danger font600'\n                      : 'font600'\n                  }\n                >\n                  <FaUserEdit className=\"me-2\" />\n                  {`REGISTRATION FOR ${registrationHistory?.registration_study_year}, ${registrationHistory.event_semester} - ${registrationHistory.academic_year}`}\n                  {registrationHistory.is_active === false && (\n                    <div className=\"badge badge-danger text-uppercase p-1 mx-1\">\n                      De-registered\n                    </div>\n                  )}\n                </AccordionHeader>\n                <Accordion.Body>\n                  <div\n                    className={\n                      registrationHistory.is_active === false\n                        ? 'text-danger'\n                        : ''\n                    }\n                  >\n                    <SingleRegistrationHistory\n                      registrationHistory={registrationHistory}\n                    />\n                  </div>\n                </Accordion.Body>\n              </Accordion.Item>\n            ))}\n          </Accordion>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default RegistrationHistory;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Payments/TransactionTables.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Payments/Invoice.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/SingleRegistrationHistory.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/helpers/dataTableCustomStyle.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/Events/CurrentEvents.jsx",["565"],"import { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { FaUserEdit, FaUserGraduate } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  DataNotFound,\n  DataSpinner,\n  ReloadButton,\n  TabMenu,\n} from '../../components/common';\nimport { enrollmentActions, registrationActions } from '../../config/actions';\nimport EnrolledStudent from '../EnrollmentHistory/EnrolledStudent';\nimport EnrollForm from '../EnrollmentHistory/EnrollForm';\nimport Registration from '../RegistrationHistory/Registration';\n\nconst CurrentEvents = () => {\n  const dispatch = useDispatch();\n  const { currentEvents, gettingCurrentEvents } = useSelector(\n    (state) => state.enrollment\n  );\n  const { currentStudentProgramme } = useSelector((state) => state.auth);\n  const [selectedKey, setSelectedKey] = useState('enrollment');\n  const [semesterEvent, setSemesterEvent] = useState({});\n\n  const reloadEnrollmentEvent = () => {\n    if (currentStudentProgramme?.id) {\n      dispatch(enrollmentActions.getCurrentEvents(currentStudentProgramme.id));\n    }\n    if (\n      isEmpty(currentEvents.studentRegistration) &&\n      !isEmpty(currentEvents.registrationEvent)\n    ) {\n      dispatch(registrationActions.getCourseUnits(currentStudentProgramme.id));\n    }\n  };\n\n  useEffect(() => {\n    if (isEmpty(semesterEvent)) reloadEnrollmentEvent();\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(currentEvents)) {\n      const findEvent = currentEvents.find(\n        (event) =>\n          parseInt(event.programme_id, 10) ===\n          parseInt(currentStudentProgramme.id, 10)\n      );\n      setSemesterEvent(findEvent ? findEvent.event : {});\n    }\n  }, [currentEvents, currentStudentProgramme]);\n\n  return (\n    <Card key={semesterEvent?.id}>\n      <TabMenu\n        menus={[\n          {\n            title: 'Enrollemnt',\n            icon: <FaUserGraduate className=\"me-1\" />,\n            action: 'enrollment',\n          },\n          {\n            title: 'Registration',\n            icon: <FaUserEdit className=\"me-1\" />,\n            action: 'registration',\n            hidden:\n              isEmpty(semesterEvent.studentEnrollment) ||\n              isEmpty(semesterEvent.registrationEvent),\n          },\n        ]}\n        currentMenu={selectedKey}\n        setCurrentMenu={setSelectedKey}\n      >\n        <div className=\"card-options\">\n          <ReloadButton\n            loading={gettingCurrentEvents}\n            onClick={reloadEnrollmentEvent}\n          />\n        </div>\n      </TabMenu>\n\n      <Card.Body>\n        {selectedKey === 'enrollment' && (\n          <>\n            {gettingCurrentEvents && isEmpty(semesterEvent) ? (\n              <DataSpinner />\n            ) : (\n              <>\n                {isEmpty(semesterEvent.enrollmentEvent) ||\n                isEmpty(currentStudentProgramme) ? (\n                  <DataNotFound\n                    message=\"There is no Enrollment event available\"\n                    className=\"text-xl text-uppercase\"\n                  />\n                ) : (\n                  <>\n                    {!isEmpty(semesterEvent.studentEnrollment) ? (\n                      <EnrolledStudent\n                        studentEnrollment={\n                          semesterEvent.studentEnrollment || {}\n                        }\n                        event={semesterEvent.enrollmentEvent}\n                      />\n                    ) : (\n                      <EnrollForm\n                        enrollmentEvent={semesterEvent.enrollmentEvent}\n                        currentStudentProgramme={currentStudentProgramme}\n                        reloadEnrollmentEvent={reloadEnrollmentEvent}\n                      />\n                    )}\n                  </>\n                )}\n              </>\n            )}\n          </>\n        )}\n        {selectedKey === 'registration' && (\n          <Registration\n            registrationEvent={semesterEvent.registrationEvent}\n            registrationHistory={semesterEvent.studentRegistration}\n            enrollmentEvent={semesterEvent.enrollmentEvent}\n            enrollmentHistory={semesterEvent.studentEnrollment}\n            reloadEnrollmentEvent={reloadEnrollmentEvent}\n          />\n        )}\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default CurrentEvents;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/CourseUnitsTable.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/index.jsx",["566"],"import { isEmpty } from 'lodash';\nimport moment from 'moment';\nimport React, { useEffect, useState } from 'react';\nimport { Button, Card, Col, ListGroup, Row } from 'react-bootstrap';\nimport {\n  FaGraduationCap,\n  FaUserCheck,\n  FaUserFriends,\n  FaUserGraduate,\n  FaUsersCog,\n  FaUserSecret,\n  FaUserTimes,\n} from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { authActions, enrollmentActions } from '../../config/actions';\nimport Avatar from './Avatar';\nimport ProfileData from './ProfileData';\nimport ChangePassword from './ChangePassword';\nimport AcademicDetail from './AcademicDetail';\nimport GuardianDetail from './GuardianDetail';\nimport NextOfKin from './NextOfKin';\nimport { DataSpinner } from '../../components/common';\n\nconst MyProfile = () => {\n  const dispatch = useDispatch();\n  const { gettingAuthUser, authUser, currentStudentProgramme } = useSelector(\n    (state) => state.auth\n  );\n  const { currentEvents } = useSelector((state) => state.enrollment);\n  const [isRegistered, setIsRegistered] = useState(false);\n  const [currentTab, setCurrentTab] = useState('bio-data');\n\n  const reloadAuthUser = () => {\n    dispatch(authActions.getAuthUser());\n    dispatch(enrollmentActions.getCurrentEvents(currentStudentProgramme?.id));\n  };\n\n  useEffect(() => {\n    if (isEmpty(authUser)) reloadAuthUser();\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(currentEvents)) {\n      setIsRegistered(!isEmpty(currentEvents.studentRegistration));\n    }\n  }, [currentEvents]);\n\n  const tabList = [\n    {\n      id: 1,\n      title: 'Personal Details',\n      key: 'bio-data',\n      icon: <FaUserGraduate className=\"me-2\" />,\n    },\n    {\n      id: 2,\n      title: 'Academic Details',\n      key: 'academic-details',\n      icon: <FaGraduationCap className=\"me-2\" />,\n    },\n    {\n      id: 3,\n      title: 'Guardian Details',\n      key: 'guardian-details',\n      icon: <FaUsersCog className=\"me-2\" />,\n    },\n    {\n      id: 4,\n      title: 'Next of Kin',\n      key: 'next-of-kin',\n      icon: <FaUserFriends className=\"me-2\" />,\n    },\n    {\n      id: 5,\n      title: 'Change Password',\n      key: 'change-password',\n      icon: <FaUserSecret className=\"me-2\" />,\n    },\n  ];\n\n  return (\n    <>\n      <Card>\n        <Card.Header className=\"py-3 text-primary font600 text-sm mb-0\">\n          MY ACADEMIC PROFILE\n        </Card.Header>\n        <Row className=\"row-deck gx-0 gy-2\">\n          <Col md={3}>\n            <Card className=\"text-sm text-muted border-0 p-0\">\n              <div className=\"text-center p-3 border-bottom\">\n                <div className=\"mx-auto text-center pb-2\">\n                  <Avatar />\n                </div>\n                {gettingAuthUser && isEmpty(authUser) ? (\n                  <DataSpinner message=\"Loading Profile...\" />\n                ) : (\n                  <>\n                    <div className=\"font600 text-uppercase text-primary\">{`${authUser.firstname} ${authUser.lastname}`}</div>\n                    <div className=\"font600 text-uppercase text-xs mt-2\">{`STUDENT NO.: ${authUser.student_number}`}</div>\n\n                    <Button\n                      variant={isRegistered ? 'success' : 'danger'}\n                      size=\"sm\"\n                      className=\"text-sm mt-2 font600\"\n                    >\n                      {isRegistered ? (\n                        <FaUserCheck className=\"me-1\" />\n                      ) : (\n                        <FaUserTimes className=\"me-1\" />\n                      )}\n                      {isRegistered ? 'REGISTERED' : 'NOT REGISTERED'}\n                    </Button>\n                  </>\n                )}\n              </div>\n              <ListGroup variant=\"flush\">\n                {tabList.map((tab) => (\n                  <ListGroup.Item\n                    key={tab.id}\n                    onClick={() => setCurrentTab(tab.key)}\n                    active={currentTab === tab.key}\n                    action\n                    className=\"font600 text-sm text-left\"\n                  >\n                    {tab.icon}\n                    {tab.title}\n                  </ListGroup.Item>\n                ))}\n              </ListGroup>\n            </Card>\n          </Col>\n          <Col md={9}>\n            <Card className=\"border-start border-top-0 border-bottom-0 border-end-0\">\n              {currentTab === 'bio-data' && <ProfileData authUser={authUser} />}\n              {currentTab === 'next-of-kin' && (\n                <NextOfKin authUser={authUser} />\n              )}\n              {currentTab === 'guardian-details' && (\n                <GuardianDetail authUser={authUser} />\n              )}\n              {currentTab === 'academic-details' && (\n                <AcademicDetail authUser={authUser} />\n              )}\n              {currentTab === 'change-password' && <ChangePassword />}\n            </Card>\n          </Col>\n        </Row>\n      </Card>\n\n      <div className=\"my-2 w-100 text-center text-muted text-xs\">\n        Last Login\n        {` ${moment(authUser.last_login).format(\n          'ddd, MMM Do YYYY, h:mm:ss a'\n        )}`}\n      </div>\n    </>\n  );\n};\n\nexport default MyProfile;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/index.jsx",["567"],"import { isEmpty, orderBy } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Accordion, Card } from 'react-bootstrap';\nimport { FaPaperclip } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  DataNotFound,\n  DataSpinner,\n  ReloadButton,\n  TabMenu,\n} from '../../components/common';\nimport AccordionHeader from '../../components/common/AccordionHeader';\nimport { paymentReferenceActions } from '../../config/actions';\nimport GeneratePaymentReference from './GeneratePaymentReference';\nimport ReferenceModal from './ReferenceModal';\nimport SinglePaymentReference from './SinglePaymentReference';\n\nconst PaymentReferences = () => {\n  const dispatch = useDispatch();\n  const { paymentReferences, gettingPaymentReferences } = useSelector(\n    (state) => state.paymentReference\n  );\n  const [activeKey, setActiveKey] = useState(1);\n  const [activeTab, setActiveTab] = useState('generate-reference');\n  const [referenceTab, setReferenceTab] = useState('active');\n\n  const reloadPaymentReferences = () => {\n    dispatch(paymentReferenceActions.getPaymentReferences());\n  };\n\n  useEffect(() => {\n    if (isEmpty(paymentReferences)) reloadPaymentReferences();\n  }, []);\n\n  return (\n    <>\n      <Card>\n        <TabMenu\n          currentMenu={activeTab}\n          setCurrentMenu={setActiveTab}\n          menus={[\n            {\n              title: 'Get Payment REF',\n              action: 'generate-reference',\n            },\n            {\n              title: 'My Payment REFs',\n              action: 'references',\n            },\n          ]}\n        />\n        <Card.Body className=\"overflow-auto\">\n          {activeTab === 'references' && (\n            <Card className=\"border-0\">\n              <TabMenu\n                className=\"bg-white border\"\n                variant=\"pills\"\n                currentMenu={referenceTab}\n                setCurrentMenu={setReferenceTab}\n                menus={[\n                  {\n                    title: `Active References (${\n                      paymentReferences?.active?.length || 0\n                    })`,\n                    action: 'active',\n                  },\n                  {\n                    title: `Expired References (${\n                      paymentReferences?.inactive?.length || 0\n                    })`,\n                    action: 'inactive',\n                  },\n                ]}\n              >\n                <div className=\"card-options\">\n                  <ReloadButton\n                    loading={gettingPaymentReferences}\n                    onClick={reloadPaymentReferences}\n                  />\n                </div>\n              </TabMenu>\n\n              {gettingPaymentReferences &&\n              isEmpty(paymentReferences[referenceTab]) ? (\n                <DataSpinner />\n              ) : (\n                <>\n                  {isEmpty(paymentReferences[referenceTab]) ? (\n                    <>\n                      <DataNotFound\n                        message={`You have No ${referenceTab} Payment References`}\n                      />\n                    </>\n                  ) : (\n                    <>\n                      <Accordion defaultActiveKey=\"1\" activeKey={activeKey}>\n                        {orderBy(\n                          paymentReferences[referenceTab],\n                          ['ura_prn'],\n                          'desc'\n                        ).map((paymentReference) => (\n                          <Accordion.Item\n                            className=\"mb-0\"\n                            key={paymentReference.id}\n                            eventKey={paymentReference?.id}\n                          >\n                            <AccordionHeader\n                              activeKey={activeKey}\n                              eventKey={paymentReference?.id}\n                              setActiveKey={setActiveKey}\n                            >\n                              <FaPaperclip className=\"me-2\" />\n                              REFERENCE:\n                              <span className=\"text-danger ms-1\">\n                                {paymentReference.ura_prn}\n                              </span>\n                              , AMOUNT TO PAY:\n                              <strong className=\"text-danger mx-1\">\n                                {parseInt(\n                                  paymentReference.amount,\n                                  10\n                                ).toLocaleString()}\n                              </strong>\n                              UGX, EXPIRY DATE:\n                              <span className=\"mx-1 text-danger\">\n                                {`${paymentReference.expiry_date}`}\n                              </span>\n                              , GENERATED BY:\n                              <span className=\"ms-1 text-danger\">\n                                {`${\n                                  paymentReference.generated_by === 'STUDENT'\n                                    ? 'SELF'\n                                    : paymentReference.generated_by\n                                }`}\n                              </span>\n                            </AccordionHeader>\n                            <Accordion.Body>\n                              <SinglePaymentReference\n                                paymentReference={paymentReference}\n                                key={paymentReference.id}\n                              />\n                            </Accordion.Body>\n                          </Accordion.Item>\n                        ))}\n                      </Accordion>\n                    </>\n                  )}\n                </>\n              )}\n            </Card>\n          )}\n          {activeTab === 'generate-reference' && <GeneratePaymentReference />}\n        </Card.Body>\n      </Card>\n      <ReferenceModal switchTab={() => setActiveTab('references')} />\n    </>\n  );\n};\n\nexport default PaymentReferences;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/NewUser/index.jsx",["568","569"],"import { isEmpty } from 'lodash';\nimport PropTypes, { object } from 'prop-types';\nimport React from 'react';\nimport { Card, Col, Row } from 'react-bootstrap';\nimport { FaUser } from 'react-icons/fa';\nimport { DataNotFound, InputText } from '../../components/common';\n\nconst NewUser = () => {\n  return (\n    <Card >\n      <Card.Header className=\"text-primary font600 py-3 text-sm\">\n        <FaUser className=\"p-2\" />\n        CREATE ACCOUNT\n      </Card.Header>\n      <Card.Body className=\"bg-white\">\n        <Row>\n          <Col md={6}>\n            <InputText\n              label=\"First Name\"\n              name=\"firstName\"\n              inline\n            />\n            <InputText\n              label=\"Last Name\"\n              name=\"lastName\"\n              inline\n            />\n            <InputText\n              label=\"Other Names\"\n              name=\"otherNames\"\n              inline\n            />\n            <InputText\n              label=\"Country\"\n              name=\"country\"\n              inline\n            />\n            <InputText\n              label=\"Phone\"\n              name=\"phone\"\n              inline\n            />\n            <InputText\n              label=\"Email\"\n              name=\"email\"\n              inline\n            />\n            <InputText\n              label=\"Password\"\n              name=\"password\"\n              inline\n            />\n            <InputText\n              label=\"Confirm Password\"\n              name=\"confirmPassword\"\n              inline\n            />\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n};\n\nNewUser.propTypes = {\n  authUser: PropTypes.oneOfType([object]).isRequired,\n};\n\nexport default NewUser;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/index.jsx",["570"],"import { isEmpty } from 'lodash';\nimport React, { useEffect } from 'react';\nimport { Card } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  DataNotFound,\n  DataSpinner,\n  ReloadButton,\n} from '../../components/common';\nimport { enrollmentActions } from '../../config/actions';\nimport Enrollments from './Enrollments';\n\nconst EnrollmentHistory = () => {\n  const dispatch = useDispatch();\n  const { enrollmentHistories, gettingEnrollmentHistory } = useSelector(\n    (state) => state.enrollment\n  );\n  const { currentStudentProgramme } = useSelector((state) => state.auth);\n\n  const reloadEnrollmentHistory = () => {\n    dispatch(\n      enrollmentActions.getEnrollmentHistory(currentStudentProgramme?.id)\n    );\n  };\n\n  useEffect(() => {\n    if (isEmpty(enrollmentHistories)) reloadEnrollmentHistory();\n  }, []);\n\n  return (\n    <>\n      <Card.Header className=\"py-2  text-secondary text-sm mb-2 font600\">\n        MY ENROLLMENT HISTORY\n        {` (${!isEmpty(enrollmentHistories) ? enrollmentHistories.length : 0})`}\n        <div className=\"card-options\">\n          <ReloadButton\n            loading={gettingEnrollmentHistory}\n            onClick={reloadEnrollmentHistory}\n          />\n        </div>\n      </Card.Header>\n      {gettingEnrollmentHistory && isEmpty(enrollmentHistories) ? (\n        <DataSpinner />\n      ) : (\n        <>\n          {isEmpty(enrollmentHistories) ? (\n            <>\n              <DataNotFound message=\"You have No Enrollment History.\" />\n              <div className=\"text-center\">\n                <ReloadButton\n                  loading={gettingEnrollmentHistory}\n                  onClick={reloadEnrollmentHistory}\n                />\n              </div>\n            </>\n          ) : (\n            <Enrollments enrollmentHistories={enrollmentHistories} />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default EnrollmentHistory;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/AcademicCalender/index.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/Registration.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/EnrollForm.jsx",["571","572","573"],"import { get, isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport PropTypes, { object } from 'prop-types';\nimport { Card, Col, Form, Row } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  AlertMessage,\n  DataNotFound,\n  ReloadButton,\n  SelectInput,\n  SubmitButton,\n} from '../../components/common';\nimport { enrollmentActions, appActions } from '../../config/actions';\nimport { formatMetadata, generalFormatter } from '../../helpers/dataFormatter';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst EnrollForm = ({\n  enrollmentEvent,\n  currentStudentProgramme,\n  reloadEnrollmentEvent,\n}) => {\n  const dispatch = useDispatch();\n  const { register, handleSubmit, errors } = useForm();\n  const { enrolling, enrollError, gettingCurrentEvents } = useSelector(\n    (state) => state.enrollment\n  );\n  const { metadata } = useSelector((state) => state.app);\n\n  const [enrollmentStatusOptions, setEnrollmentOptions] = useState([]);\n  const [studyYearOptions, setStudyYearOptions] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const prevState = usePrevious({ enrollError });\n\n  useEffect(() => {\n    if (isEmpty(metadata)) dispatch(appActions.getMetadata());\n  }, []);\n\n  useEffect(() => {\n    if (\n      prevState &&\n      !isEmpty(enrollError) &&\n      enrollError !== prevState.enrollError\n    ) {\n      setErrorMessage(enrollError?.server?.message);\n    }\n  }, [enrollError]);\n\n  useEffect(() => {\n    if (!isEmpty(metadata)) {\n      setEnrollmentOptions(formatMetadata(metadata, 'ENROLLMENT STATUSES'));\n    }\n    if (!isEmpty(currentStudentProgramme)) {\n      setStudyYearOptions(\n        generalFormatter(\n          currentStudentProgramme.programme_study_years || [],\n          'programme_study_years',\n          'id'\n        )\n      );\n    }\n  }, [metadata]);\n\n  const onClickEnrollButton = (data) => {\n    setErrorMessage(null);\n    if (\n      !isEmpty(data) &&\n      !isEmpty(enrollmentEvent) &&\n      !isEmpty(currentStudentProgramme)\n    ) {\n      data.event_id = enrollmentEvent?.id;\n      dispatch(\n        enrollmentActions.enrollStudent({\n          ...data,\n          student_programme_id: currentStudentProgramme.id,\n        })\n      );\n    }\n  };\n\n  return (\n    <div>\n      {isEmpty(enrollmentEvent) ? (\n        <>\n          <DataNotFound message=\"There is currently No open Enrollment Event.\" />\n          <div className=\"text-center\">\n            <ReloadButton\n              loading={gettingCurrentEvents}\n              onClick={reloadEnrollmentEvent}\n            />\n          </div>\n        </>\n      ) : (\n        <Card>\n          <Card.Header className=\"font600 text-muted text-sm py-3\">\n            ENROLL FOR\n            <strong className=\"mx-1\">{`${enrollmentEvent?.semester}, `}</strong>\n            {enrollmentEvent?.academic_year}\n            {currentStudentProgramme && (\n              <div className=\"card-options\">\n                <div className=\"text-xs\">\n                  {`PROG: ${currentStudentProgramme?.programme_code} - ${currentStudentProgramme?.programme_title}`}\n                </div>\n              </div>\n            )}\n          </Card.Header>\n          <Form onSubmit={handleSubmit(onClickEnrollButton)}>\n            <Card.Body>\n              {errorMessage && (\n                <AlertMessage\n                  message={errorMessage}\n                  show\n                  className=\"py-1 text-sm\"\n                />\n              )}\n              <Row>\n                <Col md={6}>\n                  <SelectInput\n                    name=\"study_year_id\"\n                    register={register({\n                      required:\n                        'Select the year of study you are enrolling for',\n                    })}\n                    label=\"YEAR OF STUDY\"\n                    inline\n                    selectOptions={studyYearOptions}\n                    error={get(errors, 'study_year_id.message')}\n                  />\n                </Col>\n                <Col md={6}>\n                  <SelectInput\n                    name=\"enrollment_status_id\"\n                    register={register({\n                      required: 'Select enrollment type',\n                    })}\n                    label=\"ENROLLING AS?\"\n                    inline\n                    selectOptions={enrollmentStatusOptions}\n                    error={get(errors, 'enrollment_status_id.message')}\n                  />\n                </Col>\n              </Row>\n            </Card.Body>\n            <Card.Footer className=\"text-right\">\n              <SubmitButton\n                text=\"Enroll Now\"\n                loading={enrolling}\n                loadingText=\"Enrolling...\"\n              />\n            </Card.Footer>\n          </Form>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nEnrollForm.propTypes = {\n  reloadEnrollmentEvent: PropTypes.func.isRequired,\n  currentStudentProgramme: PropTypes.oneOfType([object]).isRequired,\n  enrollmentEvent: PropTypes.oneOfType([object]).isRequired,\n};\n\nexport default EnrollForm;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/EnrolledStudent.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/AcademicDetail.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/NextOfKin.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/GuardianDetail.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/ChangePassword.jsx",["574"],"import { get, isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card, Form } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { FaUserLock } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, InputText, SubmitButton } from '../../components/common';\nimport { authActions } from '../../config/actions';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst ChangePassword = () => {\n  const dispatch = useDispatch();\n  const { register, handleSubmit, errors, reset } = useForm();\n  const changingPassword = useSelector((state) => state.auth.changingPassword);\n  const changePasswordError = useSelector(\n    (state) => state.auth.changePasswordError\n  );\n  const changePasswordSuccess = useSelector(\n    (state) => state.auth.changePasswordSuccess\n  );\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const previousState = usePrevious({\n    changePasswordError,\n    changePasswordSuccess,\n  });\n\n  useEffect(() => {\n    setErrorMessage(null);\n    setSuccessMessage(null);\n    if (!isEmpty(previousState)) {\n      if (\n        previousState.changePasswordError !== changePasswordError &&\n        changePasswordError?.server\n      ) {\n        setErrorMessage(changePasswordError.server.message);\n      }\n      if (\n        previousState.changePasswordSuccess !== changePasswordSuccess &&\n        changePasswordSuccess?.server\n      ) {\n        setSuccessMessage(changePasswordSuccess.server.message);\n        reset();\n      }\n    }\n  }, [changePasswordError, changePasswordSuccess]);\n\n  const onChangePasswordFormSubmit = (data) => {\n    if (!isEmpty(data)) {\n      dispatch(authActions.changePassword(data));\n    }\n  };\n  return (\n    <>\n      <Card.Header className=\"text-primary font600 py-3 text-sm\">\n        <FaUserLock className=\"me-1\" />\n        CHANGE PASSWORD\n      </Card.Header>\n      <Card.Body>\n        {(errorMessage || successMessage) && (\n          <AlertMessage\n            type={errorMessage ? 'danger' : 'success'}\n            message={errorMessage || successMessage}\n          />\n        )}\n        <Form onSubmit={handleSubmit(onChangePasswordFormSubmit)}>\n          <InputText\n            label=\"Old Password\"\n            type=\"password\"\n            name=\"old_password\"\n            inline\n            register={register({\n              required: 'Your old password is Required',\n            })}\n            error={get(errors, 'old_password.message')}\n          />\n          <InputText\n            label=\"New Password\"\n            type=\"password\"\n            name=\"new_password\"\n            inline\n            register={register({\n              required: 'Your New password is Required',\n              minLength: {\n                value: 8,\n                message: 'Password should be at least 8 characters',\n              },\n              maxLength: {\n                value: 16,\n                message: 'Password should be less than 16 characters',\n              },\n            })}\n            error={get(errors, 'new_password.message')}\n          />\n          <InputText\n            label=\"Confirm New Password\"\n            type=\"password\"\n            name=\"confirm_new_password\"\n            inline\n            register={register({\n              required: 'Confirm your New password.',\n              minLength: {\n                value: 8,\n                message: 'Password should be at least 8 characters',\n              },\n              maxLength: {\n                value: 16,\n                message: 'Password should be less than 16 characters',\n              },\n            })}\n            error={get(errors, 'confirm_new_password.message')}\n          />\n\n          <SubmitButton\n            size=\"sm\"\n            loading={changingPassword}\n            text=\"Change Password\"\n            loadingText=\"Updating Password...\"\n            className=\"float-right font600 text-uppercase\"\n          />\n        </Form>\n      </Card.Body>\n    </>\n  );\n};\n\nexport default ChangePassword;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/MyProfile/ProfileData.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/Enrollments.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/SinglePaymentReference.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/ReferenceModal.jsx",["575"],"import { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ModalBody, ModalFooter } from 'react-bootstrap';\nimport { FaCheckCircle } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AlertMessage, CustomModal } from '../../components/common';\nimport { settingActions } from '../../config/actions';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst ReferenceModal = ({ switchTab }) => {\n  const dispatch = useDispatch();\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [generatedReference, setGeneratedReference] = useState({});\n  const { generateSuccess, generateError } = useSelector(\n    (state) => state.paymentReference\n  );\n  const showModal = useSelector((state) => state.setting.showModal);\n  const prevState = usePrevious({ generateSuccess, generateError });\n\n  useEffect(() => {\n    if (\n      !isEmpty(prevState) &&\n      !isEmpty(generateSuccess) &&\n      generateSuccess !== prevState.generateSuccess\n    ) {\n      setGeneratedReference(generateSuccess);\n      dispatch(settingActions.setShowModal(true));\n      if (switchTab) switchTab();\n    }\n    if (\n      !isEmpty(prevState) &&\n      !isEmpty(generateError) &&\n      generateError !== prevState.generateError\n    ) {\n      setErrorMessage(\n        generateError?.error?.message || generateError?.server?.message\n      );\n    }\n  }, [generateSuccess, generateError]);\n\n  return (\n    <>\n      {errorMessage && <AlertMessage message={errorMessage} />}\n      {!isEmpty(generatedReference) && showModal && (\n        <CustomModal\n          backdrop=\"static\"\n          keyboard={false}\n          title=\"PAYMENT REFERENCE GENERATED SUCCESSFULLY\"\n        >\n          <ModalBody className=\"text-center\">\n            <div className=\"text-md font600er\">\n              <FaCheckCircle className=\"text-success me-1\" />\n              PAYMENT REFERENCE NO.:\n              <span className=\"text-sm font600 text-success mx-1\">\n                {generatedReference.ura_prn}\n              </span>\n            </div>\n\n            <div className=\"text-sm font600er\">\n              TOTAL AMOUNT TO PAY:\n              <span className=\"text-sm font600 text-success mx-1\">\n                {`${parseInt(\n                  generatedReference.amount,\n                  10\n                ).toLocaleString()} UGX`}\n              </span>\n            </div>\n\n            <div className=\"text-xs font600er mt-2\">\n              DATE OF EXPIRY:\n              <span className=\"text-xs font600 text-danger mx-2\">\n                {generatedReference.expiry_date}\n              </span>\n            </div>\n\n            <AlertMessage\n              message=\"Copy this reference number and go to your nearest Bank to make your payments.\"\n              variant=\"info\"\n              className=\"text-center font600 p-1 my-2 text-sm\"\n            />\n          </ModalBody>\n          <ModalFooter className=\"py-2 bg-light border-top\">\n            <Button\n              variant=\"danger\"\n              size=\"sm\"\n              onClick={() => dispatch(settingActions.setShowModal(false))}\n              className=\"text-uppercase\"\n            >\n              Close\n            </Button>\n          </ModalFooter>\n        </CustomModal>\n      )}\n    </>\n  );\n};\n\nReferenceModal.defaultProps = {\n  switchTab: null,\n};\n\nReferenceModal.propTypes = {\n  switchTab: PropTypes.func,\n};\n\nexport default ReferenceModal;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/GeneratePaymentReference.jsx",["576"],"import { get, isEmpty, sum, sumBy } from 'lodash';\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { Card, Col, Form, Row } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { FaExclamationCircle } from 'react-icons/fa';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  AlertMessage,\n  InputText,\n  ReloadButton,\n  SubmitButton,\n} from '../../components/common';\nimport { paymentActions, paymentReferenceActions } from '../../config/actions';\nimport { getInvoiceAmount } from './helper';\nimport UnPaidInvoices from './UnPaidInvoices';\n\nconst GeneratePaymentReference = () => {\n  const dispatch = useDispatch();\n  const { register, errors, handleSubmit } = useForm();\n  const [invoiceType, setInvoiceType] = useState('future-payments');\n  const [totalInvoiceDue, setTotalInvoiceDue] = useState(0);\n  const [allUnPaidInvoices, setAllUnPaidInvoices] = useState([]);\n  const [selectedRows, setSelectedRows] = useState([]);\n  const { invoices, loading } = useSelector((state) => state.myInvoice);\n  const { generatingPaymentReference } = useSelector(\n    (state) => state.paymentReference\n  );\n\n  // const paymentMode = watch('payment_mode', null);\n\n  const getInvoices = () => dispatch(paymentActions.getMyInvoices());\n\n  useEffect(() => {\n    if (isEmpty(invoices)) getInvoices();\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(invoices)) {\n      let invoiceAmountsDue = 0;\n      let unPaidInvoices = [];\n\n      invoices.forEach((invoice) => {\n        const tuitionDue = sumBy(invoice.tuition_invoices, 'amount_due');\n        const functionalDue = sumBy(\n          invoice.functional_fees_invoices,\n          'amount_due'\n        );\n        const otherFeesDue = sumBy(invoice.other_fees_invoices, 'amount_due');\n        const manualsDue = sumBy(invoice.manual_invoices, 'amount_due');\n        invoiceAmountsDue += sum([\n          tuitionDue,\n          functionalDue,\n          otherFeesDue,\n          manualsDue,\n        ]);\n\n        const unPaidTuition = invoice?.tuition_invoices?.filter(\n          (unpaidInvoice) => unpaidInvoice.amount_due > 0\n        );\n        const unPaidFunctional = invoice?.functional_fees_invoices?.filter(\n          (unpaidInvoice) => unpaidInvoice.amount_due > 0\n        );\n        const unPaidManual = invoice?.manual_invoices?.filter(\n          (unpaidInvoice) => unpaidInvoice.amount_due > 0\n        );\n        const unPaidOther = invoice?.other_fees_invoices?.filter(\n          (unpaidInvoice) => unpaidInvoice.amount_due > 0\n        );\n        unPaidInvoices = [\n          ...unPaidInvoices,\n          ...unPaidTuition,\n          ...unPaidFunctional,\n          ...unPaidManual,\n          ...unPaidOther,\n        ];\n      });\n      setTotalInvoiceDue(invoiceAmountsDue);\n      setAllUnPaidInvoices(unPaidInvoices);\n      setSelectedRows(\n        unPaidInvoices.map((unpaidInvoice) => {\n          return {\n            id: unpaidInvoice?.id,\n            invoice_number: unpaidInvoice.invoice_number,\n            amount: unpaidInvoice.amount_due,\n          };\n        })\n      );\n    }\n  }, [invoices]);\n\n  const handleFormSubmit = (data) => {\n    if (!isEmpty(data)) {\n      let payload = data;\n      let url = 'future';\n      if (invoiceType === 'all-unpaid-invoices') url = 'all';\n      else if (invoiceType === 'select-unpaid-invoices') {\n        url = 'bulk';\n        payload = {\n          ...payload,\n          tuition_invoices: getInvoiceAmount(\n            selectedRows,\n            'T',\n            'tuition_invoice_id'\n          ),\n          functional_fees_invoices: getInvoiceAmount(\n            selectedRows,\n            'F',\n            'functional_fees_invoice_id'\n          ),\n          other_fees_invoices: getInvoiceAmount(\n            selectedRows,\n            'O',\n            'functional_fees_invoice_id'\n          ),\n          manual_invoices: getInvoiceAmount(\n            selectedRows,\n            'M',\n            'manual_invoice_id'\n          ),\n        };\n      }\n      dispatch(paymentReferenceActions.generatePaymentReference(payload, url));\n    }\n  };\n\n  const invoiceTypes = [\n    {\n      title: '1. FOR FEES DEPOSIT TO MY ACCOUNT',\n      url: 'future-payments',\n      hidden: false,\n    },\n    {\n      title: '2. FOR ALL PENDING INVOICES',\n      url: 'all-unpaid-invoices',\n      hidden: isEmpty(allUnPaidInvoices),\n    },\n    {\n      title: '3. FOR SPECIFIC INVOICES',\n      url: 'select-unpaid-invoices',\n      hidden: isEmpty(allUnPaidInvoices),\n    },\n  ];\n\n  return (\n    <>\n      {isEmpty(allUnPaidInvoices) && (\n        <AlertMessage\n          message=\"You Have No Unpaid Invoices\"\n          icon={<FaExclamationCircle className=\"me-1\" />}\n          className=\"font600 text-sm p-2\"\n          type=\"info\"\n          extras={\n            <ReloadButton\n              loading={loading}\n              onClick={getInvoices}\n              variant=\"link\"\n              text=\"Reload\"\n              size=\"sm\"\n            />\n          }\n        />\n      )}\n      <Form onSubmit={handleSubmit(handleFormSubmit)}>\n        <Row className=\"row-deck mb-4 g-0\">\n          <Col md={5}>\n            <Card body>\n              <Card.Subtitle className=\"mb-4 font600 text-center text-sm\">\n                SELECT PAYMENT REFERENCE TYPE\n              </Card.Subtitle>\n\n              {invoiceTypes.map((invoice) => (\n                <Fragment key={invoice.url}>\n                  {invoice.hidden === false && (\n                    <Card\n                      body\n                      onClick={() => setInvoiceType(invoice.url)}\n                      className={`mb-2 p-2 text-center rounded font600 ${\n                        invoiceType === invoice.url\n                          ? 'bg-primary text-white'\n                          : 'bg-light text-primary'\n                      }`}\n                      style={{ cursor: 'pointer' }}\n                    >\n                      {invoice.title}\n                    </Card>\n                  )}\n                </Fragment>\n              ))}\n            </Card>\n          </Col>\n          <Col md={7}>\n            <Card body className=\"bg-light\">\n              <Card.Subtitle className=\"mb-4 font600 text-primary text-center text-sm\">\n                <span className=\"me-1\">GENERATE REFERENCE FOR</span>\n                {(invoiceType === 'future-payments' &&\n                  'FEES DEPOSIT TO YOUR ACCOUNT') ||\n                  (invoiceType === 'all-unpaid-invoices' &&\n                    'ALL UNPAID INVOICES')}\n              </Card.Subtitle>\n              {invoiceType === 'all-unpaid-invoices' && (\n                <>\n                  <UnPaidInvoices\n                    selectedRows={selectedRows}\n                    setSelectedRows={setSelectedRows}\n                    invoices={allUnPaidInvoices}\n                  />\n                  <Card.Header className=\"rounded-0 border-0 text-sm py-1 my-3 bg-dark text-white\">\n                    TOTAL AMOUNT TO PAY\n                    <div className=\"card-options text-white\">\n                      {`${totalInvoiceDue.toLocaleString()} UGX`}\n                    </div>\n                  </Card.Header>\n                </>\n              )}\n\n              {invoiceType === 'select-unpaid-invoices' && (\n                <>\n                  <UnPaidInvoices\n                    selectedRows={selectedRows}\n                    setSelectedRows={setSelectedRows}\n                    invoices={allUnPaidInvoices}\n                    editAmount\n                  />\n                  <Card.Header className=\"rounded-0 border-0 text-sm py-1 my-3 bg-dark text-white\">\n                    TOTAL AMOUNT TO PAY\n                    <div className=\"card-options text-white\">\n                      {`${sumBy(selectedRows, 'amount').toLocaleString()} UGX`}\n                    </div>\n                  </Card.Header>\n                </>\n              )}\n\n              {invoiceType === 'future-payments' && (\n                <InputText\n                  name=\"amount\"\n                  label=\"AMOUNT TO DEPOSIT\"\n                  register={register({\n                    required: 'Enter the amount to Deposit E.g 1,000,000',\n                    min: {\n                      value: 500,\n                      message: 'Minimum amount should be 500 UGX',\n                    },\n                    max: {\n                      value: 100000000,\n                      message: 'Minimum amount should be 100,000,000 UGX',\n                    },\n                  })}\n                  type=\"number\"\n                  min=\"500\"\n                  max=\"100000000\"\n                  error={get(errors, 'amount.message')}\n                  requiredField\n                />\n              )}\n\n              <div className=\"mt-3 text-end\">\n                <SubmitButton\n                  text=\"GENERATE REFERENCE\"\n                  size=\"md\"\n                  loading={generatingPaymentReference}\n                  loadingText=\"Generating...\"\n                />\n              </div>\n            </Card>\n          </Col>\n        </Row>\n      </Form>\n    </>\n  );\n};\n\nexport default GeneratePaymentReference;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/RegisterStudent.jsx",["577","578"],"import { isEmpty } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { Card } from 'react-bootstrap';\nimport PropTypes, { any } from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  AlertMessage,\n  DataNotFound,\n  DataSpinner,\n  ReloadButton,\n} from '../../components/common';\nimport {\n  authActions,\n  appActions,\n  registrationActions,\n} from '../../config/actions';\nimport { formatMetadata } from '../../helpers/dataFormatter';\nimport RegistrationForm from './RegistrationForm';\nimport usePrevious from '../Hooks/usePrevious';\n\nconst RegisterStudent = ({\n  registrationEvent,\n  enrollmentEvent,\n  enrollmentHistory,\n  reloadRegistrationEvent,\n}) => {\n  const dispatch = useDispatch();\n  const { authUser, currentStudentProgramme } = useSelector(\n    (state) => state.auth\n  );\n  const { metadata } = useSelector((state) => state.app);\n  const {\n    courseUnitsByStudyYear,\n    gettingCourseUnits,\n    registeringStudent,\n    gettingCurrentEvents,\n    registrationError,\n    registrationSuccess,\n  } = useSelector((state) => state.registration);\n  const [registrationStatusOptions, setRegistrationStatusOptions] = useState(\n    []\n  );\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [registrationType, setRegistrationType] = useState(null);\n  const [selectedCourseUnits, setSelectedCourseUnits] = useState([]);\n  const prevState = usePrevious({ registrationError, registrationSuccess });\n\n  useEffect(() => {\n    if (isEmpty(metadata)) dispatch(appActions.getMetadata());\n    if (isEmpty(authUser)) dispatch(authActions.getAuthUser());\n    if (isEmpty(courseUnitsByStudyYear))\n      dispatch(registrationActions.getCourseUnits(currentStudentProgramme?.id));\n  }, []);\n\n  useEffect(() => {\n    if (!isEmpty(metadata)) {\n      setRegistrationStatusOptions(\n        formatMetadata(metadata, 'REGISTRATION STATUSES')\n      );\n      const registrationTypes = formatMetadata(metadata, 'REGISTRATION TYPES');\n      const findFullRegistration = registrationTypes.find((type) =>\n        type.label.includes('FULL')\n      );\n      setRegistrationType(findFullRegistration);\n    }\n  }, [metadata]);\n\n  useEffect(() => {\n    setSuccessMessage(null);\n    setErrorMessage(null);\n    if (!isEmpty(prevState)) {\n      if (\n        !isEmpty(registrationError) &&\n        prevState.registrationError !== registrationError\n      ) {\n        setErrorMessage(\n          registrationError?.error || registrationError.server.message\n        );\n      }\n\n      if (\n        !isEmpty(registrationSuccess) &&\n        prevState.registrationSuccess !== registrationSuccess\n      ) {\n        setSuccessMessage(registrationSuccess?.server?.message);\n      }\n    }\n  }, [registrationError, registrationSuccess]);\n\n  const onClickRegisterButton = () => {\n    if (!isEmpty(registrationEvent)) {\n      const dataToSend = {\n        event_id: registrationEvent?.id,\n        enrollment_id: enrollmentHistory?.id,\n        registration_type_id: registrationType ? registrationType.value : null,\n        course_units: selectedCourseUnits.map((courseUnit) => ({\n          course_unit_id: courseUnit.course_unit_id,\n          course_unit_status_id: courseUnit.registrationStatus?.value,\n        })),\n      };\n      dispatch(registrationActions.registerStudent(dataToSend));\n    }\n  };\n\n  return (\n    <div>\n      {isEmpty(registrationEvent) ? (\n        <>\n          <DataNotFound message=\"There is currently No open Registration Event.\" />\n          <div className=\"text-center\">\n            <ReloadButton\n              loading={gettingCurrentEvents}\n              onClick={reloadRegistrationEvent}\n            />\n          </div>\n        </>\n      ) : (\n        <Card body className=\"border-0 p-0\">\n          {errorMessage && <AlertMessage message={errorMessage} />}\n          {successMessage && (\n            <AlertMessage type=\"success\" message={successMessage} />\n          )}\n          <Card.Header className=\"rounded-0 font600 text-danger text-xs mb-3 border\">\n            REGISTER COURSES FOR\n            <strong className=\"mx-1 font600\">\n              {enrollmentHistory?.studyYear?.programme_study_years}\n            </strong>\n            <strong className=\"me-1 font600\">\n              {`${enrollmentEvent?.semester} -`}\n            </strong>\n            {enrollmentEvent?.academic_year}\n            {currentStudentProgramme && (\n              <div className=\"card-options\">\n                <div className=\"text-info\">\n                  PROG:\n                  {` ${currentStudentProgramme?.programme_title}`}\n                </div>\n              </div>\n            )}\n          </Card.Header>\n          {gettingCourseUnits && isEmpty(courseUnitsByStudyYear) ? (\n            <DataSpinner />\n          ) : (\n            <RegistrationForm\n              registrationStatusOptions={registrationStatusOptions}\n              courseUnitsByStudyYear={courseUnitsByStudyYear}\n              selectedCourseUnits={selectedCourseUnits}\n              setSelectedCourseUnits={setSelectedCourseUnits}\n              onClickRegisterButton={onClickRegisterButton}\n              registeringStudent={registeringStudent}\n            />\n          )}\n        </Card>\n      )}\n    </div>\n  );\n};\n\nRegisterStudent.propTypes = {\n  reloadRegistrationEvent: PropTypes.func.isRequired,\n  registrationEvent: PropTypes.oneOfType([any]).isRequired,\n  enrollmentHistory: PropTypes.oneOfType([any]).isRequired,\n  enrollmentEvent: PropTypes.oneOfType([any]).isRequired,\n};\n\nexport default RegisterStudent;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/RegisteredStudent.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/SingleEnrollment.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/helper.js",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/PaymentReferences/UnPaidInvoices.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/RegistrationForm.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/GeneratePaymentReference.jsx",["579"],"import { isEmpty, sum, sumBy } from 'lodash';\nimport PropTypes, { object } from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { Accordion, Card, Col, Form, Row } from 'react-bootstrap';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SubmitButton } from '../../components/common';\nimport { paymentReferenceActions } from '../../config/actions';\nimport ReferenceModal from '../PaymentReferences/ReferenceModal';\nimport InvoiceCard from './InvoiceCard';\n// import { paymentBanks, paymentModes } from '../PaymentReferences/helper';\n\nconst GeneratePaymentReference = ({ enrollment }) => {\n  const dispatch = useDispatch();\n  const { register, errors, handleSubmit, watch } = useForm({\n    defaultValues: {\n      tuition_amount: parseInt(\n        enrollment?.functionalInvoice?.invoice_amount,\n        10\n      ),\n      functional_amount: parseInt(\n        enrollment?.functionalInvoice?.invoice_amount,\n        10\n      ),\n      other_fees_amount: sumBy(enrollment?.otherFeesInvoice, 'invoice_amount'),\n    },\n  });\n  const [activeKey, setActiveKey] = useState(1);\n  const { generatingPaymentReference } = useSelector(\n    (state) => state.paymentReference\n  );\n\n  const watchValues = watch();\n  // const paymentMode = watch('payment_mode', null);\n\n  const totalAmount =\n    parseInt(enrollment?.functionalInvoice?.invoice_amount, 10) +\n    parseInt(enrollment?.tuitionInvoice?.invoice_amount, 10) +\n    sumBy(enrollment?.otherFeesInvoice, 'invoice_amount');\n\n  const [newTotalAmount, setNewTotalAmount] = useState(totalAmount);\n\n  useEffect(() => {\n    if (!isEmpty(watchValues)) {\n      let newTotal = 0;\n      if (watchValues.tuition_fees_amount) {\n        newTotal += parseInt(watchValues.tuition_fees_amount, 10);\n      }\n\n      if (watchValues.functional_fees_amount) {\n        newTotal += parseInt(watchValues.functional_fees_amount, 10);\n      }\n\n      if (watchValues.other_fees_amount) {\n        newTotal += parseInt(sum(watchValues.other_fees_amount), 10);\n      }\n      if (newTotal !== newTotalAmount) setNewTotalAmount(newTotal);\n    }\n  }, [watchValues]);\n\n  const handleFormSubmit = (data) => {\n    if (!isEmpty(data)) {\n      let payload = data;\n      if (data.tuition_fees_amount) {\n        payload = {\n          ...payload,\n          tuition_invoices: [\n            {\n              tuition_invoice_id: enrollment.tuitionInvoice.id,\n              amount: parseInt(data.tuition_fees_amount, 10),\n            },\n          ],\n        };\n        delete payload.tuition_fees_amount;\n      }\n      if (data.functional_fees_amount) {\n        payload = {\n          ...payload,\n          functional_fees_invoices: [\n            {\n              functional_fees_invoice_id: enrollment.functionalInvoice.id,\n              amount: parseInt(data.functional_fees_amount, 10),\n            },\n          ],\n        };\n        delete payload.functional_fees_amount;\n      }\n      if (data.other_fees_amount) {\n        payload = {\n          ...payload,\n          other_fees_invoices: [\n            {\n              functional_fees_invoice_id: enrollment.otherFeesInvoice.id,\n              amount: parseInt(data.other_fees_amount, 10),\n            },\n          ],\n        };\n        delete payload.other_fees_amount;\n      }\n      dispatch(\n        paymentReferenceActions.generatePaymentReference(payload, 'bulk')\n      );\n    }\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit(handleFormSubmit)}>\n        <Accordion defaultActiveKey=\"1\" activeKey={activeKey}>\n          {!isEmpty(enrollment.tuitionInvoice) && (\n            <InvoiceCard\n              invoiceTitle=\"Tuition Fees Invoice\"\n              invoiceCardId={1}\n              invoiceType=\"tuition_fees_amount\"\n              activeKey={activeKey}\n              register={register}\n              errors={errors}\n              setActiveKey={setActiveKey}\n              invoice={enrollment.tuitionInvoice}\n            />\n          )}\n          {!isEmpty(enrollment.tuitionInvoice) && (\n            <InvoiceCard\n              invoiceTitle=\"Functional Fees Invoice\"\n              invoiceCardId={2}\n              invoiceType=\"functional_fees_amount\"\n              register={register}\n              errors={errors}\n              activeKey={activeKey}\n              setActiveKey={setActiveKey}\n              invoice={enrollment.functionalInvoice}\n            />\n          )}\n          {!isEmpty(enrollment.otherFeesInvoice) && (\n            <InvoiceCard\n              invoiceTitle=\"Other Fees Invoice\"\n              invoiceCardId={3}\n              invoiceType=\"other_fees_amount\"\n              register={register}\n              errors={errors}\n              activeKey={activeKey}\n              setActiveKey={setActiveKey}\n              invoice={enrollment.otherFeesInvoice}\n            />\n          )}\n        </Accordion>\n        {parseInt(newTotalAmount, 10) > 0 && (\n          <>\n            <Card.Header className=\"rounded-0 border-0 text-sm py-1 mb-2 bg-dark text-white\">\n              TOTAL AMOUNT TO PAY\n              <div className=\"card-options text-white\">{`${newTotalAmount.toLocaleString()} UGX`}</div>\n            </Card.Header>\n\n            {/* TODO: To be activated  when Different Payments Modes are allowed\n            <SelectInput\n              selectOptions={paymentModes}\n              name=\"payment_mode\"\n              label=\"PAYMENT MODE\"\n              register={register({\n                required: 'Payment Mode is Required',\n              })}\n              inline\n              error={get(errors, 'payment_mode.message')}\n              requiredField\n            />\n            {!includes(['MOBPMT', 'ONLINE'], paymentMode) && (\n              <SelectInput\n                selectOptions={paymentBanks}\n                name=\"payment_bank_code\"\n                label=\"PAYMENT BANK\"\n                inline\n                register={register({\n                  required: 'Payment Bank is Required',\n                })}\n                error={get(errors, 'payment_bank_code.message')}\n              />\n            )} */}\n\n            <Row>\n              <Col md={12} className=\"text-right\">\n                <SubmitButton\n                  text=\"GENERATE REFERENCE NO.\"\n                  size=\"sm\"\n                  loading={generatingPaymentReference}\n                  loadingText=\"Generating...\"\n                  variant=\"info\"\n                  className=\"text-sm mt-2\"\n                />\n              </Col>\n            </Row>\n          </>\n        )}\n      </Form>\n\n      <ReferenceModal />\n    </>\n  );\n};\n\nGeneratePaymentReference.defaultProps = {\n  enrollment: {},\n};\n\nGeneratePaymentReference.propTypes = {\n  enrollment: PropTypes.oneOfType([object]),\n};\n\nexport default GeneratePaymentReference;\n","/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/SelectedCourseUnits.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/StudyYearCourseUnits.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/InvoiceCard.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/RegistrationHistory/RegistrationStatusPopUp.jsx",[],"/Users/admin/Documents/react-projects/hesmis/hesmis-front/src/containers/EnrollmentHistory/InvoiceForm.jsx",[],{"ruleId":"580","severity":1,"message":"581","line":28,"column":6,"nodeType":"582","endLine":28,"endColumn":8,"suggestions":"583"},{"ruleId":"580","severity":1,"message":"584","line":50,"column":6,"nodeType":"582","endLine":50,"endColumn":34,"suggestions":"585"},{"ruleId":"580","severity":1,"message":"586","line":20,"column":6,"nodeType":"582","endLine":20,"endColumn":33,"suggestions":"587"},{"ruleId":"588","severity":1,"message":"589","line":21,"column":3,"nodeType":"590","messageId":"591","endLine":21,"endColumn":9},{"ruleId":"580","severity":1,"message":"592","line":32,"column":6,"nodeType":"582","endLine":32,"endColumn":8,"suggestions":"593"},{"ruleId":"580","severity":1,"message":"586","line":38,"column":6,"nodeType":"582","endLine":38,"endColumn":20,"suggestions":"594"},{"ruleId":"580","severity":1,"message":"595","line":23,"column":6,"nodeType":"582","endLine":23,"endColumn":8,"suggestions":"596"},{"ruleId":"588","severity":1,"message":"597","line":13,"column":9,"nodeType":"590","messageId":"591","endLine":13,"endColumn":29},{"ruleId":"580","severity":1,"message":"598","line":38,"column":6,"nodeType":"582","endLine":38,"endColumn":8,"suggestions":"599"},{"ruleId":"580","severity":1,"message":"600","line":58,"column":6,"nodeType":"582","endLine":58,"endColumn":34,"suggestions":"601"},{"ruleId":"588","severity":1,"message":"602","line":3,"column":10,"nodeType":"590","messageId":"591","endLine":3,"endColumn":21},{"ruleId":"588","severity":1,"message":"603","line":3,"column":29,"nodeType":"590","messageId":"591","endLine":3,"endColumn":35},{"ruleId":"588","severity":1,"message":"604","line":6,"column":10,"nodeType":"590","messageId":"591","endLine":6,"endColumn":22},{"ruleId":"588","severity":1,"message":"605","line":6,"column":24,"nodeType":"590","messageId":"591","endLine":6,"endColumn":35},{"ruleId":"588","severity":1,"message":"606","line":12,"column":11,"nodeType":"590","messageId":"591","endLine":12,"endColumn":33},{"ruleId":"588","severity":1,"message":"607","line":15,"column":36,"nodeType":"590","messageId":"591","endLine":15,"endColumn":50},{"ruleId":"580","severity":1,"message":"608","line":31,"column":6,"nodeType":"582","endLine":31,"endColumn":8,"suggestions":"609"},{"ruleId":"588","severity":1,"message":"610","line":39,"column":9,"nodeType":"590","messageId":"591","endLine":39,"endColumn":22},{"ruleId":"580","severity":1,"message":"611","line":28,"column":6,"nodeType":"582","endLine":28,"endColumn":8,"suggestions":"612"},{"ruleId":"580","severity":1,"message":"613","line":44,"column":6,"nodeType":"582","endLine":44,"endColumn":17,"suggestions":"614"},{"ruleId":"580","severity":1,"message":"615","line":64,"column":6,"nodeType":"582","endLine":64,"endColumn":18,"suggestions":"616"},{"ruleId":"580","severity":1,"message":"586","line":21,"column":6,"nodeType":"582","endLine":21,"endColumn":8,"suggestions":"617"},{"ruleId":"580","severity":1,"message":"618","line":39,"column":6,"nodeType":"582","endLine":39,"endColumn":16,"suggestions":"619"},{"ruleId":"580","severity":1,"message":"620","line":54,"column":6,"nodeType":"582","endLine":54,"endColumn":46,"suggestions":"621"},{"ruleId":"580","severity":1,"message":"615","line":73,"column":6,"nodeType":"582","endLine":73,"endColumn":48,"suggestions":"622"},{"ruleId":"580","severity":1,"message":"623","line":37,"column":6,"nodeType":"582","endLine":37,"endColumn":8,"suggestions":"624"},{"ruleId":"580","severity":1,"message":"625","line":51,"column":6,"nodeType":"582","endLine":51,"endColumn":24,"suggestions":"626"},{"ruleId":"580","severity":1,"message":"627","line":61,"column":6,"nodeType":"582","endLine":61,"endColumn":17,"suggestions":"628"},{"ruleId":"580","severity":1,"message":"629","line":28,"column":6,"nodeType":"582","endLine":28,"endColumn":8,"suggestions":"630"},{"ruleId":"580","severity":1,"message":"631","line":25,"column":6,"nodeType":"582","endLine":25,"endColumn":8,"suggestions":"632"},{"ruleId":"580","severity":1,"message":"627","line":40,"column":6,"nodeType":"582","endLine":40,"endColumn":41,"suggestions":"633"},{"ruleId":"580","severity":1,"message":"634","line":27,"column":6,"nodeType":"582","endLine":27,"endColumn":8,"suggestions":"635"},{"ruleId":"580","severity":1,"message":"636","line":40,"column":6,"nodeType":"582","endLine":40,"endColumn":8,"suggestions":"637"},{"ruleId":"580","severity":1,"message":"638","line":40,"column":6,"nodeType":"582","endLine":40,"endColumn":8,"suggestions":"639"},{"ruleId":"580","severity":1,"message":"640","line":33,"column":6,"nodeType":"582","endLine":33,"endColumn":8,"suggestions":"641"},{"ruleId":"588","severity":1,"message":"642","line":1,"column":10,"nodeType":"590","messageId":"591","endLine":1,"endColumn":17},{"ruleId":"588","severity":1,"message":"643","line":6,"column":10,"nodeType":"590","messageId":"591","endLine":6,"endColumn":22},{"ruleId":"580","severity":1,"message":"644","line":28,"column":6,"nodeType":"582","endLine":28,"endColumn":8,"suggestions":"645"},{"ruleId":"580","severity":1,"message":"646","line":37,"column":6,"nodeType":"582","endLine":37,"endColumn":8,"suggestions":"647"},{"ruleId":"580","severity":1,"message":"627","line":47,"column":6,"nodeType":"582","endLine":47,"endColumn":19,"suggestions":"648"},{"ruleId":"580","severity":1,"message":"649","line":62,"column":6,"nodeType":"582","endLine":62,"endColumn":16,"suggestions":"650"},{"ruleId":"580","severity":1,"message":"651","line":46,"column":6,"nodeType":"582","endLine":46,"endColumn":50,"suggestions":"652"},{"ruleId":"580","severity":1,"message":"653","line":40,"column":6,"nodeType":"582","endLine":40,"endColumn":38,"suggestions":"654"},{"ruleId":"580","severity":1,"message":"629","line":35,"column":6,"nodeType":"582","endLine":35,"endColumn":8,"suggestions":"655"},{"ruleId":"580","severity":1,"message":"656","line":54,"column":6,"nodeType":"582","endLine":54,"endColumn":8,"suggestions":"657"},{"ruleId":"580","severity":1,"message":"627","line":89,"column":6,"nodeType":"582","endLine":89,"endColumn":46,"suggestions":"658"},{"ruleId":"580","severity":1,"message":"659","line":59,"column":6,"nodeType":"582","endLine":59,"endColumn":19,"suggestions":"660"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'institutionStructure', and 'metadata'. Either include them or remove the dependency array.","ArrayExpression",["661"],"React Hook useEffect has missing dependencies: 'addToast', 'prevState', and 'removeAllToasts'. Either include them or remove the dependency array.",["662"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["663"],"no-unused-vars","'FaUser' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'authUser', 'dispatch', and 'institutionStructure'. Either include them or remove the dependency array.",["664"],["665"],"React Hook useEffect has missing dependencies: 'dispatch' and 'institutionStructure'. Either include them or remove the dependency array.",["666"],"'handleActiveKeyState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'accessToken', 'authUser', 'dispatch', 'institutionStructure', and 'isAuthenticated'. Either include them or remove the dependency array.",["667"],"React Hook useEffect has missing dependencies: 'logoutCurrentUser' and 'prevState'. Either include them or remove the dependency array.",["668"],"'ButtonGroup' is defined but never used.","'Button' is defined but never used.","'AlertMessage' is defined but never used.","'DataSpinner' is defined but never used.","'gettingCurrentSemester' is assigned a value but never used.","'accountBalance' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentSemester' and 'reloadCurrentSemester'. Either include them or remove the dependency array.",["669"],"'buttonOptions' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'accessToken?.token', 'dispatch', and 'isAuthenticated'. Either include them or remove the dependency array.",["670"],"React Hook useEffect has missing dependencies: 'dispatch', 'previousState', and 'setCookie'. Either include them or remove the dependency array.",["671"],"React Hook useEffect has missing dependencies: 'previousState' and 'setCurrentPage'. Either include them or remove the dependency array. If 'setCurrentPage' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["672"],["673"],"React Hook useEffect has a missing dependency: 'setCurrentStudentProgramme'. Either include it or remove the dependency array.",["674"],"React Hook useEffect has a missing dependency: 'previousState'. Either include it or remove the dependency array.",["675"],["676"],"React Hook useEffect has missing dependencies: 'currentStudentProgramme.programme_code', 'getMyResult', and 'results'. Either include them or remove the dependency array.",["677"],"React Hook useEffect has a missing dependency: 'currentStudentProgramme?.programme_code'. Either include it or remove the dependency array.",["678"],"React Hook useEffect has a missing dependency: 'prevState'. Either include it or remove the dependency array.",["679"],"React Hook useEffect has missing dependencies: 'getInvoices' and 'invoices'. Either include them or remove the dependency array.",["680"],"React Hook useEffect has missing dependencies: 'getTransactions' and 'transactions'. Either include them or remove the dependency array.",["681"],["682"],"React Hook useEffect has missing dependencies: 'registrationHistories' and 'reloadRegistrationHistory'. Either include them or remove the dependency array.",["683"],"React Hook useEffect has missing dependencies: 'reloadEnrollmentEvent' and 'semesterEvent'. Either include them or remove the dependency array.",["684"],"React Hook useEffect has missing dependencies: 'authUser' and 'reloadAuthUser'. Either include them or remove the dependency array.",["685"],"React Hook useEffect has missing dependencies: 'paymentReferences' and 'reloadPaymentReferences'. Either include them or remove the dependency array.",["686"],"'isEmpty' is defined but never used.","'DataNotFound' is defined but never used.","React Hook useEffect has missing dependencies: 'enrollmentHistories' and 'reloadEnrollmentHistory'. Either include them or remove the dependency array.",["687"],"React Hook useEffect has missing dependencies: 'dispatch' and 'metadata'. Either include them or remove the dependency array.",["688"],["689"],"React Hook useEffect has a missing dependency: 'currentStudentProgramme'. Either include it or remove the dependency array.",["690"],"React Hook useEffect has missing dependencies: 'previousState' and 'reset'. Either include them or remove the dependency array.",["691"],"React Hook useEffect has missing dependencies: 'dispatch', 'prevState', and 'switchTab'. Either include them or remove the dependency array. If 'switchTab' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["692"],["693"],"React Hook useEffect has missing dependencies: 'authUser', 'courseUnitsByStudyYear', 'currentStudentProgramme?.id', 'dispatch', and 'metadata'. Either include them or remove the dependency array.",["694"],["695"],"React Hook useEffect has a missing dependency: 'newTotalAmount'. Either include it or remove the dependency array.",["696"],{"desc":"697","fix":"698"},{"desc":"699","fix":"700"},{"desc":"701","fix":"702"},{"desc":"703","fix":"704"},{"desc":"705","fix":"706"},{"desc":"707","fix":"708"},{"desc":"709","fix":"710"},{"desc":"711","fix":"712"},{"desc":"713","fix":"714"},{"desc":"715","fix":"716"},{"desc":"717","fix":"718"},{"desc":"719","fix":"720"},{"desc":"721","fix":"722"},{"desc":"723","fix":"724"},{"desc":"725","fix":"726"},{"desc":"727","fix":"728"},{"desc":"729","fix":"730"},{"desc":"731","fix":"732"},{"desc":"733","fix":"734"},{"desc":"735","fix":"736"},{"desc":"737","fix":"738"},{"desc":"739","fix":"740"},{"desc":"741","fix":"742"},{"desc":"743","fix":"744"},{"desc":"745","fix":"746"},{"desc":"747","fix":"748"},{"desc":"749","fix":"750"},{"desc":"751","fix":"752"},{"desc":"753","fix":"754"},{"desc":"755","fix":"756"},{"desc":"757","fix":"758"},{"desc":"759","fix":"760"},{"desc":"735","fix":"761"},{"desc":"762","fix":"763"},{"desc":"764","fix":"765"},{"desc":"766","fix":"767"},"Update the dependencies array to be: [dispatch, institutionStructure, metadata]",{"range":"768","text":"769"},"Update the dependencies array to be: [addToast, prevState, removeAllToasts, serverError, serverSuccess]",{"range":"770","text":"771"},"Update the dependencies array to be: [accessToken, dispatch, selectedMenu]",{"range":"772","text":"773"},"Update the dependencies array to be: [authUser, dispatch, institutionStructure]",{"range":"774","text":"775"},"Update the dependencies array to be: [dispatch, selectedMenu]",{"range":"776","text":"777"},"Update the dependencies array to be: [dispatch, institutionStructure]",{"range":"778","text":"779"},"Update the dependencies array to be: [accessToken, authUser, dispatch, institutionStructure, isAuthenticated]",{"range":"780","text":"781"},"Update the dependencies array to be: [authUserError, accessToken, prevState, logoutCurrentUser]",{"range":"782","text":"783"},"Update the dependencies array to be: [currentSemester, reloadCurrentSemester]",{"range":"784","text":"785"},"Update the dependencies array to be: [accessToken?.token, dispatch, isAuthenticated]",{"range":"786","text":"787"},"Update the dependencies array to be: [dispatch, loginData, previousState, setCookie]",{"range":"788","text":"789"},"Update the dependencies array to be: [loginError, previousState, setCurrentPage]",{"range":"790","text":"791"},"Update the dependencies array to be: [dispatch]",{"range":"792","text":"793"},"Update the dependencies array to be: [authUser, setCurrentStudentProgramme]",{"range":"794","text":"795"},"Update the dependencies array to be: [previousState, requestTokenError, requestTokenSuccess]",{"range":"796","text":"797"},"Update the dependencies array to be: [previousState, resetPasswordError, resetPasswordSuccess, setCurrentPage]",{"range":"798","text":"799"},"Update the dependencies array to be: [currentStudentProgramme.programme_code, getMyResult, results]",{"range":"800","text":"801"},"Update the dependencies array to be: [results, loading, currentStudentProgramme?.programme_code]",{"range":"802","text":"803"},"Update the dependencies array to be: [loadError, prevState]",{"range":"804","text":"805"},"Update the dependencies array to be: [getInvoices, invoices]",{"range":"806","text":"807"},"Update the dependencies array to be: [getTransactions, transactions]",{"range":"808","text":"809"},"Update the dependencies array to be: [prevState, searchPayment, searchPaymentError]",{"range":"810","text":"811"},"Update the dependencies array to be: [registrationHistories, reloadRegistrationHistory]",{"range":"812","text":"813"},"Update the dependencies array to be: [reloadEnrollmentEvent, semesterEvent]",{"range":"814","text":"815"},"Update the dependencies array to be: [authUser, reloadAuthUser]",{"range":"816","text":"817"},"Update the dependencies array to be: [paymentReferences, reloadPaymentReferences]",{"range":"818","text":"819"},"Update the dependencies array to be: [enrollmentHistories, reloadEnrollmentHistory]",{"range":"820","text":"821"},"Update the dependencies array to be: [dispatch, metadata]",{"range":"822","text":"823"},"Update the dependencies array to be: [enrollError, prevState]",{"range":"824","text":"825"},"Update the dependencies array to be: [currentStudentProgramme, metadata]",{"range":"826","text":"827"},"Update the dependencies array to be: [changePasswordError, changePasswordSuccess, previousState, reset]",{"range":"828","text":"829"},"Update the dependencies array to be: [generateSuccess, generateError, prevState, dispatch, switchTab]",{"range":"830","text":"831"},{"range":"832","text":"807"},"Update the dependencies array to be: [authUser, courseUnitsByStudyYear, currentStudentProgramme?.id, dispatch, metadata]",{"range":"833","text":"834"},"Update the dependencies array to be: [prevState, registrationError, registrationSuccess]",{"range":"835","text":"836"},"Update the dependencies array to be: [newTotalAmount, watchValues]",{"range":"837","text":"838"},[1146,1148],"[dispatch, institutionStructure, metadata]",[1722,1750],"[addToast, prevState, removeAllToasts, serverError, serverSuccess]",[819,846],"[accessToken, dispatch, selectedMenu]",[1224,1226],"[authUser, dispatch, institutionStructure]",[1367,1381],"[dispatch, selectedMenu]",[894,896],"[dispatch, institutionStructure]",[1357,1359],"[accessToken, authUser, dispatch, institutionStructure, isAuthenticated]",[1831,1859],"[authUserError, accessToken, prevState, logoutCurrentUser]",[1142,1144],"[currentSemester, reloadCurrentSemester]",[1106,1108],"[accessToken?.token, dispatch, isAuthenticated]",[1495,1506],"[dispatch, loginData, previousState, setCookie]",[2005,2017],"[loginError, previousState, setCurrentPage]",[746,748],"[dispatch]",[1404,1414],"[authUser, setCurrentStudentProgramme]",[1801,1841],"[previousState, requestTokenError, requestTokenSuccess]",[2337,2379],"[previousState, resetPasswordError, resetPasswordSuccess, setCurrentPage]",[1191,1193],"[currentStudentProgramme.programme_code, getMyResult, results]",[1526,1544],"[results, loading, currentStudentProgramme?.programme_code]",[1774,1785],"[loadError, prevState]",[1005,1007],"[getInvoices, invoices]",[866,868],"[getTransactions, transactions]",[1421,1456],"[prevState, searchPayment, searchPaymentError]",[1062,1064],"[registrationHistories, reloadRegistrationHistory]",[1431,1433],"[reloadEnrollmentEvent, semesterEvent]",[1353,1355],"[authUser, reloadAuthUser]",[1222,1224],"[paymentReferences, reloadPaymentReferences]",[848,850],"[enrollmentHistories, reloadEnrollmentHistory]",[1307,1309],"[dispatch, metadata]",[1508,1521],"[enrollError, prevState]",[1899,1909],"[currentStudentProgramme, metadata]",[1619,1663],"[changePasswordError, changePasswordSuccess, previousState, reset]",[1441,1473],"[generateSuccess, generateError, prevState, dispatch, switchTab]",[1346,1348],[1802,1804],"[authUser, courseUnitsByStudyYear, currentStudentProgramme?.id, dispatch, metadata]",[2777,2817],"[prevState, registrationError, registrationSuccess]",[2138,2151],"[newTotalAmount, watchValues]"]